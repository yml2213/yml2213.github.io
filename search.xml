<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>如何写一个简单的签到脚本(小白向)</title>
      <link href="/2022041231679/"/>
      <url>/2022041231679/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote><p><strong>背景</strong>: 最近羊毛没啥好写的了,京东也慢慢薅不动了(blog也鸽🕊了好久了呢),最近也有人问我脚本的问题,这里就统一写一个基础的脚本教程,给大家抛砖引玉,做一个基础基础!(本人小白水平,其中有啥错误 ❎ ,也希望各位大佬指教 )</p></blockquote><h2 id="一-梳理思路"><a class="markdownIt-Anchor" href="#一-梳理思路"></a> <strong>一 : 梳理思路：</strong></h2><ol><li><p>想要签到 , 必须有一个可以签到的软件 , 网页 , 小程序等</p></li><li><p><a href="https://www.wangan.com/p/7fygfgd3e50bbcae">抓包</a> 你想要进行签到的 软件 , 网页 , 小程序等(不会抓包或抓不到包的点击<a href="https://www.wangan.com/p/7fygfgd3e50bbcae">抓包</a> 的超链接去学习)</p></li><li><p>然后就是分析(很有可能需要解密的相关知识)你抓的数据包 , 直到找到 <strong>签到</strong> (或其他操作) 包</p></li><li><p>使用测试工具进行测试,确定是否可以请求成功(不成功自己寻找并解决问题)直到可以成功请求</p></li><li><p>最后就是写脚本了, 只要前面的完成了, 写脚本那就很快了</p></li></ol><h2 id="二-思路有了-那就开始吧"><a class="markdownIt-Anchor" href="#二-思路有了-那就开始吧"></a> 二: 思路有了, 那就开始吧!</h2><blockquote><p>博主是小白  博主是小白  博主是小白  博主是小白  博主是小白</p><p>有任何错误笑笑就好了 ,  当然更加欢迎您指出我的错误 , 万分感激的!</p></blockquote><h3 id="首先确定一个目标今天来个简单的例子"><a class="markdownIt-Anchor" href="#首先确定一个目标今天来个简单的例子"></a> 首先确定一个目标(今天来个简单的例子🌰)</h3><p>微信小程序:骁友会 (直接搜索或扫码进入:扫码有邀请 没啥用的,在意的自己搜索)</p><ul><li><img src="https://yml-img.ml:521/images/2022/04/11/image-20220411213118940.png" alt="image-20220411213118940" style="zoom: 33%;" /></li><li>注册登录后可以找到 <strong>任务列表</strong> 里面有 <strong>每日签到</strong>  跟其他的很多任务(今天就搞这个签到)</li><li>然后就是下一步了</li></ul><h3 id="进行-签到-相关操作的抓包"><a class="markdownIt-Anchor" href="#进行-签到-相关操作的抓包"></a> 进行 <strong>签到</strong> (相关操作)的抓包</h3><h4 id="根据不同的机型-我们需要分类讨论了-首先来说说ios吧"><a class="markdownIt-Anchor" href="#根据不同的机型-我们需要分类讨论了-首先来说说ios吧"></a> 根据不同的机型 , 我们需要分类讨论了  首先来说说ios吧</h4><ul><li>ios 抓包相关<ul><li>抓包软件<ul><li>免费的 : stream  图标就是个心电图是的 , 免费软件 , 国区可自行下载</li><li>收费软件:<ol><li>不得不说的就是 <strong><a href="https://www.kejiwanjia.com/jiaocheng/zheteng/notes/21016.html">圈x</a></strong> ios绕不开的软件 , 操作教程找科技玩家小姐姐(点击超链接即可)(不会告诉你我搬运到我的bolg了) , 需要自行外区下载</li><li>thor 也叫锤子 , 就是长得像索尔的🔨吧  , 需要自行外区下载 (有这个软件的应该不需要教程)</li><li>Http Catcher 也叫网球 🎾 ,可能就是长得像🎾吧  国区可下载 , 高级功能需要付费解锁 🔓 , 有这个软件的也不需要教程</li><li>别的没怎么用过 , 听说过了</li></ol></li></ul></li><li>抓包操作<ul><li>不同的软件 , 操作也有所差异 , 但是本质都是一样的 , 都是通过建立 vpn 进行代理网络流量 , 从而进行捕获数据包 . 想要捕获https 数据包 , 都需要进行证书的信任工作 , 记得有两个关于证书的操作就够了,一个地方安装证书 , 一个地方信任证书 ;  详细教程自己百度  , google 去吧!</li></ul></li></ul></li></ul><h4 id="android-抓包相关"><a class="markdownIt-Anchor" href="#android-抓包相关"></a> Android 抓包相关</h4><ul><li>相对比 ios 来说 , 安卓的抓包就有利有弊了,得益于安卓的生态,也毁在安卓的生态(个人见解哈)<ul><li>抓包软件<ul><li>小黄鸟(3.3.6) ,  小蓝鸟 , 还有各种小黄鸟的改版 ; 安卓端知名的抓包软件 , 推荐3.3.6版本,别问为啥</li><li>抓包精灵  跟小黄鸟差不多的</li><li>还有好多好多好多好多没听说过的软件</li></ul></li></ul></li><li>抓包操作 同ios  自行搜索研究去吧!</li></ul><h4 id="pc-抓包相关"><a class="markdownIt-Anchor" href="#pc-抓包相关"></a> PC 抓包相关</h4><ul><li>上面的软件基本都是基于手机的 , 总有这样那样的不方便的地方,个人觉得还是配合电脑抓包,才能更好 , 更更快的分析数据包 (当然,你只有手机就当我在💨)</li><li>PC 抓包软件推荐<ol><li><strong>Fiddler</strong>   首推fd,mac的话可以考虑 <strong>charles</strong> , fd的强大是人尽皆知的:学习链接 – <a href="https://www.52pojie.cn/forum.php?mod=viewthread&amp;tid=1171662&amp;highlight=Fiddler">52破解基础基础</a>   <a href="https://www.52pojie.cn/home.php?mod=space&amp;uid=1075167&amp;do=thread&amp;view=me&amp;order=dateline&amp;from=space&amp;page=2">进阶教程</a></li><li><strong>charles</strong>  （也叫花瓶、青花瓷等）mac用户首推这个 , 当然win也有这个 分类很好用; <a href="https://zhuanlan.kanxue.com/article-13139.htm">看雪charles教程</a></li><li>别的没怎么用过  , 当然抓包工具还有超级多的</li></ol></li></ul><h4 id="抓包签到"><a class="markdownIt-Anchor" href="#抓包签到"></a> 抓包签到</h4><ul><li>打开你的抓包软件 , 或者手机连上你的电脑抓包软件</li><li>确定开始正常抓包后去app执行签到相关操作</li><li>返回抓包工具 , 停止抓包 , 备注刚才抓包的app 进行的操作(不能备注的也没办法)</li><li>至此,抓包结束 🔚</li></ul><h3 id="分析刚才抓的数据包"><a class="markdownIt-Anchor" href="#分析刚才抓的数据包"></a> 分析刚才抓的数据包</h3><blockquote><p>分析数据包这个东西吧  , 没法教 ,主要看自己的悟性(就是猜) , 自己的英语水平 (数据包基本没有中文,只有部分中文的提示,基本全是英语) ,  还有就是自己的经验(废话) ,我们一点点来说吧！</p></blockquote><h4 id="首先可以根据-url-链接寻找关键字进行定位-就是有根据的瞎猜"><a class="markdownIt-Anchor" href="#首先可以根据-url-链接寻找关键字进行定位-就是有根据的瞎猜"></a> 首先可以根据 <strong>url</strong> 链接,寻找关键字进行定位 📌 (就是有根据的瞎猜)</h4><ul><li>例如: 某个url如下</li><li><code>https://qualcomm.growthideadata.com/qualcomm-app/api/user/signIn?userId=xxx</code> 请你判断下这个url 是做什么工作的       <span class="hide-inline"><button type="button" class="hide-button button--animated" style="background-color: #FF7242;color: #fff">点击我查看答案  </button><span class="hide-content">用户登录 </span></span></li><li>我们来分析下这个 <strong>url</strong><ol><li>首先前面是固定的 <code>https://</code>  这个是 <strong>https</strong> 请求</li><li><code>qualcomm.growthideadata.com</code> 是他的域名(也就是host)</li><li><code>/user/signIn</code>  很明显就是<code>/用户/登录</code> 了鸭</li></ol></li><li>像这种的根据 <strong>url</strong> 中的英文单词来判断 这个数据包功能是 非常非常非常 常见的,因为你第一眼看到的就是这玩意了</li></ul><h4 id="然后我们还可以根据-响应体-来进行判断-请求头-请求体-响应头-响应体还不懂的自行去补课-简书"><a class="markdownIt-Anchor" href="#然后我们还可以根据-响应体-来进行判断-请求头-请求体-响应头-响应体还不懂的自行去补课-简书"></a> 然后我们还可以根据 <strong>响应体</strong> 来进行判断  (请求头  请求体 响应头 响应体还不懂的自行去补课: <a href="https://www.jianshu.com/p/eb3e5ec98a66">简书</a> )</h4><ul><li>例如: 某个响应体如下 ;</li></ul> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;code&quot;</span>: <span class="number">0</span>,</span><br><span class="line">  <span class="string">&quot;message&quot;</span>: <span class="string">&quot;success！&quot;</span>,</span><br><span class="line">  <span class="string">&quot;data&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;coins&quot;</span>: <span class="number">5</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>请你判断下这个 响应体  可能是什么的 , 我们经常用的数据有哪些?     <span class="hide-inline"><button type="button" class="hide-button button--animated" style="background-color: #FF7242;color: #fff">点击我查看答案  </button><span class="hide-content">用户签到获得硬币(金币等) 常用数据:code message coins </span></span></li></ul><h4 id="我们可以根据数据包的类型来进行初步筛选"><a class="markdownIt-Anchor" href="#我们可以根据数据包的类型来进行初步筛选"></a> 我们可以根据数据包的类型来进行初步筛选</h4><ul><li>一般请求都是 <code>post</code> 或者 <code>get</code> 请求 , 我们根据数据包类型减少工作量</li><li>一般有携带账号密码信息的请求都是使用 <code>post</code> 进行的</li><li>一些简单的请求可能使用 <code>get</code></li></ul><h4 id="我们可以根据获得的数据进行搜索筛选"><a class="markdownIt-Anchor" href="#我们可以根据获得的数据进行搜索筛选"></a> 我们可以根据获得的数据进行搜索筛选</h4><ul><li>例如: 我们签到获得了5 积分 , 我们就可以直接搜索 <code>5</code> 作为关键字搜索响应体(因为这个数据是服务器发回我们的,所以搜索响应体) ; 搜索出来数据可能超级多 因为 <code>5</code> 太常见了  ;  如果 <code>33</code>  <code>78</code> 等这样的值这样搜索 效果比较好</li><li>同理，也可以进行中文的搜索筛选（效果非常不理想，很多返回都是英文的）</li></ul><h4 id="可以通过软件内的时间来进行辅助定位"><a class="markdownIt-Anchor" href="#可以通过软件内的时间来进行辅助定位"></a> 可以通过软件内的时间来进行辅助定位</h4><ul><li>例如：你签到成功后，很多软件都会给你一个积分（金币）啥的明细表，就是你什么时间，做了什么操作，然后获得了多少积分等</li><li>可以根据软件给的时间 来进行辅助定位，很多软件会精确到毫秒 ，所以这不失为一个好方法呢(<sup>o</sup>)/~</li></ul><h4 id="没有别的办法那就只能查看所有数据包慢慢寻找你要的数据包了"><a class="markdownIt-Anchor" href="#没有别的办法那就只能查看所有数据包慢慢寻找你要的数据包了"></a> 没有别的办法那就只能查看所有数据包，慢慢寻找你要的数据包了</h4><ul><li>找的过程也要慢慢积累，尽可能的搞清楚他的命名逻辑，对以后的找包速度会有明显提升</li></ul><h4 id="下面给出本次试验对象的签到数据包"><a class="markdownIt-Anchor" href="#下面给出本次试验对象的签到数据包"></a> 下面给出本次试验对象的签到数据包</h4><ul><li><img src="https://yml-img.ml:521/images/2022/04/12/-1.jpg" alt="image-20220411213118940" style="zoom: 33%;" /></li></ul><h3 id="使用测试工具进行测试"><a class="markdownIt-Anchor" href="#使用测试工具进行测试"></a> 使用测试工具进行测试</h3><blockquote><p>其实这里我不知道该叫什么名字，反正我就按照我自己的理解进行教程，有不对，不合适的地方，请指出</p></blockquote><h4 id="使用抓包工具自带的软件进行测试"><a class="markdownIt-Anchor" href="#使用抓包工具自带的软件进行测试"></a> 使用抓包工具自带的软件进行测试</h4><ul><li>很多抓包工具都带有数据包 <strong>重发</strong> 功能，例如：<ul><li>安卓：小黄鸟、小蓝鸟</li><li>ios：圈x自带重放   锤子配合 anubis 网球没用过</li><li>pc： fd自带重放   花瓶（charles）都可以直接进行重放</li></ul></li><li>一般当你不能确定是否是这条数据包时，重放总是一个不错的选择！</li></ul><h4 id="使用第三方的调试工具进行测试"><a class="markdownIt-Anchor" href="#使用第三方的调试工具进行测试"></a> 使用第三方的调试工具进行测试</h4><ul><li>我比较常用的有 <strong>postman</strong>  <strong>apipost</strong>等</li><li>这里主要是进行数据的重放与必要参数的测试</li></ul><h4 id="进行数据包参数测试"><a class="markdownIt-Anchor" href="#进行数据包参数测试"></a> 进行数据包参数测试</h4><ul><li>这一步主要是确定服务器会校验那些参数，那也就是我们写脚本必须要加强关注的参数</li><li>所谓的服务器校验，也就是你发送过去后 他会判断这个参数是否正常，不正常的话一般会返回一些错误码等等</li><li>也就是说，你要保证他检验的数据一定是正确的，你才有可能签到（别的什么操作）成功</li><li>得到最简的参数时，这一步可以算完成了</li></ul><h3 id="接下来就是最后一步了我们开始写脚本吧"><a class="markdownIt-Anchor" href="#接下来就是最后一步了我们开始写脚本吧"></a> 接下来就是最后一步了，我们开始写脚本吧</h3><blockquote><p>开始写脚本之前我先声明几句</p><ol><li>我的js是自学的，难免有错误的地方</li><li>很多地方都是大佬的开源脚本修改的，可能修改的四不像，但是我用着舒服就行了</li><li>脚本我写了很多注释 // 就是双引号后面的内容，希望可以帮你可以尽快的理解这一行的作用</li><li>有任何不懂得地方，直接百度、google查一下  很快就懂了</li><li>没了没了  开始</li></ol></blockquote><ul><li>首先，脚本地址：<a href="https://raw.githubusercontent.com/yml2213/template/master/jiaocheng.js">教程</a></li><li>如果遇到任何问题，请首尝试自己解决它，这样你的成长才会更快；实在解决不了的可以群里问</li><li>啰啰嗦嗦几千字了，第一版就先这样吧</li><li>下面给懒得同学吧脚本内容搬运下，省的跳过去看了！</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 教程 </span></span><br><span class="line"><span class="comment"> * 地址： https://raw.githubusercontent.com/yml2213/template/master/jiaocheng.js</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * 教程    这里是写脚本说明的地方</span></span><br><span class="line"><span class="comment"> * 本脚本仅用于学习使用请勿直接运行</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * ========= 青龙 =========</span></span><br><span class="line"><span class="comment"> * 变量格式：export jiaocheng_data=&#x27; xxxx &amp; xxx @  xxxx &amp; xxx &#x27;  多个账号用 @分割 </span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> jsname = <span class="string">&quot;教程&quot;</span>;</span><br><span class="line"><span class="keyword">const</span> $ = Env(jsname);</span><br><span class="line"><span class="keyword">const</span> notify = $.isNode() ? <span class="built_in">require</span>(<span class="string">&#x27;./sendNotify&#x27;</span>) : <span class="string">&#x27;&#x27;</span>;      <span class="comment">// 这里是 node（青龙属于node环境）通知相关的</span></span><br><span class="line"><span class="keyword">const</span> Notify = <span class="number">1</span>; <span class="comment">//0为关闭通知，1为打开通知,默认为1</span></span><br><span class="line"><span class="keyword">const</span> debug = <span class="number">1</span>; <span class="comment">//0为关闭调试，1为打开调试,默认为0</span></span><br><span class="line"><span class="comment">//////////////////////</span></span><br><span class="line"><span class="keyword">let</span> jiaocheng_data = process.env.jiaocheng_data;               <span class="comment">// 这里是 从青龙的 配置文件 读取你写的变量</span></span><br><span class="line"><span class="keyword">let</span> jiaocheng_dataArr = [];</span><br><span class="line"><span class="keyword">let</span> data = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line"><span class="keyword">let</span> msg = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">!(<span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (!(<span class="keyword">await</span> Envs()))  <span class="comment">//多账号分割 判断变量是否为空  初步处理多账号</span></span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">`本地脚本4-11 )`</span>);       <span class="comment">// console.log是输出信息的，可以在脚本日志中看到输出（打印）的信息</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">`\n\n=========================================    \n脚本执行 - 北京时间(UTC+8)：<span class="subst">$&#123;<span class="keyword">new</span> <span class="built_in">Date</span>(</span></span></span><br><span class="line"><span class="subst"><span class="string"><span class="keyword">new</span> <span class="built_in">Date</span>().getTime() + <span class="keyword">new</span> <span class="built_in">Date</span>().getTimezoneOffset() * <span class="number">60</span> * <span class="number">1000</span> +</span></span></span><br><span class="line"><span class="subst"><span class="string"><span class="number">8</span> * <span class="number">60</span> * <span class="number">60</span> * <span class="number">1000</span>).toLocaleString()&#125;</span> \n=========================================\n`</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">await</span> wyy();</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">`\n=================== 共找到 <span class="subst">$&#123;jiaocheng_dataArr.length&#125;</span> 个账号 ===================`</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (debug) &#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">`【debug】 这是你的全部账号数组:\n <span class="subst">$&#123;jiaocheng_dataArr&#125;</span>`</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> index = <span class="number">0</span>; index &lt; jiaocheng_dataArr.length; index++) &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> num = index + <span class="number">1</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">`\n========= 开始【第 <span class="subst">$&#123;num&#125;</span> 个账号】=========\n`</span>)</span><br><span class="line"></span><br><span class="line">data = jiaocheng_dataArr[index].split(<span class="string">&#x27;&amp;&#x27;</span>);      <span class="comment">// 这里是分割你每个账号的每个小项   </span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (debug) &#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">`\n 【debug】 这是你第 <span class="subst">$&#123;num&#125;</span> 账号信息:\n <span class="subst">$&#123;data&#125;</span>\n`</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 这里是开始做任务    需要注意的点</span></span><br><span class="line"><span class="comment">// 1. await只能运行与async函数中</span></span><br><span class="line"><span class="comment">// 2. 函数的名字不可以相同</span></span><br><span class="line"><span class="comment">//      3. 不够可以自己复制</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;开始 xx&#x27;</span>);</span><br><span class="line"><span class="keyword">await</span> signin();</span><br><span class="line"><span class="keyword">await</span> $.wait(<span class="number">2</span> * <span class="number">1000</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 这里是开始做任务   </span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;开始 yy&#x27;</span>);</span><br><span class="line"><span class="keyword">await</span> yyyy();</span><br><span class="line"><span class="keyword">await</span> $.wait(<span class="number">2</span> * <span class="number">1000</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 这里是开始做任务   </span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;开始 zz&#x27;</span>);</span><br><span class="line"><span class="keyword">await</span> zzzzz();</span><br><span class="line"><span class="keyword">await</span> $.wait(<span class="number">2</span> * <span class="number">1000</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">await</span> SendMsg(msg);    <span class="comment">// 与发送通知有关系</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;)()</span><br><span class="line">.catch(<span class="function">(<span class="params">e</span>) =&gt;</span> <span class="built_in">console</span>.logErr(e))</span><br><span class="line">.finally(<span class="function">() =&gt;</span> $.done())</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 签到  骁友会</span></span><br><span class="line"><span class="comment"> * 下面我们来看看函数需要注意的东西吧</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">signin</span>(<span class="params">timeout = <span class="number">3</span> * <span class="number">1000</span></span>) </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve</span>) =&gt;</span> &#123;</span><br><span class="line"><span class="keyword">let</span> url = &#123;</span><br><span class="line"><span class="attr">url</span>: <span class="string">`https://qualcomm.growthideadata.com/qualcomm-app/api/user/signIn?userId=<span class="subst">$&#123;data[<span class="number">1</span>]&#125;</span>`</span>,    <span class="comment">// 这是请求的 url 可以直接用我们抓包、精简后的URL</span></span><br><span class="line"><span class="attr">headers</span>: &#123;            <span class="comment">// headers 是请求体  可以直接用精简后的 hd  也就是服务器校验的部分，他需要啥，我们就给他啥  </span></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;userId&quot;</span>: data[<span class="number">1</span>],</span><br><span class="line"><span class="string">&quot;Content-Type&quot;</span>: <span class="string">&quot;application/x-www-form-urlencoded;charset=UTF-8&quot;</span>,</span><br><span class="line"><span class="string">&quot;Host&quot;</span>: <span class="string">&quot;qualcomm.growthideadata.com&quot;</span>,</span><br><span class="line"><span class="string">&quot;User-Agent&quot;</span>: UA,</span><br><span class="line"><span class="string">&quot;sessionKey&quot;</span>: data[<span class="number">0</span>],</span><br><span class="line"><span class="string">&quot;Referer&quot;</span>: <span class="string">&quot;https://servicewechat.com/wx026c06df6adc5d06/176/page-frame.html&quot;</span>,</span><br><span class="line"><span class="string">&quot;Connection&quot;</span>: <span class="string">&quot;keep-alive&quot;</span></span><br><span class="line">&#125;,</span><br><span class="line"><span class="comment">// body: &#x27;&#x27;,       // 这是一个 get 请求，没有请求体 body   如果是 post 不要忘记他鸭！</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (debug) &#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">`\n【debug】=============== 这是 签到 请求 url ===============`</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">JSON</span>.stringify(url));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$.get(url, <span class="keyword">async</span> (error, response, data) =&gt; &#123;     <span class="comment">// 这是一个 get 请求 , 如果是 post  记得把这里改了 </span></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="keyword">if</span> (debug) &#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">`\n\n【debug】===============这是 签到 返回data==============`</span>);</span><br><span class="line"><span class="built_in">console</span>.log(data)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> result = <span class="built_in">JSON</span>.parse(data);</span><br><span class="line"><span class="keyword">if</span> (result.code == <span class="number">200</span>) &#123;        <span class="comment">// 这里是根据服务器返回的数据做判断  方便我们知道任务是否完成了</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">`【签到】<span class="subst">$&#123;result.message&#125;</span> 🎉 `</span>)</span><br><span class="line">msg += <span class="string">`\n【签到】<span class="subst">$&#123;result.message&#125;</span> 🎉`</span></span><br><span class="line"></span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (result.code === <span class="number">1</span>) &#123;    <span class="comment">// 这里是根据服务器返回的数据做判断  方便我们知道任务是否完成了</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">`\n【签到】 失败 ,可能是:<span class="subst">$&#123;result.message&#125;</span>!\n `</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (result.code === <span class="number">40001</span>) &#123;   <span class="comment">// 这里是根据服务器返回的数据做判断  方便我们知道任务是否完成了</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">`\n【签到】 失败 ,可能是:<span class="subst">$&#123;result.message&#125;</span>!\n `</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;    <span class="comment">// 这里是根据服务器返回的数据做判断  方便我们知道任务是否完成了</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">`\n【签到】 失败 ❌ 了呢,可能是网络被外星人抓走了!\n `</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line"><span class="built_in">console</span>.log(e)</span><br><span class="line">&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">resolve();</span><br><span class="line">&#125;</span><br><span class="line">&#125;, timeout)</span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 如果有更多的需求，直接复制上一个函数，改个名   然后稍微更改一下内容   就可以用了   </span></span><br><span class="line"><span class="comment">// 不要忘记与上面的 函数调用对应起来鸭</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//#region 固定代码 可以不管他</span></span><br><span class="line"><span class="comment">// ============================================变量检查============================================ \\</span></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">Envs</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (jiaocheng_data) &#123;</span><br><span class="line"><span class="keyword">if</span> (jiaocheng_data.indexOf(<span class="string">&quot;@&quot;</span>) != -<span class="number">1</span>) &#123;</span><br><span class="line">jiaocheng_data.split(<span class="string">&quot;@&quot;</span>).forEach(<span class="function">(<span class="params">item</span>) =&gt;</span> &#123;</span><br><span class="line">jiaocheng_dataArr.push(item);</span><br><span class="line">&#125;);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">jiaocheng_dataArr.push(jiaocheng_data);</span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">`\n 【<span class="subst">$&#123;$.name&#125;</span>】：未填写变量 jiaocheng_data`</span>)</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ============================================发送消息============================================ \\</span></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">SendMsg</span>(<span class="params">message</span>) </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (!message)</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (Notify &gt; <span class="number">0</span>) &#123;</span><br><span class="line"><span class="keyword">if</span> ($.isNode()) &#123;</span><br><span class="line"><span class="keyword">var</span> notify = <span class="built_in">require</span>(<span class="string">&#x27;./sendNotify&#x27;</span>);</span><br><span class="line"><span class="keyword">await</span> notify.sendNotify($.name, message);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">$.msg(message);</span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="built_in">console</span>.log(message);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 随机数生成</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">randomString</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">e = e || <span class="number">32</span>;</span><br><span class="line"><span class="keyword">var</span> t = <span class="string">&quot;QWERTYUIOPASDFGHJKLZXCVBNM1234567890&quot;</span>,</span><br><span class="line">a = t.length,</span><br><span class="line">n = <span class="string">&quot;&quot;</span>;</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; e; i++)</span><br><span class="line">n += t.charAt(<span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.random() * a));</span><br><span class="line"><span class="keyword">return</span> n</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 随机整数生成</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">randomInt</span>(<span class="params">min, max</span>) </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">Math</span>.round(<span class="built_in">Math</span>.random() * (max - min) + min)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//每日网抑云</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">wyy</span>(<span class="params">timeout = <span class="number">3</span> * <span class="number">1000</span></span>) </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve</span>) =&gt;</span> &#123;</span><br><span class="line"><span class="keyword">let</span> url = &#123;</span><br><span class="line"><span class="attr">url</span>: <span class="string">`https://keai.icu/apiwyy/api`</span></span><br><span class="line">&#125;</span><br><span class="line">$.get(url, <span class="keyword">async</span> (err, resp, data) =&gt; &#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">data = <span class="built_in">JSON</span>.parse(data)</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">`\n 【网抑云时间】: <span class="subst">$&#123;data.content&#125;</span>  by--<span class="subst">$&#123;data.music&#125;</span>`</span>);</span><br><span class="line"></span><br><span class="line">&#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line"><span class="built_in">console</span>.logErr(e, resp);</span><br><span class="line">&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">resolve()</span><br><span class="line">&#125;</span><br><span class="line">&#125;, timeout)</span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//#endregion</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// prettier-ignore   固定代码  不用管他</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Env</span>(<span class="params">t, e</span>) </span>&#123; <span class="string">&quot;undefined&quot;</span> != <span class="keyword">typeof</span> process &amp;&amp; <span class="built_in">JSON</span>.stringify(process.env).indexOf(<span class="string">&quot;GITHUB&quot;</span>) &gt; -<span class="number">1</span> &amp;&amp; process.exit(<span class="number">0</span>); <span class="class"><span class="keyword">class</span> <span class="title">s</span> </span>&#123; <span class="function"><span class="title">constructor</span>(<span class="params">t</span>)</span> &#123; <span class="built_in">this</span>.env = t &#125; <span class="function"><span class="title">send</span>(<span class="params">t, e = <span class="string">&quot;GET&quot;</span></span>)</span> &#123; t = <span class="string">&quot;string&quot;</span> == <span class="keyword">typeof</span> t ? &#123; <span class="attr">url</span>: t &#125; : t; <span class="keyword">let</span> s = <span class="built_in">this</span>.get; <span class="keyword">return</span> <span class="string">&quot;POST&quot;</span> === e &amp;&amp; (s = <span class="built_in">this</span>.post), <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">e, i</span>) =&gt;</span> &#123; s.call(<span class="built_in">this</span>, t, <span class="function">(<span class="params">t, s, r</span>) =&gt;</span> &#123; t ? i(t) : e(s) &#125;) &#125;) &#125; <span class="function"><span class="title">get</span>(<span class="params">t</span>)</span> &#123; <span class="keyword">return</span> <span class="built_in">this</span>.send.call(<span class="built_in">this</span>.env, t) &#125; <span class="function"><span class="title">post</span>(<span class="params">t</span>)</span> &#123; <span class="keyword">return</span> <span class="built_in">this</span>.send.call(<span class="built_in">this</span>.env, t, <span class="string">&quot;POST&quot;</span>) &#125; &#125; <span class="keyword">return</span> <span class="keyword">new</span> <span class="class"><span class="keyword">class</span> </span>&#123; <span class="function"><span class="title">constructor</span>(<span class="params">t, e</span>)</span> &#123; <span class="built_in">this</span>.name = t, <span class="built_in">this</span>.http = <span class="keyword">new</span> s(<span class="built_in">this</span>), <span class="built_in">this</span>.data = <span class="literal">null</span>, <span class="built_in">this</span>.dataFile = <span class="string">&quot;box.dat&quot;</span>, <span class="built_in">this</span>.logs = [], <span class="built_in">this</span>.isMute = !<span class="number">1</span>, <span class="built_in">this</span>.isNeedRewrite = !<span class="number">1</span>, <span class="built_in">this</span>.logSeparator = <span class="string">&quot;\n&quot;</span>, <span class="built_in">this</span>.startTime = (<span class="keyword">new</span> <span class="built_in">Date</span>).getTime(), <span class="built_in">Object</span>.assign(<span class="built_in">this</span>, e), <span class="built_in">this</span>.log(<span class="string">&quot;&quot;</span>, <span class="string">`🔔<span class="subst">$&#123;<span class="built_in">this</span>.name&#125;</span>, 开始!`</span>) &#125; <span class="function"><span class="title">isNode</span>(<span class="params"></span>)</span> &#123; <span class="keyword">return</span> <span class="string">&quot;undefined&quot;</span> != <span class="keyword">typeof</span> <span class="built_in">module</span> &amp;&amp; !!<span class="built_in">module</span>.exports &#125; <span class="function"><span class="title">isQuanX</span>(<span class="params"></span>)</span> &#123; <span class="keyword">return</span> <span class="string">&quot;undefined&quot;</span> != <span class="keyword">typeof</span> $task &#125; <span class="function"><span class="title">isSurge</span>(<span class="params"></span>)</span> &#123; <span class="keyword">return</span> <span class="string">&quot;undefined&quot;</span> != <span class="keyword">typeof</span> $httpClient &amp;&amp; <span class="string">&quot;undefined&quot;</span> == <span class="keyword">typeof</span> $loon &#125; <span class="function"><span class="title">isLoon</span>(<span class="params"></span>)</span> &#123; <span class="keyword">return</span> <span class="string">&quot;undefined&quot;</span> != <span class="keyword">typeof</span> $loon &#125; <span class="function"><span class="title">toObj</span>(<span class="params">t, e = <span class="literal">null</span></span>)</span> &#123; <span class="keyword">try</span> &#123; <span class="keyword">return</span> <span class="built_in">JSON</span>.parse(t) &#125; <span class="keyword">catch</span> &#123; <span class="keyword">return</span> e &#125; &#125; <span class="function"><span class="title">toStr</span>(<span class="params">t, e = <span class="literal">null</span></span>)</span> &#123; <span class="keyword">try</span> &#123; <span class="keyword">return</span> <span class="built_in">JSON</span>.stringify(t) &#125; <span class="keyword">catch</span> &#123; <span class="keyword">return</span> e &#125; &#125; <span class="function"><span class="title">getjson</span>(<span class="params">t, e</span>)</span> &#123; <span class="keyword">let</span> s = e; <span class="keyword">const</span> i = <span class="built_in">this</span>.getdata(t); <span class="keyword">if</span> (i) <span class="keyword">try</span> &#123; s = <span class="built_in">JSON</span>.parse(<span class="built_in">this</span>.getdata(t)) &#125; <span class="keyword">catch</span> &#123; &#125; <span class="keyword">return</span> s &#125; <span class="function"><span class="title">setjson</span>(<span class="params">t, e</span>)</span> &#123; <span class="keyword">try</span> &#123; <span class="keyword">return</span> <span class="built_in">this</span>.setdata(<span class="built_in">JSON</span>.stringify(t), e) &#125; <span class="keyword">catch</span> &#123; <span class="keyword">return</span> !<span class="number">1</span> &#125; &#125; <span class="function"><span class="title">getScript</span>(<span class="params">t</span>)</span> &#123; <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="params">e</span> =&gt;</span> &#123; <span class="built_in">this</span>.get(&#123; <span class="attr">url</span>: t &#125;, <span class="function">(<span class="params">t, s, i</span>) =&gt;</span> e(i)) &#125;) &#125; <span class="function"><span class="title">runScript</span>(<span class="params">t, e</span>)</span> &#123; <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="params">s</span> =&gt;</span> &#123; <span class="keyword">let</span> i = <span class="built_in">this</span>.getdata(<span class="string">&quot;@chavy_boxjs_userCfgs.httpapi&quot;</span>); i = i ? i.replace(<span class="regexp">/\n/g</span>, <span class="string">&quot;&quot;</span>).trim() : i; <span class="keyword">let</span> r = <span class="built_in">this</span>.getdata(<span class="string">&quot;@chavy_boxjs_userCfgs.httpapi_timeout&quot;</span>); r = r ? <span class="number">1</span> * r : <span class="number">20</span>, r = e &amp;&amp; e.timeout ? e.timeout : r; <span class="keyword">const</span> [o, h] = i.split(<span class="string">&quot;@&quot;</span>), n = &#123; <span class="attr">url</span>: <span class="string">`http://<span class="subst">$&#123;h&#125;</span>/v1/scripting/evaluate`</span>, <span class="attr">body</span>: &#123; <span class="attr">script_text</span>: t, <span class="attr">mock_type</span>: <span class="string">&quot;cron&quot;</span>, <span class="attr">timeout</span>: r &#125;, <span class="attr">headers</span>: &#123; <span class="string">&quot;X-Key&quot;</span>: o, <span class="attr">Accept</span>: <span class="string">&quot;*/*&quot;</span> &#125; &#125;; <span class="built_in">this</span>.post(n, <span class="function">(<span class="params">t, e, i</span>) =&gt;</span> s(i)) &#125;).catch(<span class="function"><span class="params">t</span> =&gt;</span> <span class="built_in">this</span>.logErr(t)) &#125; <span class="function"><span class="title">loaddata</span>(<span class="params"></span>)</span> &#123; <span class="keyword">if</span> (!<span class="built_in">this</span>.isNode()) <span class="keyword">return</span> &#123;&#125;; &#123; <span class="built_in">this</span>.fs = <span class="built_in">this</span>.fs ? <span class="built_in">this</span>.fs : <span class="built_in">require</span>(<span class="string">&quot;fs&quot;</span>), <span class="built_in">this</span>.path = <span class="built_in">this</span>.path ? <span class="built_in">this</span>.path : <span class="built_in">require</span>(<span class="string">&quot;path&quot;</span>); <span class="keyword">const</span> t = <span class="built_in">this</span>.path.resolve(<span class="built_in">this</span>.dataFile), e = <span class="built_in">this</span>.path.resolve(process.cwd(), <span class="built_in">this</span>.dataFile), s = <span class="built_in">this</span>.fs.existsSync(t), i = !s &amp;&amp; <span class="built_in">this</span>.fs.existsSync(e); <span class="keyword">if</span> (!s &amp;&amp; !i) <span class="keyword">return</span> &#123;&#125;; &#123; <span class="keyword">const</span> i = s ? t : e; <span class="keyword">try</span> &#123; <span class="keyword">return</span> <span class="built_in">JSON</span>.parse(<span class="built_in">this</span>.fs.readFileSync(i)) &#125; <span class="keyword">catch</span> (t) &#123; <span class="keyword">return</span> &#123;&#125; &#125; &#125; &#125; &#125; <span class="function"><span class="title">writedata</span>(<span class="params"></span>)</span> &#123; <span class="keyword">if</span> (<span class="built_in">this</span>.isNode()) &#123; <span class="built_in">this</span>.fs = <span class="built_in">this</span>.fs ? <span class="built_in">this</span>.fs : <span class="built_in">require</span>(<span class="string">&quot;fs&quot;</span>), <span class="built_in">this</span>.path = <span class="built_in">this</span>.path ? <span class="built_in">this</span>.path : <span class="built_in">require</span>(<span class="string">&quot;path&quot;</span>); <span class="keyword">const</span> t = <span class="built_in">this</span>.path.resolve(<span class="built_in">this</span>.dataFile), e = <span class="built_in">this</span>.path.resolve(process.cwd(), <span class="built_in">this</span>.dataFile), s = <span class="built_in">this</span>.fs.existsSync(t), i = !s &amp;&amp; <span class="built_in">this</span>.fs.existsSync(e), r = <span class="built_in">JSON</span>.stringify(<span class="built_in">this</span>.data); s ? <span class="built_in">this</span>.fs.writeFileSync(t, r) : i ? <span class="built_in">this</span>.fs.writeFileSync(e, r) : <span class="built_in">this</span>.fs.writeFileSync(t, r) &#125; &#125; <span class="function"><span class="title">lodash_get</span>(<span class="params">t, e, s</span>)</span> &#123; <span class="keyword">const</span> i = e.replace(<span class="regexp">/\[(\d+)\]/g</span>, <span class="string">&quot;.$1&quot;</span>).split(<span class="string">&quot;.&quot;</span>); <span class="keyword">let</span> r = t; <span class="keyword">for</span> (<span class="keyword">const</span> t <span class="keyword">of</span> i) <span class="keyword">if</span> (r = <span class="built_in">Object</span>(r)[t], <span class="keyword">void</span> <span class="number">0</span> === r) <span class="keyword">return</span> s; <span class="keyword">return</span> r &#125; <span class="function"><span class="title">lodash_set</span>(<span class="params">t, e, s</span>)</span> &#123; <span class="keyword">return</span> <span class="built_in">Object</span>(t) !== t ? t : (<span class="built_in">Array</span>.isArray(e) || (e = e.toString().match(<span class="regexp">/[^.[\]]+/g</span>) || []), e.slice(<span class="number">0</span>, -<span class="number">1</span>).reduce(<span class="function">(<span class="params">t, s, i</span>) =&gt;</span> <span class="built_in">Object</span>(t[s]) === t[s] ? t[s] : t[s] = <span class="built_in">Math</span>.abs(e[i + <span class="number">1</span>]) &gt;&gt; <span class="number">0</span> == +e[i + <span class="number">1</span>] ? [] : &#123;&#125;, t)[e[e.length - <span class="number">1</span>]] = s, t) &#125; <span class="function"><span class="title">getdata</span>(<span class="params">t</span>)</span> &#123; <span class="keyword">let</span> e = <span class="built_in">this</span>.getval(t); <span class="keyword">if</span> (<span class="regexp">/^@/</span>.test(t)) &#123; <span class="keyword">const</span> [, s, i] = <span class="regexp">/^@(.*?)\.(.*?)$/</span>.exec(t), r = s ? <span class="built_in">this</span>.getval(s) : <span class="string">&quot;&quot;</span>; <span class="keyword">if</span> (r) <span class="keyword">try</span> &#123; <span class="keyword">const</span> t = <span class="built_in">JSON</span>.parse(r); e = t ? <span class="built_in">this</span>.lodash_get(t, i, <span class="string">&quot;&quot;</span>) : e &#125; <span class="keyword">catch</span> (t) &#123; e = <span class="string">&quot;&quot;</span> &#125; &#125; <span class="keyword">return</span> e &#125; <span class="function"><span class="title">setdata</span>(<span class="params">t, e</span>)</span> &#123; <span class="keyword">let</span> s = !<span class="number">1</span>; <span class="keyword">if</span> (<span class="regexp">/^@/</span>.test(e)) &#123; <span class="keyword">const</span> [, i, r] = <span class="regexp">/^@(.*?)\.(.*?)$/</span>.exec(e), o = <span class="built_in">this</span>.getval(i), h = i ? <span class="string">&quot;null&quot;</span> === o ? <span class="literal">null</span> : o || <span class="string">&quot;&#123;&#125;&quot;</span> : <span class="string">&quot;&#123;&#125;&quot;</span>; <span class="keyword">try</span> &#123; <span class="keyword">const</span> e = <span class="built_in">JSON</span>.parse(h); <span class="built_in">this</span>.lodash_set(e, r, t), s = <span class="built_in">this</span>.setval(<span class="built_in">JSON</span>.stringify(e), i) &#125; <span class="keyword">catch</span> (e) &#123; <span class="keyword">const</span> o = &#123;&#125;; <span class="built_in">this</span>.lodash_set(o, r, t), s = <span class="built_in">this</span>.setval(<span class="built_in">JSON</span>.stringify(o), i) &#125; &#125; <span class="keyword">else</span> s = <span class="built_in">this</span>.setval(t, e); <span class="keyword">return</span> s &#125; <span class="function"><span class="title">getval</span>(<span class="params">t</span>)</span> &#123; <span class="keyword">return</span> <span class="built_in">this</span>.isSurge() || <span class="built_in">this</span>.isLoon() ? $persistentStore.read(t) : <span class="built_in">this</span>.isQuanX() ? $prefs.valueForKey(t) : <span class="built_in">this</span>.isNode() ? (<span class="built_in">this</span>.data = <span class="built_in">this</span>.loaddata(), <span class="built_in">this</span>.data[t]) : <span class="built_in">this</span>.data &amp;&amp; <span class="built_in">this</span>.data[t] || <span class="literal">null</span> &#125; <span class="function"><span class="title">setval</span>(<span class="params">t, e</span>)</span> &#123; <span class="keyword">return</span> <span class="built_in">this</span>.isSurge() || <span class="built_in">this</span>.isLoon() ? $persistentStore.write(t, e) : <span class="built_in">this</span>.isQuanX() ? $prefs.setValueForKey(t, e) : <span class="built_in">this</span>.isNode() ? (<span class="built_in">this</span>.data = <span class="built_in">this</span>.loaddata(), <span class="built_in">this</span>.data[e] = t, <span class="built_in">this</span>.writedata(), !<span class="number">0</span>) : <span class="built_in">this</span>.data &amp;&amp; <span class="built_in">this</span>.data[e] || <span class="literal">null</span> &#125; <span class="function"><span class="title">initGotEnv</span>(<span class="params">t</span>)</span> &#123; <span class="built_in">this</span>.got = <span class="built_in">this</span>.got ? <span class="built_in">this</span>.got : <span class="built_in">require</span>(<span class="string">&quot;got&quot;</span>), <span class="built_in">this</span>.cktough = <span class="built_in">this</span>.cktough ? <span class="built_in">this</span>.cktough : <span class="built_in">require</span>(<span class="string">&quot;tough-cookie&quot;</span>), <span class="built_in">this</span>.ckjar = <span class="built_in">this</span>.ckjar ? <span class="built_in">this</span>.ckjar : <span class="keyword">new</span> <span class="built_in">this</span>.cktough.CookieJar, t &amp;&amp; (t.headers = t.headers ? t.headers : &#123;&#125;, <span class="keyword">void</span> <span class="number">0</span> === t.headers.Cookie &amp;&amp; <span class="keyword">void</span> <span class="number">0</span> === t.cookieJar &amp;&amp; (t.cookieJar = <span class="built_in">this</span>.ckjar)) &#125; <span class="function"><span class="title">get</span>(<span class="params">t, e = (() =&gt; &#123; &#125;)</span>)</span> &#123; t.headers &amp;&amp; (<span class="keyword">delete</span> t.headers[<span class="string">&quot;Content-Type&quot;</span>], <span class="keyword">delete</span> t.headers[<span class="string">&quot;Content-Length&quot;</span>]), <span class="built_in">this</span>.isSurge() || <span class="built_in">this</span>.isLoon() ? (<span class="built_in">this</span>.isSurge() &amp;&amp; <span class="built_in">this</span>.isNeedRewrite &amp;&amp; (t.headers = t.headers || &#123;&#125;, <span class="built_in">Object</span>.assign(t.headers, &#123; <span class="string">&quot;X-Surge-Skip-Scripting&quot;</span>: !<span class="number">1</span> &#125;)), $httpClient.get(t, <span class="function">(<span class="params">t, s, i</span>) =&gt;</span> &#123; !t &amp;&amp; s &amp;&amp; (s.body = i, s.statusCode = s.status), e(t, s, i) &#125;)) : <span class="built_in">this</span>.isQuanX() ? (<span class="built_in">this</span>.isNeedRewrite &amp;&amp; (t.opts = t.opts || &#123;&#125;, <span class="built_in">Object</span>.assign(t.opts, &#123; <span class="attr">hints</span>: !<span class="number">1</span> &#125;)), $task.fetch(t).then(<span class="function"><span class="params">t</span> =&gt;</span> &#123; <span class="keyword">const</span> &#123; <span class="attr">statusCode</span>: s, <span class="attr">statusCode</span>: i, <span class="attr">headers</span>: r, <span class="attr">body</span>: o &#125; = t; e(<span class="literal">null</span>, &#123; <span class="attr">status</span>: s, <span class="attr">statusCode</span>: i, <span class="attr">headers</span>: r, <span class="attr">body</span>: o &#125;, o) &#125;, <span class="function"><span class="params">t</span> =&gt;</span> e(t))) : <span class="built_in">this</span>.isNode() &amp;&amp; (<span class="built_in">this</span>.initGotEnv(t), <span class="built_in">this</span>.got(t).on(<span class="string">&quot;redirect&quot;</span>, <span class="function">(<span class="params">t, e</span>) =&gt;</span> &#123; <span class="keyword">try</span> &#123; <span class="keyword">if</span> (t.headers[<span class="string">&quot;set-cookie&quot;</span>]) &#123; <span class="keyword">const</span> s = t.headers[<span class="string">&quot;set-cookie&quot;</span>].map(<span class="built_in">this</span>.cktough.Cookie.parse).toString(); s &amp;&amp; <span class="built_in">this</span>.ckjar.setCookieSync(s, <span class="literal">null</span>), e.cookieJar = <span class="built_in">this</span>.ckjar &#125; &#125; <span class="keyword">catch</span> (t) &#123; <span class="built_in">this</span>.logErr(t) &#125; &#125;).then(<span class="function"><span class="params">t</span> =&gt;</span> &#123; <span class="keyword">const</span> &#123; <span class="attr">statusCode</span>: s, <span class="attr">statusCode</span>: i, <span class="attr">headers</span>: r, <span class="attr">body</span>: o &#125; = t; e(<span class="literal">null</span>, &#123; <span class="attr">status</span>: s, <span class="attr">statusCode</span>: i, <span class="attr">headers</span>: r, <span class="attr">body</span>: o &#125;, o) &#125;, <span class="function"><span class="params">t</span> =&gt;</span> &#123; <span class="keyword">const</span> &#123; <span class="attr">message</span>: s, <span class="attr">response</span>: i &#125; = t; e(s, i, i &amp;&amp; i.body) &#125;)) &#125; <span class="function"><span class="title">post</span>(<span class="params">t, e = (() =&gt; &#123; &#125;)</span>)</span> &#123; <span class="keyword">if</span> (t.body &amp;&amp; t.headers &amp;&amp; !t.headers[<span class="string">&quot;Content-Type&quot;</span>] &amp;&amp; (t.headers[<span class="string">&quot;Content-Type&quot;</span>] = <span class="string">&quot;application/x-www-form-urlencoded&quot;</span>), t.headers &amp;&amp; <span class="keyword">delete</span> t.headers[<span class="string">&quot;Content-Length&quot;</span>], <span class="built_in">this</span>.isSurge() || <span class="built_in">this</span>.isLoon()) <span class="built_in">this</span>.isSurge() &amp;&amp; <span class="built_in">this</span>.isNeedRewrite &amp;&amp; (t.headers = t.headers || &#123;&#125;, <span class="built_in">Object</span>.assign(t.headers, &#123; <span class="string">&quot;X-Surge-Skip-Scripting&quot;</span>: !<span class="number">1</span> &#125;)), $httpClient.post(t, <span class="function">(<span class="params">t, s, i</span>) =&gt;</span> &#123; !t &amp;&amp; s &amp;&amp; (s.body = i, s.statusCode = s.status), e(t, s, i) &#125;); <span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">this</span>.isQuanX()) t.method = <span class="string">&quot;POST&quot;</span>, <span class="built_in">this</span>.isNeedRewrite &amp;&amp; (t.opts = t.opts || &#123;&#125;, <span class="built_in">Object</span>.assign(t.opts, &#123; <span class="attr">hints</span>: !<span class="number">1</span> &#125;)), $task.fetch(t).then(<span class="function"><span class="params">t</span> =&gt;</span> &#123; <span class="keyword">const</span> &#123; <span class="attr">statusCode</span>: s, <span class="attr">statusCode</span>: i, <span class="attr">headers</span>: r, <span class="attr">body</span>: o &#125; = t; e(<span class="literal">null</span>, &#123; <span class="attr">status</span>: s, <span class="attr">statusCode</span>: i, <span class="attr">headers</span>: r, <span class="attr">body</span>: o &#125;, o) &#125;, <span class="function"><span class="params">t</span> =&gt;</span> e(t)); <span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">this</span>.isNode()) &#123; <span class="built_in">this</span>.initGotEnv(t); <span class="keyword">const</span> &#123; <span class="attr">url</span>: s, ...i &#125; = t; <span class="built_in">this</span>.got.post(s, i).then(<span class="function"><span class="params">t</span> =&gt;</span> &#123; <span class="keyword">const</span> &#123; <span class="attr">statusCode</span>: s, <span class="attr">statusCode</span>: i, <span class="attr">headers</span>: r, <span class="attr">body</span>: o &#125; = t; e(<span class="literal">null</span>, &#123; <span class="attr">status</span>: s, <span class="attr">statusCode</span>: i, <span class="attr">headers</span>: r, <span class="attr">body</span>: o &#125;, o) &#125;, <span class="function"><span class="params">t</span> =&gt;</span> &#123; <span class="keyword">const</span> &#123; <span class="attr">message</span>: s, <span class="attr">response</span>: i &#125; = t; e(s, i, i &amp;&amp; i.body) &#125;) &#125; &#125; <span class="function"><span class="title">time</span>(<span class="params">t, e = <span class="literal">null</span></span>)</span> &#123; <span class="keyword">const</span> s = e ? <span class="keyword">new</span> <span class="built_in">Date</span>(e) : <span class="keyword">new</span> <span class="built_in">Date</span>; <span class="keyword">let</span> i = &#123; <span class="string">&quot;M+&quot;</span>: s.getMonth() + <span class="number">1</span>, <span class="string">&quot;d+&quot;</span>: s.getDate(), <span class="string">&quot;H+&quot;</span>: s.getHours(), <span class="string">&quot;m+&quot;</span>: s.getMinutes(), <span class="string">&quot;s+&quot;</span>: s.getSeconds(), <span class="string">&quot;q+&quot;</span>: <span class="built_in">Math</span>.floor((s.getMonth() + <span class="number">3</span>) / <span class="number">3</span>), <span class="attr">S</span>: s.getMilliseconds() &#125;; <span class="regexp">/(y+)/</span>.test(t) &amp;&amp; (t = t.replace(<span class="built_in">RegExp</span>.$1, (s.getFullYear() + <span class="string">&quot;&quot;</span>).substr(<span class="number">4</span> - <span class="built_in">RegExp</span>.$1.length))); <span class="keyword">for</span> (<span class="keyword">let</span> e <span class="keyword">in</span> i) <span class="keyword">new</span> <span class="built_in">RegExp</span>(<span class="string">&quot;(&quot;</span> + e + <span class="string">&quot;)&quot;</span>).test(t) &amp;&amp; (t = t.replace(<span class="built_in">RegExp</span>.$1, <span class="number">1</span> == <span class="built_in">RegExp</span>.$1.length ? i[e] : (<span class="string">&quot;00&quot;</span> + i[e]).substr((<span class="string">&quot;&quot;</span> + i[e]).length))); <span class="keyword">return</span> t &#125; <span class="function"><span class="title">msg</span>(<span class="params">e = t, s = <span class="string">&quot;&quot;</span>, i = <span class="string">&quot;&quot;</span>, r</span>)</span> &#123; <span class="keyword">const</span> o = <span class="function"><span class="params">t</span> =&gt;</span> &#123; <span class="keyword">if</span> (!t) <span class="keyword">return</span> t; <span class="keyword">if</span> (<span class="string">&quot;string&quot;</span> == <span class="keyword">typeof</span> t) <span class="keyword">return</span> <span class="built_in">this</span>.isLoon() ? t : <span class="built_in">this</span>.isQuanX() ? &#123; <span class="string">&quot;open-url&quot;</span>: t &#125; : <span class="built_in">this</span>.isSurge() ? &#123; <span class="attr">url</span>: t &#125; : <span class="keyword">void</span> <span class="number">0</span>; <span class="keyword">if</span> (<span class="string">&quot;object&quot;</span> == <span class="keyword">typeof</span> t) &#123; <span class="keyword">if</span> (<span class="built_in">this</span>.isLoon()) &#123; <span class="keyword">let</span> e = t.openUrl || t.url || t[<span class="string">&quot;open-url&quot;</span>], s = t.mediaUrl || t[<span class="string">&quot;media-url&quot;</span>]; <span class="keyword">return</span> &#123; <span class="attr">openUrl</span>: e, <span class="attr">mediaUrl</span>: s &#125; &#125; <span class="keyword">if</span> (<span class="built_in">this</span>.isQuanX()) &#123; <span class="keyword">let</span> e = t[<span class="string">&quot;open-url&quot;</span>] || t.url || t.openUrl, s = t[<span class="string">&quot;media-url&quot;</span>] || t.mediaUrl; <span class="keyword">return</span> &#123; <span class="string">&quot;open-url&quot;</span>: e, <span class="string">&quot;media-url&quot;</span>: s &#125; &#125; <span class="keyword">if</span> (<span class="built_in">this</span>.isSurge()) &#123; <span class="keyword">let</span> e = t.url || t.openUrl || t[<span class="string">&quot;open-url&quot;</span>]; <span class="keyword">return</span> &#123; <span class="attr">url</span>: e &#125; &#125; &#125; &#125;; <span class="keyword">if</span> (<span class="built_in">this</span>.isMute || (<span class="built_in">this</span>.isSurge() || <span class="built_in">this</span>.isLoon() ? $notification.post(e, s, i, o(r)) : <span class="built_in">this</span>.isQuanX() &amp;&amp; $notify(e, s, i, o(r))), !<span class="built_in">this</span>.isMuteLog) &#123; <span class="keyword">let</span> t = [<span class="string">&quot;&quot;</span>, <span class="string">&quot;==============📣系统通知📣==============&quot;</span>]; t.push(e), s &amp;&amp; t.push(s), i &amp;&amp; t.push(i), <span class="built_in">console</span>.log(t.join(<span class="string">&quot;\n&quot;</span>)), <span class="built_in">this</span>.logs = <span class="built_in">this</span>.logs.concat(t) &#125; &#125; <span class="function"><span class="title">log</span>(<span class="params">...t</span>)</span> &#123; t.length &gt; <span class="number">0</span> &amp;&amp; (<span class="built_in">this</span>.logs = [...this.logs, ...t]), <span class="built_in">console</span>.log(t.join(<span class="built_in">this</span>.logSeparator)) &#125; <span class="function"><span class="title">logErr</span>(<span class="params">t, e</span>)</span> &#123; <span class="keyword">const</span> s = !<span class="built_in">this</span>.isSurge() &amp;&amp; !<span class="built_in">this</span>.isQuanX() &amp;&amp; !<span class="built_in">this</span>.isLoon(); s ? <span class="built_in">this</span>.log(<span class="string">&quot;&quot;</span>, <span class="string">`❗️<span class="subst">$&#123;<span class="built_in">this</span>.name&#125;</span>, 错误!`</span>, t.stack) : <span class="built_in">this</span>.log(<span class="string">&quot;&quot;</span>, <span class="string">`❗️<span class="subst">$&#123;<span class="built_in">this</span>.name&#125;</span>, 错误!`</span>, t) &#125; <span class="function"><span class="title">wait</span>(<span class="params">t</span>)</span> &#123; <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="params">e</span> =&gt;</span> <span class="built_in">setTimeout</span>(e, t)) &#125; <span class="function"><span class="title">done</span>(<span class="params">t = &#123;&#125;</span>)</span> &#123; <span class="keyword">const</span> e = (<span class="keyword">new</span> <span class="built_in">Date</span>).getTime(), s = (e - <span class="built_in">this</span>.startTime) / <span class="number">1e3</span>; <span class="built_in">this</span>.log(<span class="string">&quot;&quot;</span>, <span class="string">`🔔<span class="subst">$&#123;<span class="built_in">this</span>.name&#125;</span>, 结束! 🕛 <span class="subst">$&#123;s&#125;</span> 秒`</span>), <span class="built_in">this</span>.log(), (<span class="built_in">this</span>.isSurge() || <span class="built_in">this</span>.isQuanX() || <span class="built_in">this</span>.isLoon()) &amp;&amp; $done(t) &#125; &#125;(t, e) &#125;</span><br></pre></td></tr></table></figure><h2 id="你竟然还能看到这里"><a class="markdownIt-Anchor" href="#你竟然还能看到这里"></a> 你竟然还能看到这里</h2><ul><li>没想到你竟然还能看到这里，那不点击一下下面的赞赏？</li><li>偷偷告诉你  赞赏的点击彩蛋 我能玩一天</li><li>不信试试吧!</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> 教程 </tag>
            
            <tag> JavaScript </tag>
            
            <tag> 脚本 </tag>
            
            <tag> 小白适合 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>通过浏览器获取cookie</title>
      <link href="/2022020945082/"/>
      <url>/2022020945082/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="通过浏览器获取cookie的方法"><a class="markdownIt-Anchor" href="#通过浏览器获取cookie的方法"></a> 通过浏览器获取cookie的方法</h1><p><strong>背景</strong>:回归初心，用老路子抓cookie，其实也只是稍微麻烦了一点，至少管用。大部分玩家应该是知道的，这个帖子主要是给小白玩家们看的。其实方法有很多，我只是介绍了一种，装个插件是觉得看起来舒服点。</p><h2 id="解题思路"><a class="markdownIt-Anchor" href="#解题思路"></a> <strong>解题思路：</strong></h2><ol><li>浏览器登录要抓ck的网址：举例 <a href="http://m.jd.com/">http://m.jd.com</a></li><li>手机📱 验证码登录</li><li>插件搜索 “pt”，找到&quot;pt_pin&quot;和&quot;pt_key&quot;,然后按照一下格式拼接:   <strong>pt_key=XXXXX;pt_pin=XXXXXX;</strong>  注意两个分号,不要漏掉</li></ol><ul><li><p>偷小姐姐的图,懒得自己搞了</p></li><li><p>老规矩，上图文教程。</p></li><li><p>本文以Chrome浏览器为例，理论上其他浏览器也通用，举一反三一下，我懒得试了。没有网络环境的，去试下微软的edge吧。</p></li></ul><h2 id="插件版优点就是容易找也可以无痕模式下启用"><a class="markdownIt-Anchor" href="#插件版优点就是容易找也可以无痕模式下启用"></a> 插件版（优点就是容易找，也可以无痕模式下启用）</h2><p>注意：如果多个账号，一定不要点退出登录。直接关闭网页，清除浏览器cookie数据，重新进入网页登录下一个账号。退出会导致刚刚获取的ck失效。</p><h4 id="1-安装editthiscookie插件"><a class="markdownIt-Anchor" href="#1-安装editthiscookie插件"></a> 1、安装EditThisCookie插件</h4><p>网上应用店搜EditThisCookie，然后安装(三选一即可)。知道你们懒，戳它吧</p><ul><li><p>Google 商店:<a href="https://chrome.google.com/webstore/search/EditThisCookie?utm_source=chrome-ntp-icon">EditThisCookie</a></p></li><li><p>GitHub : <a href="https://github.com/ETCExtensions/Edit-This-Cookie/releases/tag/1.5.0">https://github.com/ETCExtensions/Edit-This-Cookie/releases/tag/1.5.0</a></p></li><li><p>蓝奏云: <a href="https://wwz.lanzouo.com/iNAqNzsfmlg">https://wwz.lanzouo.com/iNAqNzsfmlg</a></p></li><li><p>github和蓝奏云的需要自己解压,然后浏览器打开&quot;<strong>更多工具</strong>&quot; — “<strong>拓展程序</strong>” —’‘<strong>开发者模式</strong>’’,然后’‘<strong>加载已解压拓展</strong>’’,然后选择解压后的目录</p></li><li><p><img src="https://yml-img.ml:521/images/2022/02/28/R6M4NT.jpg" alt="image-20220209092413343" /></p></li><li><p>点击详情, 然后打开 “在无痕模式下使用即可”<img src="https://yml-img.ml:521/images/2022/02/28/MhcInV.jpg" alt="image-20220209092556575" /></p></li></ul><h4 id="2-打开相关网址进行登录"><a class="markdownIt-Anchor" href="#2-打开相关网址进行登录"></a> 2、打开相关网址进行登录：</h4><p>无痕模式下打开网址：<a href="http://m.jd.com/">http://m.jd.com</a></p><p><img src="https://yml-img.ml:521/images/2022/02/28/5UhKAp.jpg" alt="img" /></p><p><img src="https://yml-img.ml:521/images/2022/02/28/kmttZm.jpg" alt="img" /></p><h4 id="3-点击浏览器右上角的插件图标搜索pt-找到pt_pin和pt_key"><a class="markdownIt-Anchor" href="#3-点击浏览器右上角的插件图标搜索pt-找到pt_pin和pt_key"></a> 3、点击浏览器右上角的插件图标，搜索&quot;pt&quot;,  找到&quot;pt_pin&quot;和&quot;pt_key&quot;</h4><p>​按照一下格式拼接:   <strong>pt_key=XXXXX;pt_pin=XXXXXX;</strong>  注意两个分号,不要漏掉,然后发给机器人即可</p><p><img src="https://yml-img.ml:521/images/2022/02/28/1jHkIb.jpg" alt="img" /></p><h1 id="手机客户端版alook浏览器安卓免费ios-6元"><a class="markdownIt-Anchor" href="#手机客户端版alook浏览器安卓免费ios-6元"></a> 手机客户端版：Alook浏览器（安卓免费，ios 6元）</h1><h3 id="1-下载安装alook浏览器酷安下载直达alook"><a class="markdownIt-Anchor" href="#1-下载安装alook浏览器酷安下载直达alook"></a> 1、下载⏬安装Alook浏览器：酷安下载直达?<a href="https://www.coolapk.com/apk/alook.browser">Alook</a></h3><h3 id="2-浏览器登录网址mjdcom我的浏览器底部中间-向右划到第2页-工具箱-开发者工具-选择cookies拷贝-然后随便粘贴到一个地方找pt_pin和pt_key按照一下格式拼接-pt_keyxxxxxpt_pinxxxxxx-注意两个分号不要漏掉然后发给机器人即可"><a class="markdownIt-Anchor" href="#2-浏览器登录网址mjdcom我的浏览器底部中间-向右划到第2页-工具箱-开发者工具-选择cookies拷贝-然后随便粘贴到一个地方找pt_pin和pt_key按照一下格式拼接-pt_keyxxxxxpt_pinxxxxxx-注意两个分号不要漏掉然后发给机器人即可"></a> 2、浏览器登录网址：<a href="http://m.jd.com/">m.jd.com</a>?我的?浏览器底部中间  向右划到第2页    工具箱 — 开发者工具 — 选择Cookies拷贝 ,然后随便粘贴到一个地方，找&quot;pt_pin&quot;和&quot;pt_key&quot;,按照一下格式拼接:   <strong>pt_key=XXXXX;pt_pin=XXXXXX;</strong>  注意两个分号,不要漏掉,然后发给机器人即可!</h3><p><img src="https://yml-img.ml:521/images/2022/02/28/TCHANZ.jpg" alt="img" /></p><p><img src="https://yml-img.ml:521/images/2022/02/28/YGDlOU.jpg" alt="img" /></p><p><img src="https://yml-img.ml:521/images/2022/02/28/u5awy2.jpg" alt="img" /></p><p><img src="https://yml-img.ml:521/images/2022/02/28/5NImyI.jpg" alt="img" /></p><p><img src="https://yml-img.ml:521/images/2022/02/28/iaSLVR.jpg" alt="img" /></p>]]></content>
      
      
      
        <tags>
            
            <tag> 京东 </tag>
            
            <tag> cookie </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>我的第一个Java Scripts脚本</title>
      <link href="/2021123119294/"/>
      <url>/2021123119294/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="背景"><a class="markdownIt-Anchor" href="#背景"></a> 背景</h2><blockquote><p>随着自己认识的不断深入,越来越想写一个属于自己的脚本了,说干就干</p></blockquote><ul><li>首先,你要学习一下脚本的语言</li><li>然后要能看懂脚本</li><li>然后就是根据大佬的脚本进行修改,或者套模板</li><li>再然后就可以完全自己写了</li><li>我是一个小白,没啥特长,就喜欢折腾</li></ul><div class="tip "><p>决定在2020年的最后一天,发布我写的第一个脚本</p></div><h2 id="脚本发布"><a class="markdownIt-Anchor" href="#脚本发布"></a> 脚本发布</h2><div class="tip success"><p>走财运app</p></div><div class="note info flat"><p>信息: 走财运app<br />地址: <a href="https://github.com/yml2213/javascript">github</a><br />日期: 12-31 初次发布<br />类型: ios<br />收益: 1000能量等于0.1元 每天不到1元<br />平台: 目前仅测试青龙使用 其他未测试<br />备注: 本人小白,写脚本纯属爱好,瞎折腾;水平低,写的不好看;但是脚本开源,希望大佬不要嘲笑我(滑稽);同时也希望有人一起交流,一起进步.</p></div><div class="mermaid">关于脚本呢,我想说一下几点</div><ol><li>首先,这可以算是我的第一个脚本,非常感谢在我编写过程中给与我帮助的人,同时也非常感谢大佬可以放出的js脚本,让我学习,借鉴(就是抄)</li><li>然后就是感谢帮我测试的人员,谢谢你们的付出</li><li>然后就是关于脚本的问题了:<ol><li><p>脚本变量多,主要是因为他请求都是post请求,然后每条请求都会有一个加密,你可以在我的注释里看到的,就是sign=后面的,一个32位的数字字母组合,每条请求不同,当然;不同人的相同请求也不同,所以只能通过最笨的办法解决----穷举,把所有的都写出来,需要的自己抓包,填写变量即可</p></li><li><p>然后就是怎么修改自己的脚本,因为每个人抓包不同,所以每个人的脚本运行也是有区别的</p></li></ol></li><li>下面说一下如何快速修改脚本<br />根据脚本注释,你可以迅速了解这个脚本是如何运作的</li></ol><div class="tip "><p>请根据自身需求选择观看</p></div><div class="tabs" id=""><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#-1">只跑两个视频</button></li><li class="tab"><button type="button" data-href="#-2">跑视频,能量</button></li><li class="tab"><button type="button" data-href="#-3">跑视频,能量,步数</button></li><li class="tab"><button type="button" data-href="#-4">其他请自行注释,抓包等</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="-1"><ol><li><p>环境变量: <img src="https://yml-img.ml:521/images/2021/12/31/tfBE8b.png" alt="img" /></p></li><li><p>脚本修改: 只保留红框里的即可,请注释其他模块<img src="https://yml-img.ml:521/images/2021/12/31/g7qiw8.png" alt="img" /></p></li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="-2"><ol><li><p>环境变量: <img src="https://yml-img.ml:521/images/2021/12/31/CW0ebi.png" alt="img" /></p></li><li><p>脚本修改: 只保留红框里的即可,请注释其他模块<img src="https://yml-img.ml:521/images/2021/12/31/gi1gIt.png" alt="img" /></p></li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="-3"><ol><li><p>环境变量: <img src="https://yml-img.ml:521/images/2021/12/31/NsnuHF.png" alt="img" /></p></li><li><p>脚本修改: 根据自己抓包情况进行注释操作 <img src="https://yml-img.ml:521/images/2021/12/31/rbzpmA.png" alt="img" /></p></li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="-4"><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><div class="tip bell"><p>下面是青龙环境的截图,可以借鉴下</p></div><ul><li><img src="https://yml-img.ml:521/images/2021/12/31/lS4OWh.png" alt="img" /></li></ul><h2 id="完结撒花"><a class="markdownIt-Anchor" href="#完结撒花"></a> 完结撒花 ❀</h2><ul><li>遇到任何问题,请留言或加群交流: QQ群:1001401060</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> 学习 </tag>
            
            <tag> 脚本 </tag>
            
            <tag> Java Scripts </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>记一次auto.js脚本编写</title>
      <link href="/2021122635704/"/>
      <url>/2021122635704/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="背景"><a class="markdownIt-Anchor" href="#背景"></a> 背景</h2><h3 id="脚本"><a class="markdownIt-Anchor" href="#脚本"></a> 脚本</h3><ul><li>原计划是直接写圈x  青龙脚本的 ,奈何自己水平实在是有限,写出来经常报错,只能暂时搁置了</li><li>然后突然间看到auto.js这个软件   同样使用 JavaScript 进行编写,但是有着很详细的中文文档,感觉对新手也很友好, 所以直接从 简单的auto.js 脚本开始</li><li>然后就是看文档   看教学视频  一通研究,发现确实不是很难</li><li>于是就参照(抄)大佬的脚本,自己改了下,就能跑起来了呢,虽然是参照大佬的脚本,但是自己写的能跑起来,还是非常开心的</li><li>那就先简单介绍下今天的脚本吧</li></ul><h2 id="脚本介绍"><a class="markdownIt-Anchor" href="#脚本介绍"></a> 脚本介绍</h2><h3 id="运行环境"><a class="markdownIt-Anchor" href="#运行环境"></a> 运行环境</h3><ul><li>首先,运行环境只能是安卓设备  (毕竟太菜了  ios的还不会)</li><li>其次, 你需要打开你的 <code>无障碍</code>服务和<code>悬浮窗</code>权限.这样才能运行脚本(<code>悬浮窗</code>权限不给也可以运行,但是看不到日志)</li><li>你手机本身不需要<code>root</code>   很多同学看到就高兴了</li><li>别的想不到了</li></ul><h3 id="脚本使用"><a class="markdownIt-Anchor" href="#脚本使用"></a> 脚本使用</h3><h4 id="关于脚本"><a class="markdownIt-Anchor" href="#关于脚本"></a> 关于脚本</h4><ul><li>首先,项目开源: <a href="https://github.com/yml2213/auto.js-yml">github</a></li><li>其次,打包apk未加密   随便一个人解包后即可看到源码</li><li>本人对于此项目不负任何责任,您下载使用应于24小时后删除</li><li>您安装即同意以上条款</li></ul><h4 id="脚本使用-2"><a class="markdownIt-Anchor" href="#脚本使用-2"></a> 脚本使用</h4><ul><li>下载<a href="https://github.com/yml2213/auto.js-yml/tree/master/ksjsb">项目内</a>的apk,安装即可</li><li>安装后打开,请授予   <code>无障碍</code>服务和<code>悬浮窗</code>权限  以便脚本(apk)正常工作(如果软件内悬浮窗开启报错,请自行前往设置-开启本软件的<code>悬浮窗</code>权限)</li><li>然后可以设置每个视频观看时长与观看视频个数<img src="https://yml-img.ml:521/images/2022/02/28/ymLPLc.jpg" alt="image-20211226110255718" /></li><li>应用双开的请卸载一个(现在无法正确定位到双开应用)</li><li>然后是应用运行截图<img src="https://yml-img.ml:521/images/2022/02/28/bIdrHy.jpg" alt="image-20211226110330960" /></li><li>别的就没了吧,很简单的操作</li></ul><h4 id="脚本特点"><a class="markdownIt-Anchor" href="#脚本特点"></a> 脚本特点</h4><ul><li>脚本会取随机值,在视频停留8-12秒)  (没测试行不行)</li><li>脚本会 <code>随机往回滑动</code>,模拟人的操作</li><li>脚本会<code>向下滑动两个 在向回滑动之后执行</code></li></ul><h4 id="问与答"><a class="markdownIt-Anchor" href="#问与答"></a> 问与答</h4><ul><li><p>问: 脚本会窃取我的隐私吗?</p><ul><li>答: 我小白不会写,会也不会去写这种垃圾行为</li></ul></li><li><p>问: 脚本可以替代大佬的<code>快手极速版</code>的脚本吗?</p><ul><li>答: 不能替代,本脚本只是简单的模拟看视频滑动,大佬的<code>快手极速版</code>脚本包含了很多东西;无法替代,只能算补充; 因为自己看视频的奖励会比脚本看高一点(自己测试的,错了别说我)</li></ul></li><li><p>问: 脚本会更新吗?我怎么更新?</p><ul><li>答: 看心情吧,不确定是否会更新; 关注更新的话 ,就请你关注我的 <a href="https://menglei.xyz/">blog</a>;第一时间会发布于博客</li></ul></li></ul><h2 id="结束"><a class="markdownIt-Anchor" href="#结束"></a> 结束</h2><h3 id="终于写完了"><a class="markdownIt-Anchor" href="#终于写完了"></a> 终于写完了</h3><ul><li>大家有什么想说的,可以直接评论区评论</li><li>或者去我的 <a href="https://menglei.xyz/">blog</a>留言</li><li>或者加群等等</li></ul><h3 id="祝大家玩的愉快"><a class="markdownIt-Anchor" href="#祝大家玩的愉快"></a> 祝大家玩的愉快</h3>]]></content>
      
      
      
        <tags>
            
            <tag> 脚本 </tag>
            
            <tag> auto.js </tag>
            
            <tag> apk </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>巧用docker里的ubuntu，跑傻妞、oicq (onebot:再见👋🏻)</title>
      <link href="/2021121119419/"/>
      <url>/2021121119419/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="背景"><a class="markdownIt-Anchor" href="#背景"></a> 背景</h2><h3 id="群辉垃圾别的很是很香的"><a class="markdownIt-Anchor" href="#群辉垃圾别的很是很香的"></a> 群辉”垃圾“（别的很是很香的）</h3><ul><li>没错，群辉的gui操作确实很强，超级强；但是他的包管理，他的命令限制太多了；根本没有一个好用的包管理软件，而你可能会说可以安装ipkg鸭；但是你知道吗，ipkg也是个年久失修的玩意了。</li><li>是否受够了每次修改傻妞等都要远程ssh链接到群辉里，然后从普通用户切换到root提权，然后一通cd，最后还要用vim来修改你想改的文件</li><li>是否受够了群辉”垃圾“的设定。系统分区就给2.3G，动不动就爆满，满了以后还不敢乱搞。毕竟可能一搞坏了就是半条命</li><li>是否受够了群辉是不是抽风的 wget·········</li></ul><h3 id="新出路"><a class="markdownIt-Anchor" href="#新出路"></a> 新出路</h3><ul><li>昨天在帮一个朋友远程的时候，他的群辉wget死活不行了，群辉官方说重置系统，但是他舍不得，我就帮他用docker里的ubuntu 用wget下载了一键安装板最新的傻妞，然后转移到了他安装的地方，受此启发，想到了用ubuntu接管整个傻妞跟onebot</li><li>在群辉的docker里部署一个ubuntu，然后整个傻妞跟傻妞需要的node-onebot等全放ubuntu中，这样不但好管理，而且好备份等</li><li>大体思路就是这样了，其实听到这里，已经有很多人可以自己操作去了，我为了方便跟我一样的小白，还是啰嗦啰嗦，写一遍教程吧，可能有没提到的地方，也请大佬们指教了</li></ul><h2 id="优缺点"><a class="markdownIt-Anchor" href="#优缺点"></a> 优缺点</h2><h3 id="优点"><a class="markdownIt-Anchor" href="#优点"></a> 优点</h3><ul><li>上面已经说了很多了，方便管理、部署、备份等</li><li>不在依赖群辉的系统空间，也省去了ssh链接群辉的必要，减少了误操作引起群辉问题的几率</li><li>docker的ubuntu是超级轻量的，一个完整的最新包仅仅27m，解压后仅仅73m<img src="https://yml-img.ml:521/images/2022/02/28/UsOx01.jpg" alt="image-20211211190502028" /><img src="https://yml-img.ml:521/images/2022/02/28/DXpkwd.jpg" alt="image-20211211190533044" /></li><li>这就是docker的优点了，超级轻量（同时也意味着很多东西需要自己安装；不要怕，我们有apt）</li><li>部署后超级轻量，占用很低<img src="https://yml-img.ml:521/images/2022/02/28/vudAQc.jpg" alt="image-20211211190741649" /></li><li>还有就是可以吧你需要的文件夹挂载出来，这样就可以在群辉的<code>File Station</code>里面进行界面的操作了，更改傻妞配置什么的也不需要ssh使用命令修改了</li><li>暂时就这么多吧······</li></ul><h3 id="缺点"><a class="markdownIt-Anchor" href="#缺点"></a> 缺点</h3><ul><li>可能有人觉得这是套娃 🪆，但是我觉得这样做是有意义的（绝不是水文章）</li><li>别的就是可能第一次安装稍微有些麻烦了吧，因为你要安装你要的环境等</li><li>暂时想不到了······</li></ul><h3 id="说干就干开搞"><a class="markdownIt-Anchor" href="#说干就干开搞"></a> 说干就干，开搞</h3><h3 id="首先你需要搞个ubuntu"><a class="markdownIt-Anchor" href="#首先你需要搞个ubuntu"></a> 首先，你需要搞个ubuntu</h3><ul><li><p>这个直接群辉docker——注册表——搜索<code>ubuntu</code>——直接拉最新版即可（或者你喜欢那个拉那个）<img src="https://yml-img.ml:521/images/2022/02/28/x6FF2H.jpg" alt="image-20211211191547909" /></p></li><li><p>安装时选择高级设置</p><ul><li><p>勾选下自动启动，这样群辉重启后会自动运行这个，虽然还要手动运行傻妞<img src="https://yml-img.ml:521/images/2022/02/28/IYwDWh.jpg" alt="image-20211211191652126" /></p></li><li><p>按照你的需要自行映射下文件夹（不能把整个etc目录映射，又出现奇怪的bug），这里在啰嗦下，有的还是不太明白傻妞会占用两个目录</p><blockquote><ol><li>使用一键安装板的傻妞的时候，除了在你执行的目录创建一个sillyGirl目录外，还会在<code>/etc/sliiyGirl</code>生成一个配置文件夹</li><li>例如：<ol><li>我在<code>/home</code>目录下执行了傻妞一键安装的命令</li><li>这样  在我的<code>/home/sillyGirl</code>下会生成傻妞的文件目录如下<img src="https://yml-img.ml:521/images/2022/02/28/TV18gU.jpg" alt="image-20211211192356093" /></li><li>与此同时，在<code>etc/sillyGirl</code>目录下也会生成傻妞的文件夹。目录如下<img src="https://yml-img.ml:521/images/2022/02/28/z7g0G8.jpg" alt="image-20211211192543456" /></li><li>这就是你删除了安装目录的傻妞，配置还没丢失的原因；也就是我做这个映射的原因</li><li>我的傻妞、<s>onebot</s>  oicq 都会在<code>home</code>目录执行,然后<code>/etc/sillyGirl</code>映射可以gui修改傻妞配置,root映射方便修改oicq 配置文件</li></ol></li></ol></blockquote><ul><li><img src="https://yml-img.ml:521/images/2022/02/28/blZdPh300e3c17476c6c6a.png" alt="image-20211211191734629" /></li></ul></li><li><p>端口设置: 选择你想用的傻妞端口即可(同时不能与已有端口重复)<img src="https://yml-img.ml:521/images/2021/12/11/image-20211211192904163.png" alt="image-20211211192904163" /></p></li></ul></li><li><p>这样就安装完了,是不是超级简单</p></li></ul><h3 id="环境配置"><a class="markdownIt-Anchor" href="#环境配置"></a> 环境配置</h3><h4 id="首先我们再来顺一下需要什么东西"><a class="markdownIt-Anchor" href="#首先我们再来顺一下需要什么东西"></a> 首先,我们再来顺一下需要什么东西</h4><ul><li>安装傻妞-----需要wget</li><li><s>拉取onebot我们需要git</s>(使用oicq,暂时不需要了)</li><li><s>使用node-onebot-----需要node  npm</s></li><li>使用oicq-----需要node  npm</li><li>修改文件----需要nano(vim)等<strong>编辑器</strong></li><li>最后就是pm2----用来守护我们的oicq   sillyGirl 等程序</li></ul><h4 id="那就开始吧"><a class="markdownIt-Anchor" href="#那就开始吧"></a> 那就开始吧</h4><ul><li>那就先安装wget<ul><li>首先,执行<code>apt update</code> 更新下软件包列表</li><li>在执行<code>apt -y install wget</code>这样就可以安装好了wget  ✅</li></ul></li><li>然后是git<ul><li>执行<code>apt -y install git</code>这样就可以安装好了git  ✅</li></ul></li><li>然后是node(放弃nvm方法,使用n 安装管理node)<ul><li>首先<code>apt -y install npm</code>   安装一个基础版本的npm(时间有点长,耐心等待)</li><li>然后我们使用npm安装<code>n</code>管理node</li><li>使用<code>npm install -g n</code>安装<code>n</code></li><li>然后检查<code>n</code>是否安装   <code>n --version</code><img src="https://yml-img.ml:521/images/2021/12/15/image-20211215223938327.png" alt="image-20211215223938327" /></li><li>成功后就可以方便的安装node了</li><li>使用<code>n lts</code> 即可安装Node.js lts (长期服务)版本—v16.13.1 版本(可能版本号不对,因为写的时候这个就是最新的)</li><li>node是包含npm的,此时你可以使用<code>npm -v</code>测试是否成功(npm -v 报错的重启ubuntu即可解决)</li><li>这样你的node也安装好了 ✅</li></ul></li><li>顺便安装几个编辑器吧<ul><li>这个直接使用apt即可</li><li>安装nano <code>apt -y install nano</code></li><li>安装vim <code>apt -y install vim</code></li><li>安装过程遇到选地区的请自行选择(没记错的话6 亚洲   70 上海)</li><li>这样你的nano  vim  也安装好了 ✅</li></ul></li><li>最后就是安装pm2了<ul><li>是不是想直接<code>apt -y install pm2</code>了    年轻了;我们需要使用npm安装<ul><li>请执行 **<code>npm install -g pm2</code>**即可安装</li><li>执行**<code>pm2 -v</code>**即可检查是否安装成功</li></ul></li></ul></li><li>这样环境就安装的差不多了(不够的自己安装.命令百度一把一把的)</li></ul><h4 id="这样我们先来配置傻妞"><a class="markdownIt-Anchor" href="#这样我们先来配置傻妞"></a> 这样我们先来配置傻妞</h4><ul><li><p>首先cd到你想安装的文件夹   我安装在<code>home</code>目录下   执行 <code>cd /home</code><img src="https://yml-img.ml:521/images/2021/12/11/image-20211211201504317.png" alt="image-20211211201504317" /></p></li><li><p><s>然后国内用户执行 <code>set sillyGirl download_prefix https://ghproxy.com/</code>(使用git代理加速下载)</s>()(已经不需要了)</p></li><li><p>在执行下面的命令,即可一键安装傻妞到/home 目录下(同时<code>/etc/sillyGirl</code>文件夹下也会生成配置文件)(如果命令不能用请自行获取最新:<a href="https://t.me/trialerr">tg</a>)</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">s=sillyGirl;a=arm64;<span class="keyword">if</span> [[ $(uname -a | grep <span class="string">&quot;x86_64&quot;</span>) != <span class="string">&quot;&quot;</span> ]];<span class="keyword">then</span> a=amd64;<span class="keyword">fi</span> ;<span class="keyword">if</span> [ ! -d <span class="variable">$s</span> ];<span class="keyword">then</span> mkdir <span class="variable">$s</span>;<span class="keyword">fi</span> ;<span class="built_in">cd</span> <span class="variable">$s</span>;wget http://github.yanyuge.workers.dev/https://github.com/cdle/<span class="variable">$&#123;s&#125;</span>/releases/download/main/<span class="variable">$&#123;s&#125;</span>_linux_<span class="variable">$a</span> -O <span class="variable">$s</span> &amp;&amp; chmod 777 <span class="variable">$s</span>;pkill -9 <span class="variable">$s</span>;$(<span class="built_in">pwd</span>)/<span class="variable">$s</span></span><br></pre></td></tr></table></figure></li><li><p>下面如果你想全新安装傻妞,可以跳过配置文件拷贝部分;你想使用原来的配置文件  请继续往下看</p></li><li><p>############配置文件拷贝部分开始#################</p></li><li><p>首先删除所有生成的配置文件   <code>rm -rf /etc/sillyGirl</code> 这样你这个文件夹以及文件夹内的所有文件都会被删除</p></li><li><p>然后ssh 链接到你的群辉  执行这个命令</p><ul><li><p><code>cp -r /etc/sillyGirl /volume1/docker/ubunu/etc/sillyGirl</code></p><blockquote><p>命令解释   cp -r A B</p><ul><li>A B 为两个地址</li><li>A B 之间有空格</li><li>A是需要复制的文件地址</li><li>B是要复制到哪里去</li><li>请根据自己的<strong>实际位置</strong>修改命令</li><li>具体请看 <a href="https://www.runoob.com/linux/linux-comm-cp.html">菜鸟教程</a></li></ul></blockquote></li></ul></li><li><p>############配置文件拷贝部分结束#################</p></li><li><p>这样你就已经把傻妞完整的迁移到了 docker里的ubuntu</p></li><li><p>执行<code>cd /home/sillyGirl</code>  cd到傻妞文件夹(根据自己目录更更改.跟我一样无需更改)</p></li><li><p>然后执行<code>./sillyGirl</code>即可运行傻妞.与你群辉的没有差异</p></li><li><p>还请你记得这里的傻妞http服务端口,后面的onebot需要使用(端口号要统一)<img src="https://yml-img.ml:521/images/2021/12/08/image-20211208213541658.png" alt="port" /></p></li><li><p>傻妞完结撒花</p></li></ul><h4 id="然后我们配置node-onebot-oicq"><a class="markdownIt-Anchor" href="#然后我们配置node-onebot-oicq"></a> 然后我们配置<s>node-onebot</s>  oicq</h4><ul><li><p><s><code>cd /home</code>  cd到你要安装的目录</s></p></li><li><p><s>打开后克隆这个仓库</s></p><p><s><code>git clone https://ghproxy.com/https://github.com/takayama-lily/node-onebot.git</code></s></p><p><s>然后就会有很多文件会出现在node-onebot这个文件夹📂里</s></p></li><li><p><s>然后重点来了</s></p><ul><li><p><s><code>cdnode-onebot</code>  cd到这个目录下</s></p></li><li><p><s>新建一个config.js文件（后面命令找不到会自动新建，所以跳过）</s></p></li><li><p><s><code>nano config.js</code>使用nano编辑器打开（没有会新建）config.js文件</s></p></li><li><p><s>然后保存空文件-----按ctrl+o   然后回车确认修改的内容；然后ctrl+x 推出编辑器</s></p></li><li><p><s>直接使用群辉的文本编辑器打开config.js进行编辑(ununtu的中文可能乱码,百度一堆解决办法;我就不放链接了,直接使用群辉的编辑器)</s></p></li><li><p><s>粘贴上模板配置文件，下面引用大佬的模板及说明</s></p></li><li><pre class="highlight"><code class="js"><span class="hljs-built_in">module</span>.exports = &#123;    <span class="hljs-comment">//通用配置</span>    <span class="hljs-attr">general</span>: &#123;        <span class="hljs-attr">platform</span>:           <span class="hljs-number">1</span>,      <span class="hljs-comment">//1:安卓手机 2:aPad 3:安卓手表 4:MacOS 5:iPad</span>        <span class="hljs-attr">debug</span>:              <span class="hljs-literal">false</span>,  <span class="hljs-comment">//开启debug</span>        <span class="hljs-attr">use_cqhttp_notice</span>:  <span class="hljs-literal">true</span>,   <span class="hljs-comment">//是否使用cqhttp标准的notice事件格式</span>        <span class="hljs-attr">host</span>:               <span class="hljs-string">"localhost"</span>,  <span class="hljs-comment">//监听主机名</span>        <span class="hljs-attr">port</span>:               <span class="hljs-number">5700</span>,       <span class="hljs-comment">//端口</span>        <span class="hljs-attr">use_http</span>:           <span class="hljs-literal">false</span>,      <span class="hljs-comment">//启用http</span>        <span class="hljs-attr">use_ws</span>:             <span class="hljs-literal">false</span>,      <span class="hljs-comment">//启用正向ws，和http使用相同地址和端口</span>        <span class="hljs-attr">access_token</span>:       <span class="hljs-string">""</span>,         <span class="hljs-comment">//访问api的token</span>        <span class="hljs-attr">secret</span>:             <span class="hljs-string">""</span>,         <span class="hljs-comment">//上报数据的sha1签名密钥</span>        <span class="hljs-attr">post_timeout</span>:       <span class="hljs-number">30</span>,         <span class="hljs-comment">//post超时时间(秒)</span>        <span class="hljs-attr">post_message_format</span>:<span class="hljs-string">"array"</span>,    <span class="hljs-comment">//"string"或"array"</span>        <span class="hljs-attr">enable_cors</span>:        <span class="hljs-literal">false</span>,      <span class="hljs-comment">//是否允许跨域请求</span>        <span class="hljs-attr">enable_heartbeat</span>:   <span class="hljs-literal">false</span>,      <span class="hljs-comment">//是否启用ws心跳</span>        <span class="hljs-attr">heartbeat_interval</span>: <span class="hljs-number">15000</span>,      <span class="hljs-comment">//ws心跳间隔(毫秒)</span>        <span class="hljs-attr">rate_limit_interval</span>:<span class="hljs-number">500</span>,        <span class="hljs-comment">//使用_rate_limited后缀限速调用api的排队间隔时间(毫秒)</span>        <span class="hljs-attr">event_filter</span>:       <span class="hljs-string">""</span>,         <span class="hljs-comment">//json格式的事件过滤器文件路径</span>        <span class="hljs-attr">post_url</span>: [ <span class="hljs-comment">//上报地址，可以添加多个url</span>            <span class="hljs-comment">// "http://your.address.com:80",</span>        ],        <span class="hljs-attr">ws_reverse_url</span>: [ <span class="hljs-comment">//反向ws地址，可以添加多个url</span>            <span class="hljs-string">"ws://localhost:8080/qq/receive"</span>,        ],        <span class="hljs-attr">ws_reverse_reconnect_interval</span>: <span class="hljs-number">3000</span>, <span class="hljs-comment">//反向ws断线重连间隔(毫秒)，设为负数直接不重连</span>        <span class="hljs-attr">ws_reverse_reconnect_on_code_1000</span>: <span class="hljs-literal">true</span>, <span class="hljs-comment">//反向ws是否在关闭状态码为1000的时候重连</span>    &#125;,    <span class="hljs-comment">//每个账号的单独配置(用于覆盖通用配置)</span>    <span class="hljs-number">147258369</span>: &#123;    &#125;,&#125;;</code></pre></li><li><p><s>我的配置如下(仅供参考)</s><img src="https://yml-img.ml:521/images/2021/12/11/image-202112112050100959cd5e1caf91b92a9.png" alt="image-20211211205010095" /></p></li><li><p><s>第一个：模式   使用1-安卓  会把自己的qq挤下线；使用2-ipad正常  其他未测试</s></p></li><li><p><s>第二个：地址  这里填你傻妞的地址（分几种请情况）</s></p><ul><li><s>（1）同一台设备  默认127.0.0.1（localhost）即可，自己改端口  （不对请指教）</s></li><li><s>（2）在同一局域网中 跟我格式一样即可   填局域网ip+端口   后面默认</s></li><li><s>（3）在不同的网络下，请直接填写相应的ip+端口</s></li></ul></li></ul></li><li><p><s>设置完以后    自己保存;这样onebot也部署完成了</s></p></li><li><p><strong>oicq配置</strong> onebot的可以借鉴(基本没用了)</p></li><li><p>安装oicq  执行<code>npm i -g oicq@1</code> 即可完成安装</p></li><li><p>安装完成oicq后，先执行<code>oicq XXXXX</code> 命令，系统会生成默认配置文件</p></li><li><p>配置文件一般在<code>/root/.oicq</code>文件夹📂内   ,名字是<code>config.js</code></p></li><li><p>我们通过<code>vim</code> <code>nano</code>等编辑器编辑这个<code>config.js</code>文件(也可以去前面映射的群辉文件夹自己更改)</p></li><li><p>我的文件(参考下)<img src="https://yml-img.ml:521/images/2021/12/15/image-20211215231745783.png" alt="image-20211215231745783" /></p></li></ul><h4 id="傻妞与onrbot-oicq-联动"><a class="markdownIt-Anchor" href="#傻妞与onrbot-oicq-联动"></a> 傻妞与<s>onrbot</s>   oicq  联动</h4><ul><li>现在需要配置的基本完成了，到了关键的时候了<ul><li>首先-----<code>cd /home/sillyGirl</code> cd到傻妞的路径下</li><li>手动运行傻妞   <code>./sillyGirl</code></li><li>然后可以看到傻妞开放http服务的通知，记得跟你上面config.js的端口对应上;不对应的去你映射的<code>/etc/sillyGirl</code>修改傻妞的sets.conf配置文件(没有的话新建:并按照<a href="https://www.kejiwanjia.com/jiaocheng/zheteng/19778.html">小姐姐教程填写</a>)</li><li>重新启动,直到你的端口对应起来  傻妞的端口----你ununtu开放的端口-----onebot的端口(我的图片之前的.别太较真)<img src="https://yml-img.ml:521/images/2021/12/08/image-20211208213541658.png" alt="image-20211208213541658" /></li><li>然后执行 <code>oicq XXXXXXX</code> (XXXXX是你的qq号,记得跟<code>config.js</code>里的对应)</li><li>然后就会跑代码，然后就是扫码登录（出现连接不上服务就多试几次就可以了）</li><li>然后看到反向ws代理连接成功就证明联动成功了</li><li>然后，然后，然后   没有然后了；快去查询试试吧</li></ul></li></ul><h4 id="使用pm2守护我们的onebot-oicq"><a class="markdownIt-Anchor" href="#使用pm2守护我们的onebot-oicq"></a> 使用pm2守护我们的<s>onebot</s>  oicq</h4><ul><li>好不容易安装好的,不能让他轻易死掉呀</li><li>首先 <code>ctrl + c</code>关闭<s>onebot</s>  oicq</li><li>执行 <code>pm2 start &quot;oicq QQ号&quot;</code>即可<img src="https://yml-img.ml:521/images/2021/12/15/image-20211215232202882.png" alt="image-20211215232202882" /></li><li><strong>如果有多个机器人,请手动运行下 <code>oicq QQ号</code>后,确认没问题后, 在使用pm2守护</strong></li></ul><h4 id="使用pm2守护我们的傻妞"><a class="markdownIt-Anchor" href="#使用pm2守护我们的傻妞"></a> 使用pm2守护我们的傻妞</h4><ul><li>不能只守护onebot,傻妞也需要我们守护下呀<ul><li>cd 到傻妞的目录,然后<code>pm2 start &quot;./sillyGirl -d&quot;</code><img src="https://yml-img.ml:521/images/2021/12/15/image-20211215232702332.png" alt="image-20211215232702332" /></li><li>确认下是否成功 <code>pm2 list</code>,看到傻妞的进程就是成功了<img src="https://yml-img.ml:521/images/2021/12/15/image-20211215232724453.png" alt="image-20211215232724453" /></li></ul></li></ul><h4 id="然后就是开启pm2开机启动与保存守护列表"><a class="markdownIt-Anchor" href="#然后就是开启pm2开机启动与保存守护列表"></a> 然后就是开启pm2开机启动与保存守护列表</h4><ul><li>执行<code>pm2 startup</code>                       可以创建pm2的开机自启动</li><li>执行<code>pm2 save</code>                             保存当前应用列表</li><li>执行<code>pm2 resurrect</code>                   重新加载保存的应用列表</li><li>其他常用pm2命令<ul><li><code>pm2 list</code>                              列表 PM2 启动的所有的应用程序</li><li><code>pm2 monit</code>                            显示每个应用程序的CPU和内存占用情况</li><li><code>pm2 logs</code>                              显示所有应用程序的日志</li><li><code>pm2 logs [app-name]</code>        显示指定应用程序的日志</li><li><code>pm2 stop all</code>                      停止所有的应用程序</li><li><code>pm2 stop 0</code>                          停止 id为 0的指定应用程序</li><li><code>pm2 restart all</code>                重启所有应用</li><li><code>pm2 delete all</code>                  关闭并删除所有应用</li><li><code>pm2 delete 0</code>                       删除指定应用 id</li></ul></li></ul><h4 id="完结撒花"><a class="markdownIt-Anchor" href="#完结撒花"></a> 完结撒花</h4><ul><li>撒花  撒花  撒花</li><li>终于完了呀,码字好累</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> ubuntu </tag>
            
            <tag> 傻妞 </tag>
            
            <tag> docker </tag>
            
            <tag> oicq </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Quantumult X(圈x)系列之小白快速入门篇（转载）</title>
      <link href="/2021121050270/"/>
      <url>/2021121050270/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><strong>背景</strong>:中秋节终于把圈x买了，摸索了一天，终于略知一二了。整体感觉还是非常值得入手的一款App，比较中意的是去广告这些，真的很舒服，看油管终于不用等广告了。脚本功能的话，还是不太建议手机跑，感觉太消耗手机了。简单记录梳理一下我的摸索过程。</p><p><strong>推荐学习基地</strong><br />TG群组：<a href="https://t.me/QuanX_API">QuanXApp</a><br />TG频道：<a href="https://t.me/QuanX_API">QuanXNews</a><br />超详细教程：<a href="https://www.notion.so/Quantumult-X-1d32ddc6e61c4892ad2ec5ea47f00917">Quantumult X 不完全教程</a><br />教程真的巨详细，但是对于小白入门学习来说，可能有点枯燥。<br />建议先跟着小姐姐快速入门，再慢慢去读大佬梳理的教科书级教程。</p><p><strong>软件介绍</strong><br />Quantumult X 是 Quantumult 作者推出的一款网络dl工具。目前仅IOS端可用。</p><p><strong>主要功能</strong><br />扶梯子?，支持策略分流<br />屏蔽广告（油管等）、解锁会员（网易云音乐等）<br />运行js脚本（京东签到等）</p><p><strong>软件下载</strong><br />Appstore购买下载。国区无法下载，需要外区ID，这里推荐美国ID购买，因为本站有相关教程。<br />如果你没有美区ID，推荐?的教程自行注册，并购买美国apple礼品卡充值ID再购买。<br />听起来很麻烦，其实你学会之后就很容易了，也不用再去淘宝购买，小姐姐还是喜欢自己来。</p><p>推荐教程：</p><ul><li>[<a href="https://www.kejiwanjia.com/operate/kuajing/608.html">2021年3月]美国苹果账号Apple ID注册教程</a></li><li><a href="https://www.kejiwanjia.com/jiaocheng/zheteng/18438.html">如何优雅地购买美区Apple礼品卡并购买应用？</a></li></ul><p>废话不多说了，下载好软件，小姐姐直接带你入门。</p><h2 id="基本配置"><a class="markdownIt-Anchor" href="#基本配置"></a> 基本配置</h2><h3 id="说在前面"><a class="markdownIt-Anchor" href="#说在前面"></a> 说在前面</h3><p>本文主要是帮助小白快速上手入门，选择简单的方式给大家举?，不做太多理论叙述。<br />方便玩家快速理解和上手，最后会说一个“小白配置”。</p><p>后面再另些几篇展开说说各功能，一起进阶学习。<br />因为我更希望是让玩家弄懂每个设置背后的意义，最后能自己愉快地玩耍。<br />建议大家先跟着教程分步操作，体验一下知道玩法了，再最后享用小白配置。</p><p>圈x的配置，其实就是由不同的配置片段组成，它有一个核心的“<strong>配置文件</strong>”。</p><p>配置方式：<strong>1、软件ui交互</strong>；<strong>2、直接编辑“配置文件”</strong><br />简单的软件设置通过“方式1”更方便，但有的通过“方式2”更快捷。<br />经常听说的“懒人包”，其实就是直接给了你们编辑好的核心“配置文件”。</p><h3 id="软件设置"><a class="markdownIt-Anchor" href="#软件设置"></a> 软件设置</h3><h4 id="初始化设置粗略熟悉一下基本设置"><a class="markdownIt-Anchor" href="#初始化设置粗略熟悉一下基本设置"></a> 初始化设置：粗略熟悉一下基本设置</h4><p>初次打开软件，请允许添加VPN配置</p><p>右下角<strong>大风车</strong>?分别有<strong>节点、分流、重写、MitM、工具&amp;分析、配置文件、其他设置</strong>?拉到最后选择“<strong>其他设置</strong>”</p><ul><li>模式：暂时先默认<br />资源：建议启用ICloud，换设备也能用。<br />通知：建议暂时都打开，熟悉后再按需选择<br />VPN：暂时先默认<br />其他：暂时不管</li></ul><p><img src="https://yml-img.ml:521/images/2021/12/10/webp-20211210083306124.png" alt="img" /></p><p><strong>添加“资源解析器”</strong>：其作用就是将你导入订阅、规则、重写等资源解析并转换成圈x所支持的格式。为了避免后面引用资源出错，请先进行这项配置。</p><p><strong>步骤：<strong>右下角</strong>大风车</strong>?拉到最后“配置文件-编辑”?右上角“小回车”?选择<code>[general]</code>?添加下面⬇️的连接?右上角“保存”</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">resource_parser_url=https://raw.githubusercontent.com/KOP-XIAO/QuantumultX/master/Scripts/resource-parser.js</span><br></pre></td></tr></table></figure><p><img src="https://yml-img.ml:521/images/2021/12/10/webp-20211210083306460.png" alt="img" /></p><h3 id="节点设置"><a class="markdownIt-Anchor" href="#节点设置"></a> 节点设置</h3><p>目前圈x支持5种类型节点：SS， SSR， VMess， HTTP(s)，Trojan（不支持VLESS，?）</p><p>UI界面给了<strong>4种</strong>方式添加节点：</p><ul><li>单次只能添加1个节点：添加后，信息出现在配置文件的 <code>[server_local]</code>模块<ul><li><strong>添加</strong>：仅支持SS</li><li><strong>SS URI、扫码</strong>：支持SS、SSR，或圈x格式的trojan/vmess/http</li></ul></li><li>单次添加<strong>多个</strong>节点：订阅后，信息出现在配置文件的 <code>[server_remote]</code>模块<ul><li><strong>引用（订阅）</strong>：以此为</li></ul></li></ul><p><strong>步骤：<strong>右下角</strong>大风车</strong>?选择“节点-引用”?输入节点信息?打开资源解析器?右上角“保存”</p><p><img src="https://yml-img.ml:521/images/2021/12/10/webp-20211210083306759.png" alt="img" /></p><p>这里要用到“资源解析器”：不打开提示无法添加（如左图），打开则成功添加（如右图）。<br />现在你应该get到了“资源解析器”的作用了。</p><p><img src="https://yml-img.ml:521/images/2021/12/10/webp-20211210083306974.png" alt="img" /></p><h3 id="分流规则-策略组"><a class="markdownIt-Anchor" href="#分流规则-策略组"></a> 分流规则、策略组</h3><p>根据我自己理解说的大白话，可能不够严谨，大佬们求放过。小白们，希望你们能懂我的意思。写教程也很考验语文啊。</p><ul><li><h5 id="分流规则配置文件中的filter_local本地添加-filter_remote远程订阅"><a class="markdownIt-Anchor" href="#分流规则配置文件中的filter_local本地添加-filter_remote远程订阅"></a> 分流规则:配置文件中的<code>[filter_local]</code>(本地添加)/ <code>[filter_remote]</code>(远程订阅)</h5><ul><li><p>简单来说，就是把你访问的网址，按照你建立的分流规则来进行分流。</p></li><li><p>存在优先级，越靠前越优先，不要随便打乱顺序。<br />其实也很好理解，你访问的网站被分流，最终到策略(组)处理。分流规则可能是包含与被包含关系。最先被匹配到的分流规则，按其对应节点或策略（组）被处理。</p></li><li><p>例如：</p><ul><li><p><strong>全球分流规则</strong>对应策略是<strong>直连</strong>，<strong>油管分流规则</strong>对应策略是<strong>拒绝</strong>，<strong>油管分流被全球分流</strong>包含。</p></li><li><p><strong>全球分流规则</strong>在前面，你访问油管先匹配“全球分流规则”，对应被处理就是“<strong>直连</strong>”</p></li><li><p><strong>油管分流规则</strong>在前面，你访问油管先匹配“油管分流规则”，对应被处理就是“<strong>拒绝</strong>”</p></li><li><p>你们打不打麻将，大概意思就是被“<strong>截胡了</strong>”。</p></li></ul></li></ul></li><li><h5 id="策略组配置文件中的proxy模块"><a class="markdownIt-Anchor" href="#策略组配置文件中的proxy模块"></a> 策略组:配置文件中的<code>[proxy]</code>模块</h5><ul><li>服务于“分流规则”，你访问的网址被“分流规则”分流后，又由“策略组”来分发处理，可能是分配给“子策略(组)”，也可能给节点。简单来说，就是让你访问的网站自动走你设置好的节点或策略(组)。</li></ul></li><li><h5 id="整体流程访问的网站匹配分流规则a不同的节点或者是直连等策略组最终被处理处理效果取决于你的策略组或节点"><a class="markdownIt-Anchor" href="#整体流程访问的网站匹配分流规则a不同的节点或者是直连等策略组最终被处理处理效果取决于你的策略组或节点"></a> <strong>整体流程</strong>：访问的网站匹配分流规则A?不同的节点或者是“直连”等策略(组)?最终被处理（处理效果取决于你的策略(组)或节点）</h5></li></ul><h4 id="分流规则"><a class="markdownIt-Anchor" href="#分流规则"></a> 分流规则</h4><ul><li><p>添加：配置文件中的<code>[filter_local]</code>模块</p><ul><li>一条一条添加，不推荐，耗时麻烦。</li></ul></li><li><p>引用（订阅）：配置文件中<code>[filter_remote]</code>模块</p><ul><li>推荐，可以“远程订阅”大佬已经写好的。引用的就是一个list文件，引用时要用<strong>raw</strong>链接。</li></ul></li></ul><p>以“神机规则”为?，通过“rule-list引用”方式，进行远程订阅。<br />建议跟着添加一下，知道是什么意思就行，后面直接上懒人包。</p><p>神机规则地址：<a href="https://github.com/DivineEngine/Profiles/tree/master/Quantumult/Filter">https://github.com/DivineEngine/Profiles/tree/master/Quantumult/Filter</a></p><h5 id="1-随便找一个list左上角raw复制浏览器地址比如chinalist"><a class="markdownIt-Anchor" href="#1-随便找一个list左上角raw复制浏览器地址比如chinalist"></a> 1、随便找一个list?左上角Raw?复制浏览器地址，比如China.list</h5><p>注意在上面的优先生效，就是更细分的先生效吧，精准定位的意思。</p><p><img src="https://yml-img.ml:521/images/2021/12/10/webp-20211210083307020.png" alt="img" /></p><p><img src="https://yml-img.ml:521/images/2021/12/10/webp-20211210083307078.png" alt="img" /></p><p><img src="https://yml-img.ml:521/images/2021/12/10/webp-20211210083307148.png" alt="img" /></p><h5 id="2-选择分流-引用标签chinalist可自定义资源路径粘贴raw链接右上角保存"><a class="markdownIt-Anchor" href="#2-选择分流-引用标签chinalist可自定义资源路径粘贴raw链接右上角保存"></a> 2、选择”分流-引用“?标签“Chinalist”（可自定义）?”资源路径“，粘贴raw链接?右上角”保存“</h5><p><a href="https://raw.githubusercontent.com/DivineEngine/Profiles/master/Quantumult/Filter/China.list">https://raw.githubusercontent.com/DivineEngine/Profiles/master/Quantumult/Filter/China.list</a></p><p><img src="https://yml-img.ml:521/images/2021/12/10/webp-20211210083307516.png" alt="img" /></p><p><strong>策略组</strong></p><p>添加策略组3种方式</p><ul><li><p>通过配置文件<code>[policy]</code>模块添加</p><ul><li>支持添加<strong>所有</strong>类型策略组</li></ul></li><li><p>通过节点订阅列表添加</p><ul><li>支持添加策略组类型：<strong><code>static静态策略，available健康检查策略，round-robin负载均衡策略</code></strong></li></ul></li><li><p>通过订阅的<code>as-policy</code>参数生成并绑定策略组</p><ul><li>支持添加策略组类型：<strong><code>static静态策略，available健康检查策略，round-robin负载均衡策略</code></strong></li></ul></li></ul><p>简单了解一下就行，等下最后直接小白配置导入。先上手再说，真正使用你就懂了，实践出真理。</p><h3 id="重写与mitm"><a class="markdownIt-Anchor" href="#重写与mitm"></a> 重写与MitM</h3><p>如果你跟着小姐姐一起玩了elecv2p，对这个应该就不陌生了。可以实现一些<strong>去广告</strong>、<strong>跑脚本</strong>等功能。</p><p>以<strong>NobyDa大佬</strong>的签到为?（野比大佬是真大佬，几乎哪里都是以他为例）</p><p>项目地址：<a href="https://github.com/NobyDa/Script/tree/master/QuantumultX">https://github.com/NobyDa/Script/tree/master/QuantumultX</a></p><h4 id="重写对应配置文件中的rewrite_remote以及rewrite_local模块"><a class="markdownIt-Anchor" href="#重写对应配置文件中的rewrite_remote以及rewrite_local模块"></a> 重写：对应配置文件中的<code>[rewrite_remote]</code>以及<code>[rewrite_local]</code>模块</h4><p>用于修改HTTP或HTTPS请求与响应（字面意思）</p><ul><li>添加：手动单条添加，对应<code>[rewrite_local]</code></li><li>引用：远程引用大佬地址，一般是.conf为后缀的文件格式，注意引用时要用raw链接。对应<code>[rewrite_remote]</code></li></ul><p><strong>步骤</strong>:选择“重写-引用”?粘贴复制的raw链接?打开“重写”</p><ul><li><a href="https://raw.githubusercontent.com/NobyDa/Script/master/QuantumultX/Js.conf">https://raw.githubusercontent.com/NobyDa/Script/master/QuantumultX/Js.conf</a> #签到订阅</li><li><a href="https://raw.githubusercontent.com/NobyDa/Script/master/QuantumultX/Js_Remote_Cookie.conf">https://raw.githubusercontent.com/NobyDa/Script/master/QuantumultX/Js_Remote_Cookie.conf</a> #cookie获取订阅</li></ul><p><img src="https://yml-img.ml:521/images/2021/12/10/webp-20211210083307827.png" alt="img" /></p><p><strong>查看脚本</strong>：添加脚本订阅后，你可以查看脚本说明。以野比大佬的京东签到为?</p><p><strong>步骤</strong>：选择“‘重写-浏览”?搜索“JD_DailyBonus.js“?点击最右边的按钮?</p><p><img src="https://yml-img.ml:521/images/2021/12/10/webp-20211210083308348.png" alt="img" /></p><h4 id="mitm对应配置文件中的mitm模块"><a class="markdownIt-Anchor" href="#mitm对应配置文件中的mitm模块"></a> <strong>MitM</strong>：对应配置文件中的<code>[mitm]</code>模块</h4><p>用于HTTPS解析，只有配置了主机名的请求才会被解析。（字面意思）</p><p>一般添加“重写”引用的时候，自动添加了主机名。</p><p><strong>步骤</strong>:选择“MitM”-“生成证书”?“配置证书”?“信任证书”?打开“MitM”</p><h5 id="1-生成并配置证书"><a class="markdownIt-Anchor" href="#1-生成并配置证书"></a> 1、生成并配置证书</h5><p><img src="https://yml-img.ml:521/images/2021/12/10/webp-20211210083308603.png" alt="img" /></p><h5 id="2-安装证书"><a class="markdownIt-Anchor" href="#2-安装证书"></a> 2、安装证书</h5><p><img src="https://yml-img.ml:521/images/2021/12/10/webp-20211210083308800.png" alt="img" /></p><h5 id="3-信任证书设置通用关于本机证书信任设置"><a class="markdownIt-Anchor" href="#3-信任证书设置通用关于本机证书信任设置"></a> 3、信任证书：设置?通用?关于本机?证书信任设置</h5><p><img src="https://yml-img.ml:521/images/2021/12/10/webp-20211210083309014.png" alt="img" /></p><h3 id="工具分析"><a class="markdownIt-Anchor" href="#工具分析"></a> <strong>工具&amp;分析</strong></h3><p>暂时只说“<strong>构造HTTP请求</strong>”功能，跑脚本用，刚需。</p><ul><li>手动添加：一次一个</li><li>任务仓库：一次多个，推荐<ul><li>支持订阅任务仓库了，非常方便，可以一次性添加任务仓库，按需选择添加定时任务。</li></ul></li></ul><h4 id="手动添加"><a class="markdownIt-Anchor" href="#手动添加"></a> 手动添加</h4><p><strong>步骤</strong>:左上角“➕”?选择“高级”?“标签”(自定义)-Cron表达式(按需定时)-添加脚本路径-添加图标(<a href="https://www.kejiwanjia.com/jiaocheng/zheteng/notes/21016.html#%E6%9F%A5%E7%9C%8B%E8%84%9A%E6%9C%AC">查看脚本</a>可获得)</p><p><img src="https://yml-img.ml:521/images/2021/12/10/webp-20211210083309403.png" alt="img" /></p><p><strong>Cron表达式</strong>：还不懂的，看下面好好学习一下，花15分钟就差不多了。</p><ul><li><a href="https://www.kejiwanjia.com/jiaocheng/zheteng/notes/1958.html">关于定时任务cron表达式的填写规则介绍</a></li></ul><h4 id="订阅任务仓库以野比大佬的任务仓库为"><a class="markdownIt-Anchor" href="#订阅任务仓库以野比大佬的任务仓库为"></a> 订阅任务仓库：以野比大佬的任务仓库为?</h4><p><strong>步骤</strong>:上方“小盒子”?输入任务仓库raw链接?点击想添加的任务“➕”</p><p><code>https://raw.githubusercontent.com/NobyDa/Script/8f882c9634896702011da3bfe1923fb2db627f8a/NobyDa_BoxJs.json</code></p><p><img src="https://yml-img.ml:521/images/2021/12/10/webp-20211210083309875.png" alt="img" /></p><h4 id="实操练习以野比大佬的京东签到为"><a class="markdownIt-Anchor" href="#实操练习以野比大佬的京东签到为"></a> 实操练习：以野比大佬的京东签到为?</h4><p>确认重写、MitM、圈x总开关都打开了。</p><p><img src="https://yml-img.ml:521/images/2021/12/10/webp-20211210083310092.png" alt="img" /></p><h5 id="1-获取京东cookie根据脚本说明复制下面️其中一个网址到safari登录你的jd"><a class="markdownIt-Anchor" href="#1-获取京东cookie根据脚本说明复制下面️其中一个网址到safari登录你的jd"></a> 1、**获取京东Cookie：**根据脚本说明，复制下面⬇️其中一个网址到safari，登录你的JD。</h5><ul><li><a href="https://home.m.jd.com/myJd/newhome.action%EF%BC%9A%E7%82%B9%E5%87%BB%E2%80%9C%E6%88%91%E7%9A%84%E2%80%9D">https://home.m.jd.com/myJd/newhome.action：点击“我的”</a></li><li><a href="https://bean.m.jd.com/bean/signIndex.action%EF%BC%9A%E7%82%B9%E5%87%BB%E2%80%9C%E7%AD%BE%E5%88%B0%E2%80%9D%E5%B9%B6%E5%87%BA%E7%8E%B0%E7%AD%BE%E5%88%B0%E6%97%A5%E5%8E%86">https://bean.m.jd.com/bean/signIndex.action：点击“签到”并出现签到日历</a></li></ul><p>如果成功，会收到“cookie获取成功”的通知。如果没有弹出通知，可以去“首页-日志”里面查看一下。</p><p>因为我之前获取过了，所以日志提示已经写入。</p><p><img src="https://yml-img.ml:521/images/2021/12/10/webp-20211210083310367.png" alt="img" /></p><h5 id="2-运行京东多合一签到工具分析构造http请求右滑京东多合一签到选择️运行"><a class="markdownIt-Anchor" href="#2-运行京东多合一签到工具分析构造http请求右滑京东多合一签到选择️运行"></a> 2、<strong>运行“京东多合一签到”：</strong>“工具&amp;分析”?“<strong>构造HTTP请求</strong>“?右滑“京东多合一签到”?选择“▶️”运行</h5><p>脚本需要跑一会儿，成功后会发送通知。或者选择左边第二个“≡”，实时查看运行状态。</p><p><img src="https://yml-img.ml:521/images/2021/12/10/webp-20211210083310918.png" alt="img" /></p><h3 id="软件交互"><a class="markdownIt-Anchor" href="#软件交互"></a> 软件交互</h3><h4 id="1-底部大风车"><a class="markdownIt-Anchor" href="#1-底部大风车"></a> 1、底部大风车</h4><ul><li><p><strong>短按</strong>：进入设置</p></li><li><p><strong>长按</strong>：切换dl模式（全部dl、直连、规则分流）<br /><img src="https://yml-img.ml:521/images/2021/12/10/webp-20211210083311038.png" alt="img" /></p></li><li><p><strong>快速轻滑</strong>：唤出底部菜单（编辑配置文件、脚本记录、请求列表）<br /><img src="https://yml-img.ml:521/images/2021/12/10/webp-20211210083311229.png" alt="img" /></p></li></ul><h4 id="2-顶部工具条"><a class="markdownIt-Anchor" href="#2-顶部工具条"></a> 2、顶部工具条</h4><ul><li><p><strong>“节点“方块轻按右滑</strong>：切换工具块UI<br /><img src="https://yml-img.ml:521/images/2021/12/10/webp-20211210083311473.png" alt="img" /></p></li><li><p><strong>短按</strong>：查看相关资源明细</p></li><li><p><strong>长按</strong>：显示资源列表、日志文件等</p></li></ul><h4 id="3-其他点一点滑一滑都是基本操作"><a class="markdownIt-Anchor" href="#3-其他点一点滑一滑都是基本操作"></a> 3、<strong>其他</strong>：点一点，滑一滑，都是基本操作。</h4><h2 id="小白配置"><a class="markdownIt-Anchor" href="#小白配置"></a> 小白配置</h2><p>小白配置会覆盖你之前配置哦。</p><p>新知识学完了，下面来一个小白配置，感受一下大佬们的威武霸气。</p><p>开头说了，圈x有一个核心的“配置文件”，就像人的大脑?一样支配着软件运行。<br />有大佬自己整理好了相对完整的配置文件，并分享出来给大家使用。<br />我这里以“orz”大佬为?来介绍。<br />大佬集成了分流、策略、去广告、比价、boxjs等功能，并给了非常详细的任务订阅列表，非常方便。<br />项目地址：<a href="https://github.com/Orz-3/QuantumultX">https://github.com/Orz-3/QuantumultX</a><br />TG频道：<a href="https://t.me/Orzmini">https://t.me/Orzmini</a><br />TG群组：<a href="https://t.me/Orz_mini">https://t.me/Orz_mini</a></p><blockquote><p>Quantumult X小白配置说明：<br />本配置由神机规则修改而来，修改了默认策略组，增加了正则筛选策略组，并集成了多个作者的脚本及重写。<br />附带按task脚本作者分类的task订阅，可按需求订阅。</p><p>引用大佬原话</p></blockquote><h3 id="食用方法就是把远程配置文件下到本地覆盖再进行设置"><a class="markdownIt-Anchor" href="#食用方法就是把远程配置文件下到本地覆盖再进行设置"></a> 食用方法：就是把远程配置文件下到本地覆盖再进行设置。</h3><h4 id="1-找到库里的orz-3conf文件生成raw链接复制地址"><a class="markdownIt-Anchor" href="#1-找到库里的orz-3conf文件生成raw链接复制地址"></a> 1、找到库里的<strong>Orz-3.conf</strong>文件，生成raw链接，复制地址</h4><p><img src="https://yml-img.ml:521/images/2021/12/10/webp-20211210083311554.png" alt="img" /></p><p><img src="https://yml-img.ml:521/images/2021/12/10/webp-20211210083311617.png" alt="img" /></p><p><img src="https://yml-img.ml:521/images/2021/12/10/webp-20211210083311757.png" alt="img" /></p><h4 id="2-回到圈x右下角大风车配置文件-下载粘贴raw链接并保存"><a class="markdownIt-Anchor" href="#2-回到圈x右下角大风车配置文件-下载粘贴raw链接并保存"></a> 2、回到圈x?右下角大风车?配置文件-下载?粘贴raw链接并保存。</h4><p>这时候你会发现你之前添加的节点都已经被覆盖了，没有了。正常现象，不要惊慌。核心文件都换了，能不被覆盖么？</p><h4 id="3-重新打开重写和mitm生成证书配置证书安装证书信任证书"><a class="markdownIt-Anchor" href="#3-重新打开重写和mitm生成证书配置证书安装证书信任证书"></a> 3、重新打开重写和MitM：生成证书?配置证书?安装证书?信任证书</h4><p>如果你之前已经配置过证书，也需要重新配置，否则打开圈x服务时，会提示错误。记得把之前的证书顺便删除。</p><h4 id="4-添加节点右下角大风车选择节点-引用输入节点信息打开资源解析器右上角保存"><a class="markdownIt-Anchor" href="#4-添加节点右下角大风车选择节点-引用输入节点信息打开资源解析器右上角保存"></a> 4、添加节点：右下角<strong>大风车</strong>?选择“节点-引用”?输入节点信息?打开资源解析器?右上角“保存”</h4><h3 id="真香体验报告"><a class="markdownIt-Anchor" href="#真香体验报告"></a> 真香体验报告</h3><h4 id="1-分流及策略组选择规则分流模式爽歪歪"><a class="markdownIt-Anchor" href="#1-分流及策略组选择规则分流模式爽歪歪"></a> 1、分流及策略组：选择“规则分流”模式，爽歪歪。</h4><p>长按右下角“大风车”?选择“白色大风车”（规则分流）</p><p><img src="https://yml-img.ml:521/images/2021/12/10/webp-20211210083312099.png" alt="img" /></p><ul><li>参考作者的注意事项，梳理说明如下：<br /><strong>5个正则策略组</strong>：添加节点时，自动将香港，台湾，新加坡，美国，日本地区节点筛选出来<br /><strong>5个嵌套策略组</strong>：根据上面5个策略组进行了嵌套，方便切换选择<br />全球加速→国外网站<br />苹果服务→Appstore，Testflight<br />港台番剧→哔哩哔哩，爱奇艺<br />国际媒体→YouTube、Netflix、Amazon Prime Video<br />这类覆盖地区广泛或没有进行区域限制的流媒体服务<br />黑白名单→Final，即规则没有涉及到的<br /><strong>其他说明：</strong><br />限定区域的流媒体服务已经指向对应区域策略（UK和KR除外）<br />TikTok默认指定全球加速<br />国内网站默认指定Direct（直连?）<br />去广告默认指定Reject（拒绝❌）</li></ul><h4 id="2-重写勾选️去广告和比价是真的香cookie是跑脚本获取cookie用的按需勾选"><a class="markdownIt-Anchor" href="#2-重写勾选️去广告和比价是真的香cookie是跑脚本获取cookie用的按需勾选"></a> 2、重写：勾选☑️去广告，和比价是真的香，Cookie是跑脚本获取cookie用的，按需勾选。</h4><p><img src="https://yml-img.ml:521/images/2021/12/10/webp-20211210083312326.png" alt="img" /></p><ul><li>油管去广告：打开很流畅，卡顿不明显。<br />京东比价：打开商品页稍有那么一点点延迟，可接受范围内。<br />淘宝比价：需要点击”保障“页面显示。如果没有显示，尝试卸载重装就好了。<br />Cookie：就是跑脚本用的，可以在需要的时候再打开，不知道会不会和比价冲突，懒得试了。<br />Tiktok解锁：这个我是用不上，直接看作者说明：默认解锁日区，如需改区，本地在[rewrite_local]下方添加(?&lt;=_region=)CN(?=&amp;) url 307 JP 将JP更改成你想改的区域。<br />其他：你们自己去体验吧</li></ul><h4 id="3-添加task任务工具分析构造http请求添加请求列表上面的左一小盒子图标"><a class="markdownIt-Anchor" href="#3-添加task任务工具分析构造http请求添加请求列表上面的左一小盒子图标"></a> 3、添加Task任务：工具&amp;分析?构造HTTP请求?添加请求列表?上面的左一“小盒子图标”</h4><p>作者详细整理了各位大佬们的任务仓库，简直不能更贴心了，小姐姐我佩服。当然你去找作者原生库地址，也一样的。</p><p>“orz”大佬把原库地址都放在了描述里，真的感动哭了。?具体列表去大佬库里自己看吧。</p><p>Task库地址：<a href="https://github.com/Orz-3/QuantumultX/tree/master/Task">https://github.com/Orz-3/QuantumultX/tree/master/Task</a></p><p>库里找到你想要添加的脚本json文件?生成raw链接?复制到请求列表任务仓库?添加你想要执行的任务</p><p><img src="https://yml-img.ml:521/images/2021/12/10/webp-20211210083312599.png" alt="img" /></p><h4 id="4-boxjs配置文件也集成了完全就是一条龙服务"><a class="markdownIt-Anchor" href="#4-boxjs配置文件也集成了完全就是一条龙服务"></a> 4、Boxjs：配置文件也集成了，完全就是一条龙服务。</h4><p>Boxjs的多账号管理，确实还挺舒服的。访问地址：<a href="http://boxjs.com:9999/">http://boxjs.com:9999/</a></p><p>工具&amp;分析?HTTP Backend?确认勾选☑️?浏览器访问http://boxjs.com:9999/</p><p><img src="https://yml-img.ml:521/images/2021/12/10/webp-20211210083312894.png" alt="img" /></p><p>如果你跟我一样使用了Scriptable，请记得将网页小组件商店域名进行更改为<a href="http://boxjs.com:9999/">boxjs.com:9999</a>，否则无法访问。</p><p><img src="https://yml-img.ml:521/images/2021/12/10/webp-20211210083313080.png" alt="img" /></p><p><strong>恭喜你，又成功掌握一项新技能！</strong></p><p><strong>后话</strong>：终于写完了，本来真的只是想简单说说，结果越写越多，怪我知道的太多了！！！<br />希望小白能读的懂吧。如果通篇读透了，应该也就略知一二了。<br />反正不管你们能不能懂，我写完之后，我又更懂了。?</p><h3 id="转载于科技玩家小姐姐教程快速跳转链接"><a class="markdownIt-Anchor" href="#转载于科技玩家小姐姐教程快速跳转链接"></a> 转载于科技玩家小姐姐教程：<a href="https://www.kejiwanjia.com/jiaocheng/zheteng/notes/21016.html">快速跳转链接</a></h3>]]></content>
      
      
      
        <tags>
            
            <tag> 配置 </tag>
            
            <tag> Quantumult X </tag>
            
            <tag> 转载 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用onebot对接新版傻妞</title>
      <link href="/2021120828455/"/>
      <url>/2021120828455/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="背景"><a class="markdownIt-Anchor" href="#背景"></a> 背景</h2><h3 id="qq不稳定"><a class="markdownIt-Anchor" href="#qq不稳定"></a> QQ不稳定</h3><ul><li>从昨天开始，QQ出现不稳定的现象，猫咪大佬第一时间找了应对措施（暂时onebot对接）</li><li>不知道以后会怎么样，既然旧的不能用了，只能折腾新的</li><li>liunx的教程已经有大佬写了，我一个小白就不重点写了，详情请跳转：<a href="https://www.kejiwanjia.com/jiaocheng/51708.html">优雅的使用node-onebot，对接最新版傻妞</a></li><li>本文主要讲怎么用win系统部署onebot，然后对接最新版傻妞</li></ul><h2 id="那就开始吧"><a class="markdownIt-Anchor" href="#那就开始吧"></a> 那就开始吧！</h2><h3 id="准备"><a class="markdownIt-Anchor" href="#准备"></a> 准备</h3><ul><li>win2012R2及以上系统（最新的node不支持win7，后面会提供win7的最后支持版本，本人未测试，按道理时候可以用的）</li><li>聪明的小脑袋瓜</li><li>求知若渴的心❤</li></ul><h3 id="开始了"><a class="markdownIt-Anchor" href="#开始了"></a> 开始了</h3><ol><li><p>安装node环境：</p><ul><li><a href="https://nodejs.org/zh-cn/">node官网</a></li><li><a href="https://nodejs.org/dist/v16.13.1/node-v16.13.1-x86.msi">node官网-16.13.1长期维护版下载直连</a></li><li>下载完成后一路默认next （小白不懂，如有错误，请大佬指教）</li></ul></li><li><p>安装git环境：</p><ul><li><a href="https://git-scm.com/">git官网</a></li><li><a href="https://git-scm.com/download/win">git官网-2.34.1直链下载</a></li><li>下载完成后一路默认next</li></ul></li><li><p>安装好以后右键会增加git的选项</p><ul><li>确认是否安装成功，右键任意位置–git bash here(在当前目录打开终端)<img src="https://yml-img.ml:521/images/2021/12/08/image-20211208210148921.png" alt="image-20211208210148921" /></li><li>然后node -v   git --version ,正常输出即可<img src="https://yml-img.ml:521/images/2021/12/08/image-20211208210456834.png" alt="image-20211208210456834" /></li></ul></li><li><p>找一个目录，用来下载部署相关的东西。我是这样的，然后右键从当前目录打开终端（请忽略我已经下载好的文件，懒得删了）<img src="https://yml-img.ml:521/images/2021/12/08/image-20211208210834810.png" alt="image-20211208210834810" /></p></li><li><p>打开后克隆这个仓库</p><p><code>git clone https://ghproxy.com/https://github.com/takayama-lily/node-onebot.git</code></p><p>然后就会有很多文件会出现在node-onebot这个文件夹📂里</p></li><li><p>然后重点来了</p><ul><li><p><code>cdnode-onebot</code>  cd到这个目录下</p></li><li><p>新建一个config.js文件（后面命令找不到会自动新建，所以跳过）</p></li><li><p><code>nano config.js</code>使用nano编辑器打开（没有会新建）config.js文件</p></li><li><p>粘贴上模板配置文件，下面引用大佬的模板及说明</p></li><li><pre class="highlight"><code class="js"><span class="hljs-built_in">module</span>.exports = &#123;    <span class="hljs-comment">//通用配置</span>    <span class="hljs-attr">general</span>: &#123;        <span class="hljs-attr">platform</span>:           <span class="hljs-number">1</span>,      <span class="hljs-comment">//1:安卓手机 2:aPad 3:安卓手表 4:MacOS 5:iPad</span>        <span class="hljs-attr">debug</span>:              <span class="hljs-literal">false</span>,  <span class="hljs-comment">//开启debug</span>        <span class="hljs-attr">use_cqhttp_notice</span>:  <span class="hljs-literal">true</span>,   <span class="hljs-comment">//是否使用cqhttp标准的notice事件格式</span>        <span class="hljs-attr">host</span>:               <span class="hljs-string">"localhost"</span>,  <span class="hljs-comment">//监听主机名</span>        <span class="hljs-attr">port</span>:               <span class="hljs-number">5700</span>,       <span class="hljs-comment">//端口</span>        <span class="hljs-attr">use_http</span>:           <span class="hljs-literal">false</span>,      <span class="hljs-comment">//启用http</span>        <span class="hljs-attr">use_ws</span>:             <span class="hljs-literal">false</span>,      <span class="hljs-comment">//启用正向ws，和http使用相同地址和端口</span>        <span class="hljs-attr">access_token</span>:       <span class="hljs-string">""</span>,         <span class="hljs-comment">//访问api的token</span>        <span class="hljs-attr">secret</span>:             <span class="hljs-string">""</span>,         <span class="hljs-comment">//上报数据的sha1签名密钥</span>        <span class="hljs-attr">post_timeout</span>:       <span class="hljs-number">30</span>,         <span class="hljs-comment">//post超时时间(秒)</span>        <span class="hljs-attr">post_message_format</span>:<span class="hljs-string">"array"</span>,    <span class="hljs-comment">//"string"或"array"</span>        <span class="hljs-attr">enable_cors</span>:        <span class="hljs-literal">false</span>,      <span class="hljs-comment">//是否允许跨域请求</span>        <span class="hljs-attr">enable_heartbeat</span>:   <span class="hljs-literal">false</span>,      <span class="hljs-comment">//是否启用ws心跳</span>        <span class="hljs-attr">heartbeat_interval</span>: <span class="hljs-number">15000</span>,      <span class="hljs-comment">//ws心跳间隔(毫秒)</span>        <span class="hljs-attr">rate_limit_interval</span>:<span class="hljs-number">500</span>,        <span class="hljs-comment">//使用_rate_limited后缀限速调用api的排队间隔时间(毫秒)</span>        <span class="hljs-attr">event_filter</span>:       <span class="hljs-string">""</span>,         <span class="hljs-comment">//json格式的事件过滤器文件路径</span>        <span class="hljs-attr">post_url</span>: [ <span class="hljs-comment">//上报地址，可以添加多个url</span>            <span class="hljs-comment">// "http://your.address.com:80",</span>        ],        <span class="hljs-attr">ws_reverse_url</span>: [ <span class="hljs-comment">//反向ws地址，可以添加多个url</span>            <span class="hljs-string">"ws://localhost:8080/qq/receive"</span>,        ],        <span class="hljs-attr">ws_reverse_reconnect_interval</span>: <span class="hljs-number">3000</span>, <span class="hljs-comment">//反向ws断线重连间隔(毫秒)，设为负数直接不重连</span>        <span class="hljs-attr">ws_reverse_reconnect_on_code_1000</span>: <span class="hljs-literal">true</span>, <span class="hljs-comment">//反向ws是否在关闭状态码为1000的时候重连</span>    &#125;,    <span class="hljs-comment">//每个账号的单独配置(用于覆盖通用配置)</span>    <span class="hljs-number">147258369</span>: &#123;    &#125;,&#125;;</code></pre></li><li><p>第一个：模式   使用1-安卓  会把自己的qq挤下线；使用2-ipad正常  其他未测试</p></li><li><p>第二个：地址  这里填你傻妞的地址（分几种请情况）</p><ul><li>（1）同一台设备  默认127.0.0.1（localhost）即可，自己改端口  （不对请指教）</li><li>（2）在同一局域网中 跟我格式一样即可   填局域网ip+端口   后面默认</li><li>（3）在不同的网络下，请直接填写相应的ip+端口</li></ul></li><li><p>我的可以做个参考（不对别打我）<img src="https://yml-img.ml:521/images/2021/12/08/image-20211208212225739.png" alt="image-20211208212225739" /></p></li></ul></li><li><p>设置完以后  按ctel+o   然后回车确认修改的内容；然后ctrl+x 推出编辑器（别问我为啥不用vim）</p></li><li><p>现在配置基本完成了，到了关键的时候了</p><ul><li>首先确认你的傻妞是最新版，最好rm- rf删除，然后一键安装下（不要问我为啥知道的）</li><li>然后cd到傻妞的路径下  手动运行傻妞   ./sillyGirl</li><li>然后可以看到傻妞开放http服务的通知，记得跟你上面config.js的端口对应上<img src="https://yml-img.ml:521/images/2021/12/08/image-20211208213541658.png" alt="image-20211208213541658" /></li><li>然后到你的node-onebot目录下</li><li>执行 <code>node main 12345678</code>（这个是你的QQ号，记得跟config.js里的对应）</li><li>然后回跑代码，然后就是扫码登录（出现连接不上服务就多试几次就可以了）</li><li>然后，然后，然后   没有然后了；快去查询试试吧</li></ul></li></ol><h3 id="问题区域"><a class="markdownIt-Anchor" href="#问题区域"></a> 问题区域</h3><h3 id="我遇到的问题"><a class="markdownIt-Anchor" href="#我遇到的问题"></a> 我遇到的问题</h3><ol><li>反向代理一直连不上 不停地刷屏</li></ol><ul><li>解决办法： 删除傻妞文件，下载最新傻妞（配置不会丢失）；然后删除config.js   从头配置一遍，基本就可以解决，主要是两边的端口要对应，傻妞的http服务要打开（我被他折磨了一天，发现删除从头来是最快解决办法）</li></ul><ol start="2"><li>别的问题暂时没遇到，随时补充。欢迎留言，我能帮忙的会尽力的</li></ol><h2 id="关于守护"><a class="markdownIt-Anchor" href="#关于守护"></a> 关于守护</h2><h3 id="win平台"><a class="markdownIt-Anchor" href="#win平台"></a> win平台</h3><ul><li>暂时没找到合适的守护方案</li><li>尝试过pm2，nssm等</li><li>终归是小白，技术太菜了，只能等大佬出教程了</li><li>没有守护就是不能关闭打开的命令窗口，其实无所谓，本来就是跑vlw框架的</li><li>撒花  撒花 ✿✿ヽ(°▽°)ノ✿</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> 傻妞 </tag>
            
            <tag> onebot </tag>
            
            <tag> 京东 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Cron解析拓展</title>
      <link href="/2021120142806/"/>
      <url>/2021120142806/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="背景"><a class="markdownIt-Anchor" href="#背景"></a> 背景</h2><h3 id="由于最近研究羊毛需要使用各种cron定时"><a class="markdownIt-Anchor" href="#由于最近研究羊毛需要使用各种cron定时"></a> 由于最近研究羊毛，需要使用各种Cron定时</h3><ul><li>但是Cron简单的可以一看就懂了，复杂的还要找一个在线解析网站，很麻烦</li><li>由于嫌弃开新页面麻烦，所以想找一个Cron的插件</li><li>巧合的是并没有单纯地Cron插件，毕竟太小众了</li></ul><h3 id="没有现成的那就自己搞一个"><a class="markdownIt-Anchor" href="#没有现成的那就自己搞一个"></a> 没有现成的，那就自己搞一个</h3><ul><li>当我萌生这个想法的时候，我就已经走上了一条不归路</li><li>当时觉得Cron解析很简单，然后在找个Chrome，随便套个壳，完美</li><li>可惜天公不作美，自己github上找了一遍又一遍，项目下载测试了一个又一个，始终没找到合适的</li><li>自己写：算了算了，我不会写代码，不够头疼的呢</li></ul><h3 id="不过功夫不负有心人终于找到了一个"><a class="markdownIt-Anchor" href="#不过功夫不负有心人终于找到了一个"></a> 不过功夫不负有心人，终于找到了一个</h3><ul><li>大佬项目地址:<a href="https://github.com/baiy/Ctool">github</a></li><li>终于在这个大佬的项目里，找到了我需要的东西</li><li>然后就是魔改下大佬的项目，吧不需要的全部删除</li><li>本人不会代码，只能各种乱改，然后各种测试，最终终于到了能看的地步，这里分享下，给有需要的人</li><li>我魔改的后的项目地址：<a href="https://github.com/yml2213/cron">yml2213/cron</a></li><li>希望有大佬带带我，我只是个小白（爱折腾的小白）</li></ul><h2 id="开始教程"><a class="markdownIt-Anchor" href="#开始教程"></a> 开始教程</h2><h3 id="废话不说了下面开始"><a class="markdownIt-Anchor" href="#废话不说了下面开始"></a> 废话不说了，下面开始</h3><h2 id="1-克隆我的项目"><a class="markdownIt-Anchor" href="#1-克隆我的项目"></a> 1. 克隆我的项目</h2><ul><li><p>地址：<a href="https://github.com/yml2213/cron">yml2213/cron</a></p></li><li><p>不管你用什么办法，克隆下来，然后放到一个你能找到，但是不能经常用的地方，这个文件夹在安装后不能删除，所以自己选个目录（我的目录：仅供参考）<img src="https://yml-img.ml:521/images/2021/12/01/image-20211201164904270.png" alt="image-20211201164904270" /></p></li><li><p>然后打开你的浏览器，找到拓展程序<img src="https://yml-img.ml:521/images/2021/12/06/image-20211201182222538.png" alt="image-20211201182222538" /></p></li><li><p>然后打开开发者模式——再加载已解压的拓展程序<img src="https://yml-img.ml:521/images/2021/12/06/image-20211201182304509.png" alt="image-20211201182304509" /></p></li><li><p>然后选择你刚才的目录<img src="https://yml-img.ml:521/images/2021/12/01/image-20211201165326957.png" alt="image-20211201165326957" /></p></li><li><p>然后就已经安装成功了</p><p><img src="https://yml-img.ml:521/images/2021/12/01/image-20211201165356523.png" alt="image-20211201165356523" /></p></li><li><p>最后选择这个固定，就可以固定在chrome页面了</p><p><img src="https://yml-img.ml:521/images/2021/12/06/image-20211201165523758.png" alt="image-20211201165523758" /></p></li><li><p>然后点击插件，点一次这个“Cron定时解析”，就可以愉快的玩耍了</p></li><li><p>这样你的插件就安装完成了，以后遇到不懂得Cron就可以直接复制，然后点一下就直接解析了，妈妈再也不用担心我不知道Cron运行时间了</p></li><li><p>完结撒花✿✿ヽ(°▽°)ノ✿</p></li><li><p>祝您安装顺利</p></li></ul><h2 id="完成手工"><a class="markdownIt-Anchor" href="#完成手工"></a> 完成手工</h2><h3 id="下面放几张使用效果图"><a class="markdownIt-Anchor" href="#下面放几张使用效果图"></a> 下面放几张使用效果图</h3><ul><li>简单的<img src="https://yml-img.ml:521/images/2021/12/06/image-20211201182951241.png" alt="image-20211201182951241" /></li><li>复杂一点点的<img src="https://yml-img.ml:521/images/2021/12/06/image-20211201183027309.png" alt="image-20211201183027309" /></li><li>最后祝你食用愉快</li><li>有会代码的大佬帮我优化下也可以，我只是个“爱折腾的小白”</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> 拓展 </tag>
            
            <tag> Cron </tag>
            
            <tag> 魔改 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>免费欧洲vps分享</title>
      <link href="/2021112216846/"/>
      <url>/2021112216846/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="今天发现个免费vps分享下"><a class="markdownIt-Anchor" href="#今天发现个免费vps分享下"></a> 今天发现个免费vps，分享下</h2><h3 id="优点"><a class="markdownIt-Anchor" href="#优点"></a> 优点</h3><ul><li>免费</li><li>地域欧洲</li><li>1h 512M  5G ssd配置</li><li>只需要一个tg即可</li></ul><h3 id="缺点"><a class="markdownIt-Anchor" href="#缺点"></a> 缺点</h3><ul><li>7天免费期限</li><li>到期前3天可以免费续期</li><li>7天无线续期</li><li>暂时没找到脚本续期（因为续期需要填写域名+验证）</li><li>仅支持IPv6，但是官方提供IPv4端口转发~</li></ul><h2 id="开始教程"><a class="markdownIt-Anchor" href="#开始教程"></a> 开始教程</h2><h3 id="准备"><a class="markdownIt-Anchor" href="#准备"></a> 准备</h3><ul><li><a href="https://hax.co.id/login">官网</a></li><li><a href="https://telegram.org">TG</a></li><li>脑子</li></ul><h3 id="步骤"><a class="markdownIt-Anchor" href="#步骤"></a> 步骤</h3><ul><li>打开官网，根据提示即可注册<img src="https://yml-img.ml:521/images/2022/02/28/JertQK.jpg" alt="image-20211122203806039" /><img src="https://yml-img.ml:521/images/2022/02/28/BpwDAB.jpg" alt="image-20211122203904989" /></li><li>注册后还有个秘钥，按照步骤填入即可</li><li>自行设置账号密码</li><li>使用 TG 账号用户 id 和刚刚设置的登录密码登录</li><li>然后直接创建vps（现在除了最后那个都是kvm架构的-自行选择）</li><li>然后点击vps info即可看到信息<img src="https://yml-img.ml:521/images/2022/02/28/hfiRSS.jpg" alt="image-20211122205652790" /></li><li>这样你的vps就创建好了</li></ul><h3 id="配置"><a class="markdownIt-Anchor" href="#配置"></a> 配置</h3><ul><li>现在是纯ip v6的，可以使用官方的<a href="https://hax.co.id/ipv6-to-ipv4/">IPv4 to IPv6</a>来进行转发，设置很简单<img src="https://yml-img.ml:521/images/2022/02/28/1eZngY.jpg" alt="image-20211122210146900" /></li><li>这样就可以通过这个v4地址控制你的vps了，下面放个截图<img src="https://yml-img.ml:521/images/2022/02/28/3BJ2kD.jpg" alt="image-20211122210256973" /></li></ul><h2 id="收工"><a class="markdownIt-Anchor" href="#收工"></a> 收工</h2><h3 id="可能有用的链接"><a class="markdownIt-Anchor" href="#可能有用的链接"></a> 可能有用的链接</h3><ul><li>官方TG：<a href="https://t.me/ipv6server/">Telegram Group</a></li><li>中文讨论TG：<a href="https://t.me/ipv6china">中文TG</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> 分享 </tag>
            
            <tag> vps </tag>
            
            <tag> 白嫖 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>给你的docker里面跑一个ubuntu吧</title>
      <link href="/2021111817870/"/>
      <url>/2021111817870/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="背景"><a class="markdownIt-Anchor" href="#背景"></a> 背景</h2><h3 id="最近折腾羊毛也学习了linux知识下面来几个实用的小技巧可以帮助大家更愉快的玩耍"><a class="markdownIt-Anchor" href="#最近折腾羊毛也学习了linux知识下面来几个实用的小技巧可以帮助大家更愉快的玩耍"></a> 最近折腾羊毛，也学习了linux知识,下面来几个实用的小技巧，可以帮助大家更愉快的玩耍</h3><ul><li>docker安装ubuntu</li><li>docker中的ubuntu安装ssh，远程ssh控制群晖</li><li>docker中的ubuntu安装内网穿透工具，远程折腾ubuntu（已放弃，docker我整不出systemd管理进程，反正就是暂时没解决，虚拟机/真机正常使用）</li><li>docker中的ubuntu配合crontab，定时运行”美团天天神券“ 脚本</li></ul><h3 id="下面开始折腾欢迎大家一起交流我是小白错了大佬不要喷我"><a class="markdownIt-Anchor" href="#下面开始折腾欢迎大家一起交流我是小白错了大佬不要喷我"></a> 下面开始折腾，欢迎大家一起交流（我是小白，错了大佬不要喷我）</h3><h4 id="首先整个sshdocker-ubuntu不能使用请跳过"><a class="markdownIt-Anchor" href="#首先整个sshdocker-ubuntu不能使用请跳过"></a> 首先整个ssh（docker-ubuntu不能使用，请跳过）</h4><ul><li><p>自行下载喜欢的镜像（我下载的是ubuntu 20.4 lst版本），直接群晖搜索（docker hub）第一个就可以</p></li><li><p>下载后进行安装，我个人把home目录做了挂载<img src="https://yml-img.ml:521/images/2021/11/18/image-20211118093806420.png" alt="image-20211118093806420" /></p></li><li><p>端口开放了 22——映射到群晖的2222端口 <img src="https://yml-img.ml:521/images/2021/11/18/image-20211118093836292.png" alt="image-20211118093836292" /></p></li><li><p>别的都默认安装</p></li><li><p>运行后，切换到终端机界面，可以ls看一下目录<img src="https://yml-img.ml:521/images/2021/11/18/image-20211118094008964.png" alt="image-20211118094008964" /></p></li><li><p>安装ssh</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">apt update</span><br><span class="line">pt install openssh-server</span><br></pre></td></tr></table></figure><p>安装过程中会让你选择地区，请自行选择，不会的看图<img src="https://yml-img.ml:521/images/2021/11/18/image-20211118094355838.png" alt="image-20211118094355838" /><img src="https://yml-img.ml:521/images/2021/11/18/image-20211118094407962.png" alt="image-20211118094407962" />完成后可以 ssh-v，虽然用法不对，但是可以方便的看出成功装了ssh<img src="https://yml-img.ml:521/images/2021/11/18/image-20211118094941232.png" alt="image-20211118094941232" /></p></li><li><p>现在就可以方便的通过外网访问群晖了，ssh访问<img src="https://yml-img.ml:521/images/2021/11/18/image-20211118095117983.png" alt="image-20211118095117983" />不要问我这个有什么用处，当你用到了，就知道了（傻妞死掉，你没有内网电脑操作的时候可以用)</p></li><li><p>到此ssh完成，你可以愉快的外网 ssh访问群晖</p></li></ul><h4 id="然后是内网穿透"><a class="markdownIt-Anchor" href="#然后是内网穿透"></a> 然后是内网穿透</h4><ul><li><p>内网穿透的话推荐两个软件<a href="https://www.zerotier.com/">zerotier</a>跟<a href="https://tailscale.com/">tailscale</a>，谁好谁坏不好判断，反正说啥的都有，自己尝试下就知道了</p></li><li><p>下面用tailscale做演示，因为我的环境，tailscale延迟更低，个人觉得也比较易用</p></li><li><p>首先安装一个curl，下面会用到： apt install curl，问你y/n的话自己输入 y；惯例错误🙅检测方法<img src="https://yml-img.ml:521/images/2021/11/18/image-20211118100823775.png" alt="image-20211118100823775" /></p></li><li><p>然后装一个 sudo ： apt install sudo ；<img src="https://yml-img.ml:521/images/2021/11/18/image-20211118101155773.png" alt="image-20211118101155773" />执行sudo -i不报错即可</p></li><li><p>还要装一个gnupg：防止报错（docker的版本精简的太多了），sudo apt-get install gnupg；问你y/n的话自己输入 y</p></li><li><p>到<a href="https://tailscale.com/download/linux">官网</a>找到liunx的教程，根据系统选择合适的，这里是ubuntu-20.4 为例（照搬官网）；一步一步执行即可</p></li><li><p><strong>这个目前docker中的ubuntu不能启动，只能在ubuntu中使用，还没找到解决办法，看看就好了</strong></p><ul><li><p>Packages are available for x86 and ARM CPUs, in both 32-bit and 64-bit variants.</p><ol><li><p>Add Tailscale’s package signing key and repository</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">curl -fsSL https://pkgs.tailscale.com/stable/ubuntu/focal.gpg | sudo apt-key add -</span><br><span class="line">curl -fsSL https://pkgs.tailscale.com/stable/ubuntu/focal.list | sudo tee /etc/apt/sources.list.d/tailscale.list</span><br></pre></td></tr></table></figure></li><li><p>Install Tailscale</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get update</span><br><span class="line">sudo apt-get install tailscale</span><br></pre></td></tr></table></figure></li><li><p>Authenticate and connect your machine to your Tailscale network</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo tailscale up</span><br></pre></td></tr></table></figure></li><li><p>You’re connected! You can find your Tailscale IPv4 address by running:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tailscale ip -4</span><br></pre></td></tr></table></figure></li></ol><p>If the device you added is a server or remotely-accessed device, you may want to consider <a href="https://tailscale.com/kb/1028/key-expiry">disabling key expiry</a> to prevent the need to periodically re-authenticate.</p><p>部分截图：<img src="https://yml-img.ml:521/images/2021/11/18/image-20211118101834248.png" alt="image-20211118101834248" /><img src="https://yml-img.ml:521/images/2021/11/18/image-20211118101937732.png" alt="image-20211118101937732" /></p></li></ul></li></ul><h4 id="下面是crontab相关的"><a class="markdownIt-Anchor" href="#下面是crontab相关的"></a> 下面是crontab相关的</h4><ul><li><p>首先安装一个crontab：apt install cron</p></li><li><p>安装python3.8，后面需要使用：</p></li><li><p>以root用户运行以下命令以更新软件包列表并安装必备组件：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt update</span><br></pre></td></tr></table></figure><p>安装必要的支持包：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install software-properties-common</span><br></pre></td></tr></table></figure><p>添加 Deadsnakes PPA（一个非常好用的第三方软件源）：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo add-apt-repository ppa:deadsnakes/ppa</span><br></pre></td></tr></table></figure><p>需再次回车进行确认安装。</p><p>再次更新：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt update</span><br></pre></td></tr></table></figure><p>启用存储库后，请使用以下命令安装Python 3.8：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install python3.8</span><br></pre></td></tr></table></figure><p>通过键入以下命令验证是否成功安装：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">python3.8 -v</span><br><span class="line">Python 3.8.0</span><br></pre></td></tr></table></figure></li><li><p>然后安装一个nano（vim）：apt install nano （apt install vim）</p></li><li><p>启动corn：service cron start</p></li><li><p>然后执行： crontab -e   <img src="https://yml-img.ml:521/images/2021/11/18/image-20211118122715361.png" alt="image-20211118122715361" /><img src="https://yml-img.ml:521/images/2021/11/18/image-20211118122724479.png" alt="image-20211118122724479" />就可以用安装的nano编辑任务了。</p></li><li><p>具体任务可以看我的https://github.com/yml2213/meituan-shenquan</p></li><li><p>下面我来说说简单的步骤</p><ul><li><p>下载项目</p></li><li><p>删除不使用的文件，<a href="http://xn--mt-terminal-scripts-us69a.xn--pymt-wh5fn22agl5a.py">将mt-terminal-scripts.py改名为mt.py</a>，方便后期使用，其余文件均可以删除<img src="https://yml-img.ml:521/images/2021/11/18/image-20211118123851689.png" alt="image-20211118123851689" /></p></li><li><p>上穿到群晖目录<img src="https://yml-img.ml:521/images/2021/11/18/image-20211118124152803.png" alt="image-20211118124152803" /></p></li><li><p>多脚本可以根据这个做目录结构<img src="https://yml-img.ml:521/images/2021/11/18/image-20211118124329872.png" alt="image-20211118124329872" /></p></li><li><p>然后在ubuntu中执行脚本：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python3 mt.py</span><br></pre></td></tr></table></figure><p><img src="https://yml-img.ml:521/images/2021/11/18/111.jpg" alt="111" /></p></li><li><p>这样文件夹中就会出现很多txt文件（想在青龙跑的话，把所有的文件放到ql-scripts中，然后定时运行即可）<img src="https://yml-img.ml:521/images/2021/11/18/image-20211118125403226.png" alt="image-20211118125403226" /></p></li><li><p>继续教程：终端运行：whereis python3 来确定绝对位置<img src="https://yml-img.ml:521/images/2021/11/18/image-20211118125733139.png" alt="image-20211118125733139" /></p></li><li><p>然后运行： crontab -e  来编辑定时：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">0 11,14,17,21,0,1,2,3 * * *  /usr/bin/python3 /home/mt1/mt.py</span><br></pre></td></tr></table></figure><p><img src="https://yml-img.ml:521/images/2021/11/18/image-20211118130350354.png" alt="image-20211118130350354" />然后ctrl+o 保存，ctrl+x 退出就行了</p></li><li><p>这样你的定时就完成了，最终应该像这样的目录结构(借用我的虚拟机图片，道理是一样的)</p></li><li><p><img src="https://yml-img.ml:521/images/2021/11/18/image-20211118132108344.png" alt="image-20211118132108344" /></p></li></ul><h3 id="终于完成了以上的小目标"><a class="markdownIt-Anchor" href="#终于完成了以上的小目标"></a> 终于完成了以上的小目标</h3></li></ul><h2 id="完结撒花期待你发现更好玩的事情"><a class="markdownIt-Anchor" href="#完结撒花期待你发现更好玩的事情"></a> 完结撒花🎉，期待你发现更好玩的事情</h2><ul><li>搭建过程中，了解了docker的工作原理，虽然没能成功运行起来tailscale，但是总体还是很开心的</li><li>祝您一次成功</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> ubuntu </tag>
            
            <tag> crontab </tag>
            
            <tag> 学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vlw框架的配置、使用</title>
      <link href="/2021111119046/"/>
      <url>/2021111119046/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="背景"><a class="markdownIt-Anchor" href="#背景"></a> 背景</h2><h3 id="可爱猫真的是太挑系统了"><a class="markdownIt-Anchor" href="#可爱猫真的是太挑系统了"></a> 可爱猫真的是太挑系统了</h3><ul><li>我在腾讯云的2012r2 可以正常运行，到了自己的win7、win10、win2012r2均不能正常联动微信，win10没反应，win7根2012r2闪退，我一度怀疑自己的时候，大佬支持新的微信框架了<img src="https://yml-img.ml:521/images/2021/11/11/image-20211111191118867.png" alt="image-20211111191118867" /></li><li>真的是太好了，太好了  我是不想折腾可爱猫了，当时腾讯云部署的时候也折麽我好久，好久</li><li>废话不多说了，开搞<a href="http://a.vlmai.cn/">vlw</a></li><li>另外家庭宽带也可以用奥😍 我的腾讯云已经退款了（感谢คิดถึง、以及群里用户的思路与实践）</li></ul><h2 id="正式开始"><a class="markdownIt-Anchor" href="#正式开始"></a> 正式开始</h2><h3 id="准备工作"><a class="markdownIt-Anchor" href="#准备工作"></a> 准备工作</h3><ul><li>win 平台的电脑一个（测试win7可行）✅</li><li>vlw(<a href="http://a.vlmai.cn/">http://a.vlmai.cn/</a>)框架。我下载的免费版本✅<img src="https://yml-img.ml:521/images/2021/11/11/image-20211111192236689.png" alt="image-20211111192236689" /></li><li><a href="https://xyo.lanzoui.com/b0cknokbg">cn.sxyo.xYo_httpApi_WeChat.vlw.dl插件</a> ✅<img src="https://yml-img.ml:521/images/2021/11/11/image-20211111192613290.png" alt="image-20211111192613290" /></li><li>以及电脑上安装微信，好像没有微信会自动给你网页链接，让你下载✅</li></ul><h3 id="开始实际操作"><a class="markdownIt-Anchor" href="#开始实际操作"></a> 开始实际操作</h3><h3 id="关于vlw的配置"><a class="markdownIt-Anchor" href="#关于vlw的配置"></a> 关于vlw的配置</h3><ul><li>首先给他安个家，最好是英文、拼音目录（我没放中文目录，没测试是否可行）</li><li>把插件放到plugin目录下<img src="https://yml-img.ml:521/images/2021/11/11/image-20211111193323233.png" alt="image-20211111193323233" /></li><li>打开，登录微信，请忽略他的广告<img src="https://yml-img.ml:521/images/2021/12/16/image-52.png" alt="img" /></li><li>插件页面，点击安装即可安装我们放进去的插件，然后启用，打开设置<img src="https://yml-img.ml:521/images/2021/11/11/image-20211111194658630.png" alt="image-20211111194658630" /></li><li>插件设置（6是http）<img src="https://yml-img.ml:521/images/2021/11/11/image-20211111195311130.png" alt="image-20211111195311130" /></li><li>如果有防火墙记得开放相关端口，具体可以看小姐姐<a href="https://www.kejiwanjia.com/jiaocheng/zheteng/notes/30437.html">教程</a>（或者<a href="https://www.baidu.com/">百度一下，你就知道 (baidu.com)</a>、<a href="https://www.google.com/">Google</a>e），记得百度5分钟，群里（吹）俩小时</li></ul><h3 id="然后就是傻妞的配置了"><a class="markdownIt-Anchor" href="#然后就是傻妞的配置了"></a> 然后就是傻妞的配置了</h3><ul><li><p>首先，确定你是一键安装版（最新）的傻妞</p></li><li><p>可以 通过 “ list wx ” 命令查看你关于微信的设置<img src="https://yml-img.ml:521/images/2021/12/16/image-20211216135019090.png" alt="image-20211216135019090" /></p><ul><li><p>第一条：设置你的vlw地址    (set wx vlw_addr <a href="http://xn--eqrt2g">http://域名</a>:傻妞端口/wx/receive   ##对应第一条)</p></li><li><p>第二条：设置你vlw软件的 token    (软件里自定义的那个)</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">set wx vlw_addr http://域名:端口   ##你的vlw框架的域名+端口；服务器就ip+端口   #第一条</span><br><span class="line">set wx vlw_token 你的token        ##你设置的token 第二条</span><br></pre></td></tr></table></figure></li></ul></li><li><p>完成后重启傻妞，记得打开你的vlw框架服务</p></li><li><p>如果还不行的话，那就进入排错阶段（恭喜你，已经入坑了）</p></li></ul><h2 id="排错阶段"><a class="markdownIt-Anchor" href="#排错阶段"></a> 排错阶段</h2><h3 id="首先学习小姐姐的方法"><a class="markdownIt-Anchor" href="#首先学习小姐姐的方法"></a> 首先学习<a href="https://www.kejiwanjia.com/jiaocheng/zheteng/notes/30437.html">小姐姐的方法</a></h3><ul><li>首先访问你的傻妞远程地址，正常是404（也就框架的消息回调地址）<img src="https://yml-img.ml:521/images/2021/11/11/image-20211111203130720.png" alt="image-20211111203130720" /></li><li>然后是你的clw框架地址，（由于没有截图）正常可能是这样的<img src="https://yml-img.ml:521/images/2021/12/16/image-58.png" alt="img" /></li><li>都能访问的话，那就给傻妞发送   list wx   查看设置；根我的垃圾图片对比下</li><li>还不通的话，那就手动启动傻妞，然后微信发送命令，看看终端输出什么<ul><li>如果收不到，说明问题很大——慢慢检查吧</li><li>如果收到了，但是是这样的，说明傻妞设置的xlw框架有错误（跟我一样的问题）<img src="https://yml-img.ml:521/images/2021/11/11/9836DC0E038BAE617A6A37FBC464EB3B.jpg" alt="9836DC0E038BAE617A6A37FBC464EB3B" /></li><li>如果·····（没见过别的了，欢迎补充）</li><li>如果碰到这样的，请尝试这样设置地址： wx set vlw_addr <a href="http://xn--eqrt2g">http://域名</a>:端口<img src="https://yml-img.ml:521/images/2021/11/13/image-20211113162021924.png" alt="image-20211113162021924" /></li></ul></li></ul><h2 id="结尾"><a class="markdownIt-Anchor" href="#结尾"></a> 结尾</h2><h3 id="终于完成了教程又水了一篇"><a class="markdownIt-Anchor" href="#终于完成了教程又水了一篇"></a> 终于完成了教程（又水了一篇）</h3><ul><li>以上内容都是个人测试，如果哪里错了，请指出，有交流，才有收获</li><li>欢迎使用我搭建的<a href="https://img.menglei.xyz/">图床)</a></li><li>祝您一次成功</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> 傻妞 </tag>
            
            <tag> vlw机器人 </tag>
            
            <tag> 配置 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>sillyGirl（一键脚本）配置、使用、以及对接Nolan、青龙、以及设置返利的一些坑</title>
      <link href="/2021110833372/"/>
      <url>/2021110833372/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="沉迷薅羊毛无法自拔的我"><a class="markdownIt-Anchor" href="#沉迷薅羊毛无法自拔的我"></a> 沉迷薅羊毛无法自拔的我</h2><h5 id="赌狗一无所有-赌狗一无所有-赌狗一无所有"><a class="markdownIt-Anchor" href="#赌狗一无所有-赌狗一无所有-赌狗一无所有"></a> 赌狗一无所有 ！ 赌狗一无所有 ！ 赌狗一无所有 ！</h5><h5 id="赌狗一无所有-赌狗一无所有-赌狗一无所有-2"><a class="markdownIt-Anchor" href="#赌狗一无所有-赌狗一无所有-赌狗一无所有-2"></a> 赌狗一无所有 ！！ 赌狗一无所有 ！！ 赌狗一无所有 ！！</h5><h5 id="赌狗一无所有-赌狗一无所有-赌狗一无所有-3"><a class="markdownIt-Anchor" href="#赌狗一无所有-赌狗一无所有-赌狗一无所有-3"></a> 赌狗一无所有！！ ！赌狗一无所有！！ ！赌狗一无所有！！ ！</h5><h3 id="最近上了小姐姐的当直接积分抽奖积分都抽没了-啥也没抽到让我哭一会"><a class="markdownIt-Anchor" href="#最近上了小姐姐的当直接积分抽奖积分都抽没了-啥也没抽到让我哭一会"></a> 最近上了小姐姐的当，直接积分抽奖，积分都抽没了   啥也没抽到（让我哭一会）</h3><h3 id="赶上了小姐姐跟猫咪大佬的末班车上了车只能折腾最新的傻妞"><a class="markdownIt-Anchor" href="#赶上了小姐姐跟猫咪大佬的末班车上了车只能折腾最新的傻妞"></a> 赶上了小姐姐跟猫咪大佬的末班车，上了车，只能折腾最新的傻妞</h3><ol><li><p>最新的傻妞大佬整了个<strong>一键脚本</strong>，傻妞的安装配置也方便了许多；</p><ol><li>开始踩坑，一定使用<strong>root</strong>身份登陆<ul><li>群晖      <img src="https://yml-img.ml:521/images/2021/11/08/image-20211108163536303.png" alt="image-20211108163536303" /></li><li>ubuntu   <img src="https://yml-img.ml:521/images/2021/11/08/image-20211108163716108.png" alt="image-20211108163716108" /></li></ul></li></ol></li><li><p>然后按照大佬的最新教程：（可升级的一键安装版）</p><ul><li><p>国内用户升级先执行：set sillyGirl download_prefix <a href="https://ghproxy.com/">https://ghproxy.com/</a></p></li><li><p>一键安装：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">s=sillyGirl;a=arm64;if [[ $(uname -a | grep &quot;x86_64&quot;) != &quot;&quot; ]];then a=amd64;fi ;if [ ! -d $s ];then mkdir $s;fi ;cd $s;wget https://mirror.ghproxy.com/https://github.com/cdle/$&#123;s&#125;/releases/download/main/$&#123;s&#125;_linux_$a -O $s &amp;&amp; chmod 777 $s;pkill -9 $s;$(pwd)/$s </span><br></pre></td></tr></table></figure></li><li><p>迁移傻妞只需备份/etc/sillyGirl/sillyGirl.cache，删了等于重装<img src="https://yml-img.ml:521/images/2021/11/08/image-20211108193744735.png" alt="image-20211108193744735" /></p></li></ul></li><li><p>然后会安装超级多的东西</p> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">root@yml-ubuntu:/home/yml# sudo -i</span><br><span class="line">root@yml-ubuntu:~# ls</span><br><span class="line">snap</span><br><span class="line">root@yml-ubuntu:~# pwd</span><br><span class="line">/root</span><br><span class="line">root@yml-ubuntu:~# set sillyGirl download_prefix https://ghproxy.com/</span><br><span class="line">root@yml-ubuntu:~# s=sillyGirl;a=arm64;if [[ $(uname -a | grep &quot;x86_64&quot;) != &quot;&quot; ]];then a=amd64;fi ;if [ ! -d $s ];then mkdir $s;fi ;cd $s;wget https://mirror.ghproxy.com/https://github.com/cdle/$&#123;s&#125;/releases/download/main/$&#123;s&#125;_linux_$a -O $s &amp;&amp; chmod 777 $s;pkill -9 $s;$(pwd)/$s</span><br><span class="line">--2021-11-08 15:52:28--  https://mirror.ghproxy.com/https://github.com/cdle/sillyGirl/releases/download/main/sillyGirl_linux_amd64</span><br><span class="line">正在解析主机 mirror.ghproxy.com (mirror.ghproxy.com)... 132.226.238.71</span><br><span class="line">正在连接 mirror.ghproxy.com (mirror.ghproxy.com)|132.226.238.71|:443... 已连接。</span><br><span class="line">已发出 HTTP 请求，正在等待回应... 200 OK</span><br><span class="line">长度： 32643467 (31M) [application/octet-stream]</span><br><span class="line">正在保存至: “sillyGirl”</span><br><span class="line"></span><br><span class="line">sillyGirl                          100%[================================================================&gt;]  31.13M  4.15MB/s    用时 9.4s</span><br><span class="line"></span><br><span class="line">2021-11-08 15:52:39 (3.32 MB/s) - 已保存 “sillyGirl” [32643467/32643467])</span><br><span class="line"></span><br><span class="line">[GIN-debug] [WARNING] Running in &quot;debug&quot; mode. Switch to &quot;release&quot; mode in production.</span><br><span class="line"></span><br><span class="line"> - using env:export GIN_MODE=release</span><br><span class="line"> - using code:gin.SetMode(gin.ReleaseMode)</span><br><span class="line"></span><br><span class="line">2021/11/08 15:52:39.608 [W]  青龙登录失败：&#123;&quot;code&quot;:500,&quot;message&quot;:&quot;celebrate request validation failed&quot;&#125;</span><br><span class="line"></span><br><span class="line">[GIN-debug] GET    /wx/                      --&gt; github.com/cdle/sillyGirl/im/wxmp.init.0.func1 (1 handlers)</span><br><span class="line">[GIN-debug] POST   /wx/                      --&gt; github.com/cdle/sillyGirl/im/wxmp.init.0.func1 (1 handlers)</span><br><span class="line">[GIN-debug] PUT    /wx/                      --&gt; github.com/cdle/sillyGirl/im/wxmp.init.0.func1 (1 handlers)</span><br><span class="line">[GIN-debug] PATCH  /wx/                      --&gt; github.com/cdle/sillyGirl/im/wxmp.init.0.func1 (1 handlers)</span><br><span class="line">[GIN-debug] HEAD   /wx/                      --&gt; github.com/cdle/sillyGirl/im/wxmp.init.0.func1 (1 handlers)</span><br><span class="line">[GIN-debug] OPTIONS /wx/                      --&gt; github.com/cdle/sillyGirl/im/wxmp.init.0.func1 (1 handlers)</span><br><span class="line">[GIN-debug] DELETE /wx/                      --&gt; github.com/cdle/sillyGirl/im/wxmp.init.0.func1 (1 handlers)</span><br><span class="line">[GIN-debug] CONNECT /wx/                      --&gt; github.com/cdle/sillyGirl/im/wxmp.init.0.func1 (1 handlers)</span><br><span class="line">[GIN-debug] TRACE  /wx/                      --&gt; github.com/cdle/sillyGirl/im/wxmp.init.0.func1 (1 handlers)</span><br><span class="line">2021/11/08 15:52:39.622 [W]  未提供telegram机器人token</span><br><span class="line"></span><br><span class="line">[GIN-debug] POST   /wx/receive               --&gt; github.com/cdle/sillyGirl/im/wx.init.0.func3 (1 handlers)</span><br><span class="line">[GIN-debug] GET    /relay                    --&gt; github.com/cdle/sillyGirl/im/wx.init.0.func4 (1 handlers)</span><br><span class="line">[GIN-debug] GET    /wximage                  --&gt; github.com/cdle/sillyGirl/im/wx.init.0.func5 (1 handlers)</span><br><span class="line">2021/11/08 15:52:39.637 [Q] 开始尝试登录并同步消息...</span><br><span class="line">2021/11/08 15:52:39.638 [Q] 使用协议: iPad</span><br><span class="line">2021/11/08 15:52:41.276 [Q] 请使用手机QQ扫描二维码 (qrcode.png) :</span><br></pre></td></tr></table></figure><ul><li><p>这样安装后：</p><ul><li>群晖目录及文件（经测试，删除root目录下的sillyGirl不是丢失傻妞配置，仅供参考，应该所有的参数都在备份文件里：/etc/sillyGirl/sillyGirl.cache）  <img src="https://yml-img.ml:521/images/2021/11/08/image-20211108192545957.png" alt="image-20211108192545957" /></li><li>ubuntu目录及文件 <img src="https://yml-img.ml:521/images/2021/11/08/image-20211108193139132.png" alt="image-20211108193139132" /></li></ul></li></ul></li><li><p>安装完成后，请使用qq bot账号扫码，会绑定扫码qq为bot机器人（下面叫qqbot为a）</p></li><li><p>绑定后；qq bot（机器人a），可以跟自己对话，使用这个模式设置命令，不知道命令的看<a href="https://www.kejiwanjia.com/jiaocheng/zheteng/notes/31910.html">小姐姐这一篇（傻妞命令大全）</a></p></li><li><p>我习惯先设定自己qq大号（b）为管理员；命令请查询上边；然后对接青龙、nolan等</p></li></ol><h2 id="傻妞安装完了下面是对接环节"><a class="markdownIt-Anchor" href="#傻妞安装完了下面是对接环节"></a> 傻妞安装完了，下面是对接环节</h2><h3 id="对接青龙"><a class="markdownIt-Anchor" href="#对接青龙"></a> 对接青龙</h3><ul><li><p>请点击跳转<a href="https://www.kejiwanjia.com/jiaocheng/zheteng/notes/31910.html#i-2">sillyGirl傻妞命令大全 - 科技玩家 (kejiwanjia.com)</a> （小姐姐加锚点了，跳过去默认就是，不用翻了。小姐姐yyds）</p></li><li><p>懒人福利（是我没错了）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"># 对接青龙</span><br><span class="line">set qinglong host http://xxxxxx:xx ##一定要加&quot;http://&quot;，我第一次没加，就翻车了。</span><br><span class="line">set qinglong client_id xxxxxx ##第一步创建青龙应用获取的，直接复制粘贴</span><br><span class="line">set qinglong client_secret xxxxx ##第一步创建青龙应用获取的，直接复制粘贴</span><br><span class="line"># 使用命令</span><br><span class="line">^ql\s+config$</span><br><span class="line">^ql\s+envs$</span><br><span class="line">^ql\s+env\s+get\s+(.+)$</span><br><span class="line">^ql\s+env\s+find\s+(.+)$</span><br><span class="line">^ql\s+env\s+set\s+(\S+)\s+(.+)$</span><br><span class="line">^ql\s+env\s+remark\s+(\S+)\s+(.+)$</span><br><span class="line">^ql\s+env\s+disable\s+(.+)$</span><br><span class="line">^ql\s+env\s+enable\s+(.+)$</span><br><span class="line">^ql\s+crons$</span><br><span class="line">^ql\s+cron\s+status\s+(.+)$</span><br><span class="line">^ql\s+cron\s+run\s+(.+)$</span><br><span class="line">^ql\s+cron\s+stop\s+(.+)$</span><br><span class="line">^ql\s+cron\s+enable\s+(.+)$</span><br><span class="line">^ql\s+cron\s+disable\s+(.+)$</span><br><span class="line">^ql\s+cron\s+find\s+(.+)$</span><br><span class="line">^ql\s+cron\s+logs\s+(.+)$</span><br><span class="line">^ql\s+cron\s+hide\s+duplicate$</span><br><span class="line"># cookie状态查询命令</span><br><span class="line">ql cookie status </span><br><span class="line"># 下载单个脚本</span><br><span class="line">ql raw ?</span><br><span class="line"># 运行脚本</span><br><span class="line">ql task ?</span><br><span class="line"># 拉库指令</span><br><span class="line">ql repo ? 例：ql repo https://github.com/cdle/carry.git</span><br><span class="line">#关闭自动隐藏任务命令：</span><br><span class="line">set qinglong autoCronHideDuplicate false</span><br></pre></td></tr></table></figure></li></ul><h3 id="对接nolan"><a class="markdownIt-Anchor" href="#对接nolan"></a> 对接<a href="https://github.com/NolanHzy/nvjdc">Nolan</a></h3><ul><li>请看官方</li><li><a href="https://t.me/joinchat/dL-NJh1G6bc2OGM1">nolan群组</a><ul><li>对接XDD，需要填XDDUrl和XDDToken，青龙留空！！！ “Config”: []</li><li>对接青龙，需要把XDDUrl和XDDToken留空，同时填好Config里的青龙配置！</li><li>对接傻妞(芝士)，需要把XDDUrl和XDDToken还有Config都留空。</li><li>对接傻妞(芝士)：</li><li>给傻妞发 set jd_cookie nolan_addr <a href="http://xxx.xxx.xxx.xxx/">http://xxx.xxx.xxx.xxx</a>:xxxx</li><li>不管对接什么，首先确保网页可以打开并且没有报错！！！再问关于对接什么什么出现问题是以上提到的直接送走！</li><li>大佬被无脑问题搞得跑路了，请不要在大佬群里问无脑问题，提问前请看<a href="https://github.com/HandSonic/HTQ">提问的智慧</a></li></ul></li></ul><h3 id="对接更多"><a class="markdownIt-Anchor" href="#对接更多"></a> 对接更多···</h3><ul><li>更多请看<a href="https://www.kejiwanjia.com/jiaocheng/zheteng/notes/31910.html#i-3">小姐姐的教程</a></li></ul><h2 id="然后就是返利设置"><a class="markdownIt-Anchor" href="#然后就是返利设置"></a> 然后就是返利设置</h2><h3 id="我目前测试情况欢迎友好交流"><a class="markdownIt-Anchor" href="#我目前测试情况欢迎友好交流"></a> 我目前测试情况，欢迎友好交流</h3><h4 id="京东全自动转链接淘宝需要确认"><a class="markdownIt-Anchor" href="#京东全自动转链接淘宝需要确认"></a> 京东全自动转链接，淘宝需要确认</h4><h4 id="具体步骤还是移步小姐姐"><a class="markdownIt-Anchor" href="#具体步骤还是移步小姐姐"></a> 具体步骤还是移步<a href="https://www.kejiwanjia.com/jiaocheng/zheteng/notes/31949.html">小姐姐</a></h4><h5 id="1-我来说一下遇到的坑"><a class="markdownIt-Anchor" href="#1-我来说一下遇到的坑"></a> 1. 我来说一下遇到的坑</h5><ul><li>你需要在群里根据群机器人的验证正版，需要使用<strong>一键安装版本</strong>的傻妞</li><li>京东可以根据以下步骤：<ul><li>第一步（前提使用一键安装版本的傻妞）<br />#关闭禁用京东返利<br />set otto disable_jd false<br />#关闭禁用淘宝返利<br />set otto disable_tb false<br />#开启京东返利调试模式<br />set otto jd_debug true<br />#开启淘宝返利调试模式<br />set otto tb_debug true<br />#关闭机器人自我回复<br />set qq onself false</li><li>第二步<br />重启</li><li>第三步<br />发京东短链接、淘口令给你的机器人。<br />第一次配置请不要跳过，全部按照格式重新配置。<br />老用户请把js给删了。<br />配置好后只转发采集群消息，其他无视</li><li><img src="https://yml-img.ml:521/images/2021/11/08/5463083875949d4751e1cc1b4f0f865bedd02a6cbdde351.jpg" alt="5463083875949d4751e1cc1b4f0f865" /></li></ul></li></ul><h3 id="对接微信可爱猫"><a class="markdownIt-Anchor" href="#对接微信可爱猫"></a> 对接微信（可爱猫）</h3><ul><li>研究ing</li><li>我虚心请教各位大佬了</li><li>最后，欢迎来我的<a href="https://menglei.xyz/">博客</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> 傻妞 </tag>
            
            <tag> nalan </tag>
            
            <tag> 踩坑 </tag>
            
            <tag> 返利 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>github ac跑美团天天神券</title>
      <link href="/2021110458491/"/>
      <url>/2021110458491/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="背景"><a class="markdownIt-Anchor" href="#背景"></a> 背景</h2><h3 id="薅羊毛"><a class="markdownIt-Anchor" href="#薅羊毛"></a> 薅羊毛</h3><p>这段时间一直在薅羊毛，并且不能自拔，主要是东哥，但是偶然间发现了美团的羊毛，就记录一下</p><h2 id="来源"><a class="markdownIt-Anchor" href="#来源"></a> 来源</h2><ul><li><a href="https://github.com/Vonalien/meituan-shenquan">GitHub</a> 这个大佬的脚本</li><li>PS：大佬的教程已经非常详细了，我主要讲讲我遇到的坑，以及如何解决它 🔫</li></ul><h2 id="支持功能"><a class="markdownIt-Anchor" href="#支持功能"></a> 支持功能</h2><ol><li>每日自动签到领美团豆(可兑换红包必中符),每日可领七次</li><li>每日自动抢天天神券(道具库中若有任意面值必中符，则自动在设置的时间段使用。抢红包开放时间为北京时间11点,17点,21点)</li><li>自动将抢到的面值小于5元的天天神券兑换成红包豆(如满17-3面值的)</li><li>自动遍历红包库和道具库</li><li>自动查询豆子详情</li><li>接入第三方微信推送平台 <a href="https://www.pushplus.plus/">pushPlus</a> 和<a href="https://sct.ftqq.com/">server酱</a></li><li>自动查询红包池红包🧧详情</li><li>新增github action 脚本，无服务器等设备推荐使用</li><li>github action 版本兼容腾讯云函数（具体看作者教程）</li></ol><h2 id="git-ac配置步骤"><a class="markdownIt-Anchor" href="#git-ac配置步骤"></a> git ac配置步骤</h2><h4 id="1-注册账号"><a class="markdownIt-Anchor" href="#1-注册账号"></a> 1. 注册账号</h4><p>首先，你需要有一个<a href="https://github.com/">github</a>账号（没有的自行注册，最好使用国外邮箱注册 gmail、outlook类似的）</p><h4 id="2-fork仓库"><a class="markdownIt-Anchor" href="#2-fork仓库"></a> 2. fork仓库</h4><p>网页右上角fork（右上角）本项目到自己账号下,再顺便点个star吧</p><h4 id="3-设置变量"><a class="markdownIt-Anchor" href="#3-设置变量"></a> 3. 设置变量</h4><p>进入自己fork的仓库，找到自己仓库fork的项目进入，点击setting,如下图<img src="https://yml-img.ml:521/images/2021/11/04/image-20211104153656053.png" alt="image-20211104153656053" /></p><h4 id="4-新增秘密变量"><a class="markdownIt-Anchor" href="#4-新增秘密变量"></a> 4. 新增秘密变量</h4><p>点击secret选项，新建三个秘密变量 如下图所示，分别为<strong>MTTOKEN</strong>、<strong>PUSHPLUSTOKEN</strong>、<strong>SERVERKEY</strong>,变量新建后填写对应的值，分别为美团网页版获得的token,pushPlus官方用于微信推送提醒的token，server酱用于微信推送的token,<strong>这三个必填且不能为空！！</strong><img src="https://yml-img.ml:521/images/2021/11/04/image-20211104153825258.png" alt="image-20211104153825258" /></p><h4 id="5-以上三个数据的获取"><a class="markdownIt-Anchor" href="#5-以上三个数据的获取"></a> 5. 以上三个数据的获取</h4><ol><li><p>美团的token：</p><ul><li>点击这个<a href="https://www.meituan.com/">美团</a>，若谷歌浏览器登陆网页版美团若登录时的异常验证提交点不动，请更换safari等其他浏览器尝试即可.登录后在美团首页F12检查，点击network，刷新网页，拖进度条点击第一个请求，然后复制请求头中cookie 的token字段，注意只要token字段，格式为&quot;token={token};&quot;中的{token}字段，不带分号，更不是整个cookie。<img src="https://yml-img.ml:521/images/2021/11/04/image-20211104154232447.png" alt="image-20211104154232447" /></li><li>或者使用插件<a href="https://www.editthiscookie.com/">editthiscookie</a> 、<a href="https://chrome.google.com/webstore/detail/editthiscookie/fngmhnnpilhplaeedifhccceomclgfbg?hl=zh">Google拓展商店</a>，然后安装后点击这个<a href="https://www.meituan.com/">美团</a>，登陆后点击拓展，即可方便找到token<img src="https://yml-img.ml:521/images/2021/11/04/image-20211104154903357920d23752ecce876.png" alt="image-20211104154903357" /></li></ul></li><li><p>PUSHPLUSTOKEN：  点击<a href="https://www.pushplus.plus/">pushPlus</a> ，这里登陆后即可获得你的token</p></li><li><p>SERVERKEY：点击<a href="https://sct.ftqq.com/">server酱</a>，这里登陆后即可获得你的key（一天仅有5次免费通知额度，看需求使用）</p></li></ol><h4 id="6-修改配置文件可选"><a class="markdownIt-Anchor" href="#6-修改配置文件可选"></a> 6. 修改配置文件（可选）</h4><p>action.yml配置文件 选择性自定义修改（非必需)，回到fork的仓库首页，点击查看./github/workflows/action.yml文件，按照文件注释进行需要的修改，如选择性关闭某个推送或自定义用于企业微信等非默认推送渠道的webhook或者修改定时运行时间。<strong>本仓库默认配置定时schedule为11，17，21点，由于action排队机制，不一定会准时运行</strong>配置文件默认为同时开启pushPlus和server酱推送。配置文件如下图<img src="https://yml-img.ml:521/images/2021/11/04/image-20211104155430216.png" alt="image-20211104155430216" /></p><h4 id="7-测试action是否正常"><a class="markdownIt-Anchor" href="#7-测试action是否正常"></a> 7. 测试action是否正常：</h4><ul><li>本action 除了在指定的时间段运行外，可手动点击自己fork的仓库的主页的右上角的star按钮运行本脚本,点击一次star后刷新仓库首页，进入action页面，会发现已经触发了一次action脚本,以便用于测试。点击star运行功能只限fork的仓库所有者，其他非所有者无法点击，还请放心！<br />点击star后点击首页上方的action即可看到运行结果，若为succes,则脚本运行成功，若您未关闭推送，则可在手机端收到推送！ 后续action会在指定的时间段自动运行！</li><li>作者教程这里基本完成，但是我点击后无反应，没有通知，也没有运行，自己再次更新三个秘密变量后，可以正常时候，不能正常的也请自己更新变量测试。<img src="https://yml-img.ml:521/images/2021/11/04/image-20211104155751568.png" alt="image-20211104155751568" /></li></ul><h2 id="享受每天自动领券的快乐吧"><a class="markdownIt-Anchor" href="#享受每天自动领券的快乐吧"></a> 享受每天自动领券的快乐吧！</h2><ul><li>欢迎留言</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> 美团 </tag>
            
            <tag> github </tag>
            
            <tag> 羊毛 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>京东薅羊毛不完全指北</title>
      <link href="/20210927523/"/>
      <url>/20210927523/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="背景"><a class="markdownIt-Anchor" href="#背景"></a> 背景</h2><ul><li>由于每次有<strong>新朋友</strong>加入小分队就会问相关的一些问题，索性慢慢整理下来，也让后面加入的可以快速的了解整个流程</li><li>还有很多未涉及的地方，请多多指教</li><li>下文用“jd”代替“京东”</li></ul><h2 id="开始"><a class="markdownIt-Anchor" href="#开始"></a> 开始</h2><h3 id="开始接触jd羊毛是几个月前"><a class="markdownIt-Anchor" href="#开始接触jd羊毛是几个月前"></a> 开始接触jd羊毛是几个月前</h3><ul><li>当时偶然看到有人在讨论京东脚本，然后顺藤摸瓜就找到了大佬的github，然后就开始了一段薅羊毛之旅</li><li>本人是使用：黑群晖-docker青龙+傻妞+nolan短信验证 搭建的</li><li>现在qq、微信机器人已经具备群聊、私聊登录jd账号并获取cookie（后简称ck）的能力，后面会截图给出使用方法</li><li>可以在群里，或者加好友后发送“登陆”、“登录”都可以，根据提示进行登录，登陆后可以进行查询操作</li></ul><h3 id="加入小分队后要做的事"><a class="markdownIt-Anchor" href="#加入小分队后要做的事"></a> 加入小分队后要做的事</h3><h4 id="一-登陆"><a class="markdownIt-Anchor" href="#一-登陆"></a> 一: 登陆</h4><ol><li><p>私聊或在群里发送登陆”、“登录，机器人会回复你相关信息，请根据提示进行操作即可登录jd并获取ck</p><ul><li>短信登录的jd后，ck有效期一般为<strong>一个月</strong>，当ck过期后，需要重新进行短信登录</li><li>做好登陆后私聊我进行备注，没有备注的到期后自动踢🦶“下车”</li><li>ck包含你的jd信息，不要轻易随便给陌生人你的ck（除非信得过的人，比如我）</li><li>ck可以通过更改jd密码更换</li><li><strong>记得关闭设置–支付设置–免密支付（没开通更好）</strong></li></ul></li><li><p>说说微信、qq的<strong>机器人</strong>可以做什么</p><ul><li>帮你登录jd并获取ck，自动上传到服务器进行任务</li><li>可以进行性价比比价<ul><li>你发送京东链接到群里，机器人会自动帮你对比商品价格</li><li>淘宝链接还没有调试好，可以先发给我，我给你转链接</li></ul></li><li>可以自动搜索并领<strong>取隐藏优惠券</strong><ul><li>在商品界面，点击“复制连击”，把链接发到群里，机器人会自动领取优惠券，然后点击机器人的链接进行下单</li><li>淘宝链接不回复的私聊我</li></ul></li><li>凡是通过机器人发送链接下单的，私聊我会有<strong>惊喜红包</strong>呦</li><li>可以进行娱乐游戏：成语接龙等</li><li>可以呼唤“小爱同学”</li><li>下面是登录教程：<ul><li>对机器人说 ”登录“，然后根据机器人回复输入”手机号“”验证码“，机器人会自动帮你登录，当提示登录成功后即完成，然后你可以发送查询，查询你的jd相关信息，如下图所示：</li><li>发送登录<img src="https://yml-img.ml:521/images/2022/02/28/PBx23b.jpg" alt="image-20210927162238334" /></li></ul></li><li>当你的ck过期（一般一个月）后，你就需要重新按照以上步骤重新登录</li></ul></li></ol><h4 id="二登陆可以干什么为什么要登陆"><a class="markdownIt-Anchor" href="#二登陆可以干什么为什么要登陆"></a> 二：登陆可以干什么（为什么要登陆）</h4><h5 id="原理"><a class="markdownIt-Anchor" href="#原理"></a> 原理</h5><ul><li>京东有许多地方需要手动进行操作才能获得相应的物品<ul><li>例如：京东农场：需要手动浇水</li><li>牧场需要买白菜，小鸡仔等一系列操作</li><li>现在全部使用脚本，定时进行这些操作，即可解放双手，提高效率</li></ul></li></ul><h5 id="为什么有些需要手动点击进去"><a class="markdownIt-Anchor" href="#为什么有些需要手动点击进去"></a> 为什么有些需要手动点击进去</h5><ul><li>京东有很多小活动、任务、等</li><li>有的需要创建你的账号、有的需要名字、有的需要手动选择想要的物品</li><li>所以很多活动需要你<strong>手动</strong>进去，完成<strong>新手教程</strong>后，脚本才能给你跑，就是说需要你开启活动</li><li>目前可以根据这个图片指引，手动参加活动（图片很长，请仔细观看，有的活动找不到没关系，跳过就行了）<ul><li><img src="https://yml-img.ml:521/images/2022/02/28/7LnxCq.jpg" alt="WechatIMG575" /></li></ul></li></ul><h5 id="我不想用了怎么退出"><a class="markdownIt-Anchor" href="#我不想用了怎么退出"></a> 我不想用了？怎么退出</h5><ul><li>只需要私聊我，然后就可以退出</li></ul><h2 id="怎么购买"><a class="markdownIt-Anchor" href="#怎么购买"></a> 怎么购买？</h2><h3 id="我给大家演示下如何购买商品会得到最大优惠"><a class="markdownIt-Anchor" href="#我给大家演示下如何购买商品会得到最大优惠"></a> 我给大家演示下，如何购买商品，会得到最大优惠</h3><ol><li>首先你需要完成上面的步骤，然后发送查询，机器人会回复你<ol><li><p><img src="https://yml-img.ml:521/images/2022/02/28/Q4LNPr.jpg" alt="image-20211109155838262" /></p></li><li><p>京豆是可以抵现金的，详细请看官方<a href="https://help.jd.com/user/issue/167-331.html">京豆使用规则</a><img src="https://yml-img.ml:521/images/2022/02/28/KsM7jv.jpg" alt="image-20211109160041434" /></p></li><li><p>你有惊喜的红包，但是不能在京东使用，可以这样</p><ol><li><p>京东选择你想要的产品，比如说天冷了，你买一条秋裤（再不穿妈妈该揍你了）</p></li><li><p>你在京东看上了一条<img src="https://yml-img.ml:521/images/2022/02/28/sA2GO3.jpg" alt="image-20211109160326836" /></p></li><li><p>然后分享——复制链接——发到群里<img src="https://yml-img.ml:521/images/2022/02/28/N62XVW.jpg" alt="image-20211109180450735" /></p></li><li><p>在点击“去抢购”</p></li><li><p>再打开的链接中（或者跳转到京东）：点击添加到购物车<img src="https://yml-img.ml:521/images/2022/02/28/RxTTqc.jpg" alt="image-20211109160707906" /></p></li><li><p>然后打开“惊喜”app（没登陆的京东一键登录）</p></li><li><p>点击购物车——然后去结算</p></li><li><p>然后选择使用京豆（这里叫喜豆，其实是一比一的），在选择红包<img src="https://yml-img.ml:521/images/2022/02/28/PrsCeD.jpg" alt="image-20211109161000268" /></p></li><li><p>ok了，一个订单就完成了</p></li></ol></li></ol></li></ol><h3 id="这是我的部分订单"><a class="markdownIt-Anchor" href="#这是我的部分订单"></a> 这是我的部分订单：</h3><ul><li><img src="https://yml-img.ml:521/images/2022/02/28/WyHHGG.jpg" alt="1311636449290_.pic" /></li><li><img src="https://yml-img.ml:521/images/2022/02/28/brbJ54.jpg" alt="1271636449287_.pic" /></li><li><img src="https://yml-img.ml:521/images/2022/02/28/kZiSJv.jpg" alt="1281636449288_.pic" /></li><li><img src="https://yml-img.ml:521/images/2022/02/28/CZikJK.jpg" alt="1291636449289_.pic" /><br />-<img src="https://yml-img.ml:521/images/2022/02/28/rg8pHc.jpg" alt="1301636449289_.pic" /></li></ul><h2 id="三下面是一些可能有用的"><a class="markdownIt-Anchor" href="#三下面是一些可能有用的"></a> 三：下面是一些可能有用的</h2><ul><li>登录后你的账号会存在我的群辉-docker–qinglong中，然后青龙（qinglong）会根据其中的脚本给你做任务，最明显的特征就是<strong>京豆</strong>每天都会涨（不放心可以不登录）</li><li>你最好需要下载的app有**“京喜”、“京东极速版”**app</li></ul><ol><li><p>下面按个看一下</p><ul><li><p><strong>”京东“app</strong></p><ul><li>首页搜索   <s><em>“玩一玩”</em></s> （改名了）  “边玩边赚” 四个字，把里面所有的链接点一遍，选择商品、建立账号啥的，然后脚本会给你做这些任务（参考上面的图片）<img src="https://yml-img.ml:521/images/2022/02/28/Ax7eKo.jpg" alt="111" /></li><li>红包提现：京东玩一玩–领现金  ，点击即可提现到微信，第一次2元。第二次可以提现10元，第三次30元 ；反正我提了不少了<img src="https://yml-img.ml:521/images/2022/02/28/eysePu.jpg" alt="image-20210927160813550" /></li></ul></li><li><h4 id="京喜app"><a class="markdownIt-Anchor" href="#京喜app"></a> “京喜”app</h4><ul><li>很多红包是仅限在京喜app中使用的，你下载京喜后，登录你的京东账号，你就会发现头像下方有红包，可能是几块钱、也可能10几块，  但是你要记得，这个红包🧧周期短，可能每天过期几块钱，当你买东西花光了这里的红包，过几天他就会自动增长到几块钱（不知道卖啥的话，就买纸，哈哈哈哈哈）</li><li>京喜牧场：牧场中有鸡蛋，鸡蛋可以换相应的东西，根据自身需求换购<img src="https://yml-img.ml:521/images/2022/02/28/0ZvwjO.jpg" alt="image-20210927155245617" /></li><li>京喜工厂： 可以选择商品，脚本会自动给你跑（比京东工厂靠谱感觉）</li><li>京喜财富岛：可以换购商品，自行查看</li><li>京喜还有很多不知道的，欢迎补充</li></ul></li><li><p><strong>”京东极速版“app</strong></p><ul><li>这个app很爽呀，毕竟白嫖的多</li><li>正常下载，登录京东账号</li><li>下面有金币XXXX（个）–这里脚本每天会给你做任务，你会获得金币   10000=1元，基本每天可以获得1元左右，点击进入可以看到换红包🧧界面（推荐换购50元的）；红包属于无门槛宏红包，比如说你看到一个51元的产品，你可以花费1元+刚才的50元红包进行购买<img src="https://yml-img.ml:521/images/2022/02/28/NZoL7p.jpg" alt="image-20210927160151742" /><img src="https://yml-img.ml:521/images/2022/02/28/mJQfMO.jpg" alt="image-20210927160159678" /></li><li>别的我没怎么注意，这个金币已经很好了</li></ul></li></ul></li></ol><h2 id="最后所有脚本来源于网络请自行判断风险"><a class="markdownIt-Anchor" href="#最后所有脚本来源于网络请自行判断风险"></a> 最后，所有脚本来源于网络，请自行判断风险</h2><ul><li><h4 id="本人不做付费代挂也不提倡大家去付费代挂"><a class="markdownIt-Anchor" href="#本人不做付费代挂也不提倡大家去付费代挂"></a> <strong>本人不做付费代挂，也不提倡大家去付费代挂</strong></h4></li><li><h4 id="本人不做付费代挂也不提倡大家去付费代挂-2"><a class="markdownIt-Anchor" href="#本人不做付费代挂也不提倡大家去付费代挂-2"></a> <strong>本人不做付费代挂，也不提倡大家去付费代挂</strong></h4></li><li><h4 id="本人不做付费代挂也不提倡大家去付费代挂-3"><a class="markdownIt-Anchor" href="#本人不做付费代挂也不提倡大家去付费代挂-3"></a> <strong>本人不做付费代挂，也不提倡大家去付费代挂</strong></h4></li><li><p>如果你想支持我的话，可以通过群里机器人的链接购物，教程已经很清楚了；如何使用</p></li><li><p>或者直接打赏</p></li><li><p>最后，祝您愉快</p></li></ul><h2 id="结束撒花"><a class="markdownIt-Anchor" href="#结束撒花"></a> 结束，撒花🎉</h2><ul><li>祝您开心每一天</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> 傻妞 </tag>
            
            <tag> 京东 </tag>
            
            <tag> 薅羊毛 </tag>
            
            <tag> 指北 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>傻妞、青龙、京东短信验证配置与使用</title>
      <link href="/2021092459621/"/>
      <url>/2021092459621/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="开始前的话"><a class="markdownIt-Anchor" href="#开始前的话"></a> 开始前的话</h2><p><strong>背景</strong> 由于之前的青龙2.2教程已经失效，自己也懒得更新，索性就用最新（9-27可用）的东西做一个新的教程，旨在备忘，如果能够帮到你，也是极好的呢！</p><h2 id="那就开始吧"><a class="markdownIt-Anchor" href="#那就开始吧"></a> 那就开始吧</h2><h3 id="首先是青龙的教程"><a class="markdownIt-Anchor" href="#首先是青龙的教程"></a> 首先是青龙的教程</h3><ul><li><p>我懒得写了，因为有现成的教程，超级细心地那种，<a href="https://www.kejiwanjia.com/zheteng/1143.html">传送门</a></p></li><li><p>还是有几个小地方需要注意，我都用加粗的**（括号）**解释说明了，下面我直接搬 ”小姐姐“ 的教程说了，上面有传送门链接</p></li><li><p>背景：之前写了关于lxk0301大佬的脚本部署教程，但是因为大佬没有搭建面板，很多小伙伴觉得使用起来不方便。对于青龙面板的部署教程呼声较高。今天有时间，简单写一下部署过程。其实，如果你已经成功部署过lxk0301大佬的脚本，面板的部署也是举一反三，可以很快搭建。</p></li></ul><h2 id="更新内容"><a class="markdownIt-Anchor" href="#更新内容"></a> 更新内容：</h2><p>8月20日：今天重新拉了青龙镜像部署，之前的镜像太老了，部署后升级各种出错，干脆重新来过吧。</p><h2 id="部署步骤"><a class="markdownIt-Anchor" href="#部署步骤"></a> 部署步骤：</h2><p>重要前提：需要梯子，自己备一把，国内github速度感人，容易拉取失败。</p><p>一、**安装镜像文件：**打开群晖docker-注册表-搜索“qinglong”，下载安装”whyour/qinglong”，等待几分钟安装。</p><p><img src="https://yml-img.ml:521/images/2021/09/27/image-69.png" alt="img" /></p><p>二、<strong>新建docker容器映射文件夹</strong>：用来存储log、配置等文件。</p><p>具体文件目录树如下：</p><p>这个&quot;QL1&quot;文件夹可以根据自己的喜欢来命名，但尽可能简单，以后命令经常可能用到。</p><p><img src="https://yml-img.ml:521/images/2021/09/27/image-64-20210927123744174.png" alt="img" /></p><p>ninja是非必需，为ninja扫码配置，建议先映射，万一你要用呢？</p><p><strong>（可以不用ninja了，后面配置傻妞跟短信登录）</strong></p><p><strong>（可以不用ninja了，后面配置傻妞跟短信登录）</strong></p><p><strong>（可以不用ninja了，后面配置傻妞跟短信登录）</strong></p><p>三、<strong>新建容器</strong>：配置卷和端口。</p><p>1、容器名称设置为：<strong>QL</strong>1，然后点击高级设置。</p><p>QL1是容器名称可以自定义，但尽可能简单，使用中命令要用到。如果经常重启nas，可以开启“自动重新启动”</p><p><img src="https://yml-img.ml:521/images/2021/09/27/image-62.png" alt="img" /></p><p><img src="https://yml-img.ml:521/images/2021/09/27/image-63.png" alt="img" /></p><p>2、选择存储空间，建立好文件夹映射,参考下图</p><p>ninja是非必需，为ninja扫码配置，建议先映射，万一你要用呢？<strong>(无需配置ninja)</strong></p><p><img src="https://yml-img.ml:521/images/2021/09/27/image-65.png" alt="img" /></p><p>3、设置好面板端口：5700。然后应用自启动容器。等几分钟查看，是否面板配置成功。</p><p>5701为ninja扫码端口，非必需，但建议先配置上，后期备用。</p><p><strong>（请删除5701的端口，后面短信会使用，这里删除就可以了）</strong></p><p><strong>（请删除5701的端口，后面短信会使用，这里删除就可以了）</strong></p><p><strong>（请删除5701的端口，后面短信会使用，这里删除就可以了）</strong></p><p><img src="https://yml-img.ml:521/images/2021/09/27/image-66.png" alt="img" /></p><p><strong>四、获取面板登录密码</strong></p><p>根据自己的群晖ip端口5700访问http://群晖IP:5700，初始用户名为admin，密码为 adminadmin。根据提示，找到对应文件查询自动生成的密码。然后重新登录。（无法打开的请群辉安装文本编辑器即可打开，或者下载查看）</p><p><img src="https://yml-img.ml:521/images/2021/09/27/image-67.png" alt="img" /></p><p>五、<strong>大功告成</strong>。可以根据自己的需要添加仓库和脚本文件。青龙大佬的自定义功能比较强，小白建议慢慢摸索。了解底层逻辑后，用顺手了，是非常不错的脚本管理工具。</p><p><img src="https://yml-img.ml:521/images/2021/09/27/image-70.png" alt="img" /></p><h3 id="傻妞配置"><a class="markdownIt-Anchor" href="#傻妞配置"></a> 傻妞配置</h3><ul><li><p>我也懒得写了，因为有现成的教程，超级细心地那种，<a href="https://www.kejiwanjia.com/jiaocheng/19887.html">传送门</a></p></li><li><p>还是有几个小地方需要注意，我都用加粗的**（括号）**解释说明了，下面我直接搬 ”小姐姐“ 的教程说了，上面有传送门链接</p></li></ul><p>**背景：**xdd已经是被老年人丢弃了，重新开发了“傻妞”。傻妞不傻，适用于青龙2.9+。其实本来不想玩的，但是有一天摸鱼重新安装了一下新版，发现傻妞不听话，我就不开心了。得不到的永远在骚动，越不理我越想玩😂。</p><ul><li>**项目频道：**<a href="https://t.me/kczz2021">https://t.me/kczz2021</a></li><li>**项目地址：**<a href="https://github.com/cdle/sillyGirl">https://github.com/cdle/sillyGirl</a></li><li>**项目扩展地址：**<a href="https://github.com/ufuckee/jd_cookie">https://github.com/ufuckee/jd_cookie</a></li><li>**推荐关注频道：**<a href="https://t.me/CollectWool">https://t.me/CollectWool</a><br />引用部分参考资料</li></ul><p><strong>傻妞特色：</strong></p><ul><li>基本都是命令</li><li>和东哥无关，可自行开发扩展<ul><li>目前ufuckee大佬的扩展可以用</li></ul></li><li>支持qq，tg</li><li>可对接青龙2.9+版本</li><li><strong>（可以接入短信，扫码无法使用后最简单的登录方式了）</strong></li></ul><h2 id="解题思路"><a class="markdownIt-Anchor" href="#解题思路"></a> 解题思路</h2><p><strong>群晖安装go环境👉拉库编译👉运行初始化配置👉更多姿势</strong></p><p>老规矩，上图文，好下饭。🍚🥢</p><h2 id="安装go环境"><a class="markdownIt-Anchor" href="#安装go环境"></a> 安装go环境</h2><p>拉库编译和XDD真的没有太大区别。前面地安装go环境直接从xdd搬过来了，主要是方便新人朋友食用。但是这里改了一下安装go的路径，因为群晖的系统空间太小了。我本人已经把go从系统空间挪出来了。</p><h3 id="一-群晖安装gcc"><a class="markdownIt-Anchor" href="#一-群晖安装gcc"></a> 一、群晖安装gcc</h3><ol><li>新增套件来源：<a href="https://www.cphub.net">https://www.cphub.net</a></li><li>先后安装4个套件：Easy Bootstrap Installer、Perl、iPKGui、Git server</li><li>然后ssh连接群晖，输入下面👇的命令</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo -i ##root权限ipkg install gcc ##安装gcc</span><br></pre></td></tr></table></figure><blockquote><p><a href="https://www.kejiwanjia.com/circle/10888.html">群晖7.0安装bootstrap的方法（来自玩家@momo）</a></p><p>群晖7.0安装bootstrap看下玩家@momo 的教程</p></blockquote><p><img src="https://yml-img.ml:521/images/2021/09/27/1-4.png" alt="img" />添加源</p><p><img src="https://yml-img.ml:521/images/2021/09/27/image-44.png" alt="img" /></p><p><img src="https://yml-img.ml:521/images/2021/09/27/3-1.png" alt="img" />gcc安装</p><h3 id="二-安装go环境"><a class="markdownIt-Anchor" href="#二-安装go环境"></a> 二、安装go环境</h3><blockquote><p>主要引用大佬原教程，我只是结合自己的实践情况，稍微做点修改和补充。</p><p>学自“夕阳红Club”频道</p></blockquote><h4 id="1-去go官网找到适合你cpu架构的go安装包链接-httpsgolanggooglecndlgo1167linux-amd64targz-以群晖amd64为"><a class="markdownIt-Anchor" href="#1-去go官网找到适合你cpu架构的go安装包链接-httpsgolanggooglecndlgo1167linux-amd64targz-以群晖amd64为"></a> 1、去<a href="https://golang.google.cn/dl/">go官网</a>找到适合你cpu架构的<a href="https://golang.google.cn/dl/go1.16.7.linux-amd64.tar.gz">go安装包链接</a> (<a href="https://golang.google.cn/dl/go1.16.7.linux-amd64.tar.gz">https://golang.google.cn/dl/go1.16.7.linux-amd64.tar.gz</a>) ，以群晖amd64为🌰。</h4><p>因本人群晖刚好是amd64的，可以直接抄大佬🧍‍♂️作业。请务必选择适合自己的版本。</p><p><img src="https://yml-img.ml:521/images/2021/09/27/image-38.png" alt="img" />引用自“夕阳红Club”频道</p><h4 id="2-ssh链接群晖分别执行下面命令"><a class="markdownIt-Anchor" href="#2-ssh链接群晖分别执行下面命令"></a> 2、ssh链接群晖，分别执行下面命令👇</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo -i ##root权限cd /volume1/docker &amp;&amp; wget https://golang.google.cn/dl/go1.16.7.linux-amd64.tar.gz -O go1.16.7.linux-amd64.tar.gz ##docker目录下载⏬tar -xvzf go1.16.7.linux-amd64.tar.gz ##解压vi /etc/profile ##打开文件，设置环境变量，输入“i”进行编辑文件，最后一行输入下面的变量，全选复制进去。export GO111MODULE=onexport GOPROXY=https://goproxy.cnexport GOROOT=/volume1/docker/goexport GOPATH=/volume1/docker/go/pathexport PATH=$PATH:$GOROOT/bin:$GOPATH/bin##输入后，按“Esc”，再输入&quot;:wq&quot;,按&quot;Enter&quot;，保存并退出。source /etc/profilego env #运行后，出现下图运行状态，表示装好了。</span><br></pre></td></tr></table></figure><p><img src="https://yml-img.ml:521/images/2021/09/27/image-178-20210927124448705.png" alt="img" /></p><h2 id="拉库编译"><a class="markdownIt-Anchor" href="#拉库编译"></a> 拉库编译</h2><h3 id="一-拉-傻妞库拉ufuckee扩展库"><a class="markdownIt-Anchor" href="#一-拉-傻妞库拉ufuckee扩展库"></a> 一、拉 “傻妞”库，拉ufuckee扩展库</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd /volume1/docker/QL/ ##cd到青龙容器映射的QL目录，根据自己的路径改git clone https://github.com/cdle/sillyGirl.git #此时你的QL目录下会新增文件夹sillyGirl</span><br></pre></td></tr></table></figure><h3 id="二-sillygirl根目录新建devgo"><a class="markdownIt-Anchor" href="#二-sillygirl根目录新建devgo"></a> 二、sillyGirl根目录新建dev.go</h3><p>1、新建dev.go，用命令<code>touch dev.go</code>。或者直接用命令<code>vi dev.go</code>，键盘按字母i进入编辑。</p><p>2、输入下面的代码，按键盘Esc退出编辑，输入<code>:wq</code>保存并退出。注释的已经删库，我留作纪念。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">package mainimport (//青龙2.9机器人_ &quot;github.com/cdle/sillyGirl/develop/qinglong&quot; //京东账号_ &quot;github.com/cdle/sillyGirl/develop/jd_cookie&quot;//腾讯QQ_ &quot;github.com/cdle/sillyGirl/im/qq&quot;//Te Legram_ &quot;github.com/cdle/sillyGirl/im/tg&quot;)//京东资产 查询//_&quot;github.com/cdle/sillyGirl/develop/jd_asset&quot;//京东互助//_&quot;github.com/cdle/sillyGir/develop/jd_help&quot;//jd_ wskey转换//_&quot;github.com/cdle/sillyGirl/develop/jd_wskey&quot;</span><br></pre></td></tr></table></figure><p>知道你们懒，我也直接给了文件，文末下载或tg频道自取并保存在sillyGirl根目录</p><p><img src="https://yml-img.ml:521/images/2021/09/27/image-179-20210927124135579.png" alt="img" /></p><h3 id="三-拉扩展ufuckee大佬的jd_cookie然后编译傻妞"><a class="markdownIt-Anchor" href="#三-拉扩展ufuckee大佬的jd_cookie然后编译傻妞"></a> 三、拉扩展，ufuckee大佬的jd_cookie，然后编译“傻妞”</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd /volume1/docker/QL/sillyGirl/develop ##cd到傻妞的扩展目录developgit clone https://github.com/ufuckee/jd_cookie.git ##拉扩展库cd /volume1/docker/QL/sillyGirl &amp;&amp; go build ##cd回sillyGirl目录并编译chmod 777 sillyGirl ##给权限，不给好像也能用./sillyGirl ##首次运行并生成配置文件</span><br></pre></td></tr></table></figure><p>此时会弹出二维码，扫码绑定的是你的qqbot。<strong>(qqbot——是一个机器人账号，请使用qq小号扫码，然后另一个qq账号设置成管理员)</strong><br /><img src="https://yml-img.ml:521/images/2021/09/27/image-180.png" alt="img" /></p><h2 id="运行初始化配置"><a class="markdownIt-Anchor" href="#运行初始化配置"></a> 运行初始化配置</h2><h3 id="一-先去青龙创建应用等下绑定需要使用client-id-client-secret"><a class="markdownIt-Anchor" href="#一-先去青龙创建应用等下绑定需要使用client-id-client-secret"></a> 一、先去青龙创建应用，等下绑定需要使用Client ID、Client Secret</h3><p>需要青龙2.9+以上版本才支持</p><p><img src="https://yml-img.ml:521/images/2021/09/27/image-181.png" alt="img" /></p><h3 id="二-用qqbot给qqbot发送命令进行初始化配置"><a class="markdownIt-Anchor" href="#二-用qqbot给qqbot发送命令进行初始化配置"></a> 二、用qqbot给qqbot发送命令进行初始化配置</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">##设置qq管理员 可以多个，用&amp;连接，请注意空格set qq masters qq1&amp;qq2##设置tgbotset tg token xxxxx##设置tg管理员 可以多个，用&amp;连接，请注意空格set tg masters id1&amp;id2##对接青龙set qinglong host http://xxxxxx:xx ##一定要加&quot;http://&quot;，我第一次没加，就翻车了。set qinglong client_id xxxxxx ##第一步创建青龙应用获取的，直接复制粘贴set qinglong client_secret xxxxx ##第一步创建青龙应用获取的，直接复制粘贴</span><br></pre></td></tr></table></figure><p><img src="https://yml-img.ml:521/images/2021/09/27/image-185.png" alt="img" /></p><p>初始化配置后，在ssh工具中🔧按键盘ctrl+c退出，重新输入命令<code>./sillyGirl</code>启动，查看一下连接青龙状态。</p><p><img src="https://yml-img.ml:521/images/2021/09/27/image-183.png" alt="img" /></p><p>初始化配置时，不建议给qqbot发重启命令，会导致傻妞自动重启并静默运行，万一有问题又要杀进程。</p><h2 id="更多姿势"><a class="markdownIt-Anchor" href="#更多姿势"></a> 更多姿势</h2><h3 id="一-来自官方傻妞教学"><a class="markdownIt-Anchor" href="#一-来自官方傻妞教学"></a> 一、来自<a href="https://t.me/kczz2021">官方傻妞教学</a></h3><h4 id="1-傻妞禁用自己回复自己三个步骤给qqbot发"><a class="markdownIt-Anchor" href="#1-傻妞禁用自己回复自己三个步骤给qqbot发"></a> <strong>1、傻妞禁用自己回复自己三个步骤：(给qqbot发）</strong></h4><p>1.升级 2.<code>set qq onself false</code> 3.重启 （自动静默运行）</p><h4 id="2-sillygirl注销qq命令"><a class="markdownIt-Anchor" href="#2-sillygirl注销qq命令"></a> <strong>2、sillyGirl注销qq命令：</strong></h4><p><code>delete qq session.token</code> ，重新运行扫码重新即可。</p><h4 id="3-sillygirl-d-等于重启并静默运行"><a class="markdownIt-Anchor" href="#3-sillygirl-d-等于重启并静默运行"></a> <strong>3、<code>./sillyGirl -d</code> 等于重启并静默运行</strong></h4><h4 id="4-sillygirl-telegram-bot-代理命令set-tg-url-xxxxx"><a class="markdownIt-Anchor" href="#4-sillygirl-telegram-bot-代理命令set-tg-url-xxxxx"></a> 4、sillyGirl telegram bot 代理命令，<code>set tg url xxxxx</code></h4><h3 id="二-jd相关"><a class="markdownIt-Anchor" href="#二-jd相关"></a> 二、JD相关</h3><h4 id="1-jd账号绑定qq号码"><a class="markdownIt-Anchor" href="#1-jd账号绑定qq号码"></a> 1、JD账号绑定qq号码</h4><p><code>set pinQQ pt_pin qq</code>号码，🌰：set pinQQ jd_xxxxxx 123456</p><h4 id="2-取消jd账号绑定qq号码"><a class="markdownIt-Anchor" href="#2-取消jd账号绑定qq号码"></a> 2、取消JD账号绑定qq号码</h4><p><code>delete pinQQ pt_pin</code>，🌰：delete pinQQ jd_xxxxxx</p><h4 id="3-解绑im账号-对应的所有京东账号"><a class="markdownIt-Anchor" href="#3-解绑im账号-对应的所有京东账号"></a> 3、解绑im账号 对应的所有京东账号：</h4><p><code>jd unbind im</code>，🌰：jd unbind 10000</p><h4 id="4-常用命令"><a class="markdownIt-Anchor" href="#4-常用命令"></a> 4、常用命令</h4><ul><li>查询：命令&quot;<code>查询 1</code>&quot;，注意空格，顺序为青龙的ck排序</li><li>资产推送：命令&quot;<code>资产推送</code>&quot;，会根据绑定的qq一对一推送</li></ul><h3 id="三-其他命令直接给qqot发送命令你就获得了所有"><a class="markdownIt-Anchor" href="#三-其他命令直接给qqot发送命令你就获得了所有"></a> 三、其他命令：直接给qqot发送&quot;命令&quot;，你就获得了所有。</h3><h4 id="1-设置qq群"><a class="markdownIt-Anchor" href="#1-设置qq群"></a> 1、设置qq群</h4><p><code>set qq groupCode 群号</code>，🌰：set qq groupCode 654321</p><h3 id="四-其他玩法"><a class="markdownIt-Anchor" href="#四-其他玩法"></a> 四、其他玩法</h3><h4 id="1-杀掉sillygirl-进程"><a class="markdownIt-Anchor" href="#1-杀掉sillygirl-进程"></a> 1、杀掉sillyGirl 进程</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ps -A|grep sillyGirl ##显示进程号kill -9 xxxxxx ##杀掉进程，精准打击👊</span><br></pre></td></tr></table></figure><p><img src="/blob:https:/www.kejiwanjia.com/3dc6856f-2e63-4dbf-9788-3ea0ae14b5ab" alt="img" /></p><h4 id="2-安装boltbrowser-可用于查看管理-sillygirlcache"><a class="markdownIt-Anchor" href="#2-安装boltbrowser-可用于查看管理-sillygirlcache"></a> 2、安装boltbrowser 可用于查看管理 sillyGirl.cache</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">go install github.com/br0xen/boltbrowser@2.1</span><br></pre></td></tr></table></figure><p>使用命令：boltbrowser filename，🌰：<code>boltbrowser sillyGirl.cache</code>，按键盘ctrl+c即可退出查看管理。</p><p><img src="https://yml-img.ml:521/images/2021/09/27/image-184.png" alt="img" /></p><p>如遇到&quot;File sillyGirl.cache is locked. Make sure it’s not used by another app and try again&quot;，按照第1点，杀掉sillyGirl，再使用命令即可打开。</p><h4 id="3-傻妞一些自动回复的api文件"><a class="markdownIt-Anchor" href="#3-傻妞一些自动回复的api文件"></a> 3、傻妞一些自动回复的api文件</h4><p>群里面捞的，感兴趣的自己可以捡一点用，文末下载。</p><h4 id="4-相关文件"><a class="markdownIt-Anchor" href="#4-相关文件"></a> 4、相关文件</h4><ul><li>dev.go  <a href="https://wwr.lanzoui.com/io0Rtuk5fdi">https://wwr.lanzoui.com/io0Rtuk5fdi</a></li><li>Api <a href="https://wwr.lanzoui.com/iyYUjuk5fch">https://wwr.lanzoui.com/iyYUjuk5fch</a>   密码:d5b8</li></ul><h2 id="下面就jd-qinglong也就是验证码登录了"><a class="markdownIt-Anchor" href="#下面就jd-qinglong也就是验证码登录了"></a> 下面就jd-qinglong–也就是验证码登录了</h2><h3 id="首先是项目地址"><a class="markdownIt-Anchor" href="#首先是项目地址"></a> 首先是项目<a href="https://github.com/rubyangxg/jd-qinglong">地址</a></h3><ul><li>这个小姐姐没有教程，只能我自己写了，懒得敲键盘呀，感觉我废了</li></ul><h3 id="开始吧"><a class="markdownIt-Anchor" href="#开始吧"></a> 开始吧</h3><h4 id="我是群辉安装的以群辉为例"><a class="markdownIt-Anchor" href="#我是群辉安装的以群辉为例"></a> 我是群辉安装的，以群辉为例</h4><ul><li>作者的github有<a href="https://github.com/rubyangxg/jd-qinglong/blob/master/jd-qinglong-%E7%BE%A4%E6%99%96%E5%AE%89%E8%A3%85%E6%95%99%E7%A8%8B.pdf">教程</a></li><li>我就再啰嗦几句，你需要线下载这个文件并改名为env.properties<img src="https://yml-img.ml:521/images/2021/09/27/image-20210927111505321.png" alt="image-20210927111505321" /></li><li>下载完后配置这个文件<img src="https://yml-img.ml:521/images/2021/09/27/image-20210927111352876.png" alt="image-20210927111352876" /></li><li>然后上传到你群辉的某个地方—例如这里<img src="https://yml-img.ml:521/images/2021/09/27/image-20210927111653977.png" alt="image-20210927111653977" /></li><li>然后根据作者的配置文件进行配置即可，完成后可以在http://你的ip:5701能够访问到如下界面<img src="https://yml-img.ml:521/images/2021/09/27/image-20210927111851496.png" alt="image-20210927111851496" /></li><li>然后短信这边就完成了</li></ul><h2 id="下面是傻妞对接短信也就是教程最少的"><a class="markdownIt-Anchor" href="#下面是傻妞对接短信也就是教程最少的"></a> 下面是傻妞对接短信，也就是教程最少的</h2><h3 id="设置傻妞命令"><a class="markdownIt-Anchor" href="#设置傻妞命令"></a> 设置傻妞命令</h3><ul><li>set jd_cookie address <a href="http://xn--6qq53qnb431rpgw60m:5701">http://你的访问地址:5701</a></li><li>set jd_cookie login_num ?</li><li>例如：<a href="http://xn--abc-c88dn6chxnu7gez2e.com">你的域名为abc.com</a>   则命令就是set jd_cookie address <a href="http://abc.com:5701">http://abc.com:5701</a></li><li><img src="https://yml-img.ml:521/images/2021/09/27/image-20210927112323080.png" alt="image-20210927112323080" /></li></ul><h3 id="短信登录使用"><a class="markdownIt-Anchor" href="#短信登录使用"></a> 短信登录使用</h3><h5 id="对机器人发送登录即可调用"><a class="markdownIt-Anchor" href="#对机器人发送登录即可调用"></a> 对机器人发送登录即可调用</h5><ul><li><img src="https://yml-img.ml:521/images/2021/09/27/image-20210927112716430.png" alt="image-20210927112716430" /></li><li>机器人会默认把你的重要信息撤回（很贴心呀）</li><li>其他的可以自己探索</li></ul><h4 id="下面是机器人的其他命令配合上面的api使用具体自己还没研究"><a class="markdownIt-Anchor" href="#下面是机器人的其他命令配合上面的api使用具体自己还没研究"></a> 下面是机器人的其他命令，配合上面的api使用，具体自己还没研究</h4><p>你好<br />壁纸 二次元<br />舔狗日记<br />股票 (.<em>)<br />短网址 (.</em>)<br />^打赏 ^赞赏<br />^name<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msup><mrow></mrow><mi mathvariant="normal">升</mi></msup><mi mathvariant="normal">级</mi></mrow><annotation encoding="application/x-tex">^升级</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.363em;vertical-align:0em;"></span><span class="mord"><span></span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.363em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord cjk_fallback mtight">升</span></span></span></span></span></span></span></span><span class="mord cjk_fallback">级</span></span></span></span><br />^重启<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msup><mrow></mrow><mi mathvariant="normal">命</mi></msup><mi mathvariant="normal">令</mi></mrow><annotation encoding="application/x-tex">^命令</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.363em;vertical-align:0em;"></span><span class="mord"><span></span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.363em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord cjk_fallback mtight">命</span></span></span></span></span></span></span></span><span class="mord cjk_fallback">令</span></span></span></span><br />^set\s+(\S+)\s+(\S+)\s+(\S+)<span class='katex-error' title='ParseError: KaTeX parse error: Undefined control sequence: \s at position 9: ^delete\̲s̲+(\S+)\s+(\S+)'>^delete\s+(\S+)\s+(\S+)</span><br />^get\s+(\S+)\s+(\S+)<span class='katex-error' title='ParseError: KaTeX parse error: Undefined control sequence: \s at position 7: ^send\̲s̲+(\S+)\s+(\S+)\…'>^send\s+(\S+)\s+(\S+)\s+(\S+)</span><br />^myuid<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msup><mrow></mrow><mi>c</mi></msup><mi>o</mi><mi>m</mi><mi>p</mi><mi>i</mi><mi>l</mi><mi>e</mi><msub><mi>d</mi><mi>a</mi></msub><mi>t</mi></mrow><annotation encoding="application/x-tex">^compiled_at</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord"><span></span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.664392em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">c</span></span></span></span></span></span></span></span><span class="mord mathdefault">o</span><span class="mord mathdefault">m</span><span class="mord mathdefault">p</span><span class="mord mathdefault">i</span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault">e</span><span class="mord"><span class="mord mathdefault">d</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">a</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord mathdefault">t</span></span></span></span><br />^started_at<span class='katex-error' title='ParseError: KaTeX parse error: Undefined control sequence: \s at position 5: ^ql\̲s̲+config'>^ql\s+config</span><br />^ql\s+envs<span class='katex-error' title='ParseError: KaTeX parse error: Undefined control sequence: \s at position 5: ^ql\̲s̲+env\s+get\s+(\…'>^ql\s+env\s+get\s+(\S+)</span><br />^ql\s+env\s+find\s+(\S+)<span class='katex-error' title='ParseError: KaTeX parse error: Undefined control sequence: \s at position 5: ^ql\̲s̲+env\s+set\s+(\…'>^ql\s+env\s+set\s+(\S+)\s+(\S+)</span><br />^ql\s+env\s+remark\s+(\S+)\s+(\S+)<span class='katex-error' title='ParseError: KaTeX parse error: Undefined control sequence: \s at position 5: ^ql\̲s̲+env\s+disable\…'>^ql\s+env\s+disable\s+(\S+)</span><br />^ql\s+env\s+enable\s+(\S+)<span class='katex-error' title='ParseError: KaTeX parse error: Undefined control sequence: \s at position 5: ^ql\̲s̲+crons'>^ql\s+crons</span><br />^ql\s+cron\s+status\s+(\S+)<span class='katex-error' title='ParseError: KaTeX parse error: Undefined control sequence: \s at position 5: ^ql\̲s̲+cron\s+run\s+(…'>^ql\s+cron\s+run\s+(\S+)</span><br />^ql\s+cron\s+stop\s+(\S+)<span class='katex-error' title='ParseError: KaTeX parse error: Undefined control sequence: \s at position 5: ^ql\̲s̲+cron\s+enable\…'>^ql\s+cron\s+enable\s+(\S+)</span><br />^ql\s+cron\s+disable\s+(\S+)<span class='katex-error' title='ParseError: KaTeX parse error: Undefined control sequence: \s at position 5: ^ql\̲s̲+cron\s+find\s+…'>^ql\s+cron\s+find\s+(\S+)</span><br />^ql\s+cron\s+logs\s+(\S+)<span class='katex-error' title='ParseError: KaTeX parse error: Undefined control sequence: \s at position 5: ^ql\̲s̲+update'>^ql\s+update</span><br />^ql\s+update\s+logs<span class='katex-error' title='ParseError: KaTeX parse error: Undefined control sequence: \s at position 5: ^ql\̲s̲+cron\s+hide\s+…'>^ql\s+cron\s+hide\s+duplicate</span><br />^jd\s+asset\s+(\S+)$ ^查询 (\S+)<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msup><mrow></mrow><mi mathvariant="normal">资</mi></msup><mi mathvariant="normal">产</mi><mi mathvariant="normal">推</mi><mi mathvariant="normal">送</mi></mrow><annotation encoding="application/x-tex">^资产推送</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.363em;vertical-align:0em;"></span><span class="mord"><span></span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.363em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord cjk_fallback mtight">资</span></span></span></span></span></span></span></span><span class="mord cjk_fallback">产</span><span class="mord cjk_fallback">推</span><span class="mord cjk_fallback">送</span></span></span></span><br />^查询<span class='katex-error' title='ParseError: KaTeX parse error: Undefined control sequence: \s at position 5: ^jd\̲s̲+today\s+bean[(…'>^jd\s+today\s+bean[(](\S+)[)]</span><br />^jd\s+yestoday\s+bean<a href="%5CS+">(</a>[)]<span class='katex-error' title='ParseError: KaTeX parse error: Undefined control sequence: \s at position 5: ^jd\̲s̲+bean[(](\S+)[)…'>^jd\s+bean[(](\S+)[)]</span><br />^更新狗东账号<br />^jd\s+find\s+(\S+)<span class='katex-error' title='ParseError: KaTeX parse error: Undefined control sequence: \s at position 5: ^jd\̲s̲+exchange\s+(\S…'>^jd\s+exchange\s+(\S+)\s+(\S+)</span><br />^jd\s+enable\s+(\S+)<span class='katex-error' title='ParseError: KaTeX parse error: Undefined control sequence: \s at position 5: ^jd\̲s̲+disable\s+(\S+…'>^jd\s+disable\s+(\S+)</span><br />^jd\s+remark\s+(\S+)\s+(\S+)<span class='katex-error' title='ParseError: KaTeX parse error: Undefined control sequence: \d at position 4: ^(\̲d̲{11})'>^(\d{11})</span><br />^登录<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msup><mrow></mrow><mi mathvariant="normal">登</mi></msup><mi mathvariant="normal">陆</mi></mrow><annotation encoding="application/x-tex">^登陆</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.363em;vertical-align:0em;"></span><span class="mord"><span></span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.363em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord cjk_fallback mtight">登</span></span></span></span></span></span></span></span><span class="mord cjk_fallback">陆</span></span></span></span><br />^(\d{6})<span class='katex-error' title='ParseError: KaTeX parse error: Undefined control sequence: \s at position 5: ^jd\̲s̲+unbind\s+(\S+)'>^jd\s+unbind\s+(\S+)</span><br />pt_key=([<sup>;=\s]+);\s*pt_pin=([</sup>;=\s]+)<br />pin=([<sup>;=\s]+);\s*wskey=([</sup>;=\s]+)<br />packetId=(\S+)(&amp;|&amp;)currentActId</p><h2 id="ok终于写完了jd现在越来越折腾了呢不过痛并快乐着"><a class="markdownIt-Anchor" href="#ok终于写完了jd现在越来越折腾了呢不过痛并快乐着"></a> ok，终于写完了，jd现在越来越折腾了呢，不过痛并快乐着！</h2><ul><li>有任何问题可以留言或者联系我 <a href="mailto:yml2213@icloud.com">yml2213@icloud.com</a></li><li>再见！</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> 傻妞 </tag>
            
            <tag> 青龙 </tag>
            
            <tag> 京东 </tag>
            
            <tag> 群辉 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Cheveroto图床的搭建、使用与美化</title>
      <link href="/202108086191/"/>
      <url>/202108086191/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="由于群辉升级出现一点小问题"><a class="markdownIt-Anchor" href="#由于群辉升级出现一点小问题"></a> 由于群辉升级，出现一点小问题</h2><ul><li><strong>由于升级群辉7.0.1（新的photo实在是太香了）没备份数据库，，造成了图库无法管理以前的照片，但是可以访问   可以访问  可以访问，给您带来的不便，请见谅</strong></li><li>使用者请重新创建账户，又任何问题请联系 <a href="mailto:yml2213@icloud.com">yml2213@icloud.com</a></li></ul><h2 id="首先欢迎使用"><a class="markdownIt-Anchor" href="#首先欢迎使用"></a> 首先，欢迎使用</h2><p>欢迎使用我的图床：<a href="https://yml-img.ml:521/">梦磊の图库</a>（游客通道再次开启，请勿上传违法照片）</p><h2 id="cheveroto图床是什么"><a class="markdownIt-Anchor" href="#cheveroto图床是什么"></a> Cheveroto图床是什么</h2><h3 id="简介"><a class="markdownIt-Anchor" href="#简介"></a> 简介</h3><p><a href="https://www.smbinn.com/tag/chevereto">Chevereto</a>是一款基于PHP语言开发的图片托管程序（简称：图床），允许您在自己的服务器上创建一个漂亮的功能齐全的图像托管网站。并且完全由自己管理，不会受到任何限制。这是我迄今为止用过最好的图床程序了！</p><p>需要注意的是：Chevereto其实是收费软件，不过官方提供了免费版本。虽然如此但功能已经很强大了，相信可以满足大部分人的需求了。</p><p>官网：<a href="https://www.smbinn.com/tag/chevereto">Chevereto</a></p><p>github：<a href="https://github.com/chevereto/Chevereto-Free">Chevereto-Free</a></p><h2 id="搭建背景"><a class="markdownIt-Anchor" href="#搭建背景"></a> 搭建背景</h2><h3 id="设备介绍"><a class="markdownIt-Anchor" href="#设备介绍"></a> 设备介绍</h3><ul><li>群晖一个（黑白皆可）/ 其他可以长时间服务的linux设备</li><li>CDN   可选项</li><li>稳定的网络</li></ul><h3 id="搭建原因"><a class="markdownIt-Anchor" href="#搭建原因"></a> 搭建原因</h3><ul><li><p>玩过博客的同学都知道，blog里面想稳定的插入一张图片有多难，用别人的图床吧，不放心；免费的图床限制很多，稳定性也不知道怎么样。所以靠人不如靠自己，有能力还是自建最好的。虽然是这么个理，但是还是欢迎使用我的小图床的，可以应急啥的，稳定性吗？（blog不倒，图床到老！）</p></li><li><p>欢迎使用：<a href="https://yml-img.ml:521/">梦磊の图库</a></p></li></ul><h3 id="搭建过程"><a class="markdownIt-Anchor" href="#搭建过程"></a> 搭建过程</h3><p>先上参考链接</p><ul><li>什么值得买–<a href="https://post.smzdm.com/p/a3gvxnon/">群晖搭建 chevereto 图床</a></li><li>svend大佬：<a href="https://blog.svend.cc/upic/tutorials/chevereto/">uPic 图床配置教程 - Chevereto</a></li><li>ztygalaxy大佬： <a href="https://tyzhang.top/article/autoupload/">Typora + PicGo 自动上传图片到 Chevereto 图床</a></li></ul><hr /><h2 id="正文开始"><a class="markdownIt-Anchor" href="#正文开始"></a> 正文开始</h2><h3 id="群晖安装chevereto"><a class="markdownIt-Anchor" href="#群晖安装chevereto"></a> 群晖安装Chevereto</h3><p>这里才用了什么值得买上<code>zhouningyi01</code>的<a href="https://post.smzdm.com/p/a3gvxnon/">教程</a>，链接如下。但是有些许不同。</p><h4 id="下载chevereto代码"><a class="markdownIt-Anchor" href="#下载chevereto代码"></a> 下载Chevereto代码</h4><ul><li><a href="https://github.com/chevereto/Chevereto-Free">Chevereto-Free</a>下载源码</li></ul><h4 id="群晖安装环境"><a class="markdownIt-Anchor" href="#群晖安装环境"></a> 群晖安装环境</h4><ol><li>在群晖的套件中心安装图中的套件，其中PHP版本可能不是7.4，需要在所有套件中自行下载安装。</li></ol><p><img src="https://yml-img.ml:521/images/2021/08/08/image-20210808141238885.png" alt="image-20210808141238885" /></p><p>2.打开群晖的 Web Station 套件，点击 PHP 设置，如果有就点编辑，如果没有条目就点击新增，然后选择PHP7.4，将下方的扩展名全部打勾，然后确定保存。</p><p><img src="https://yml-img.ml:521/images/2021/08/08/image-20210808141703645.png" alt="image-20210808141703645" /></p><p>3.把下载的Chevereto压缩包上传到NAS的web目录下并解压（如圈2）</p><p><img src="https://yml-img.ml:521/images/2021/08/08/image-20210808141917336.png" alt="image-20210808141917336" /></p><p>4.给Chevereto文件夹权限，<code>右键</code>-<code>属性</code>-<code>权限</code>，然后<code>新增</code>，用户组选 Everyone，并给与<code>管理</code>、<code>读取</code>、写入权限，然后勾上<code>应用到这个文件夹、子文件夹及文件</code>（圈5）后保存。</p><p><img src="https://yml-img.ml:521/images/2021/08/08/image-20210808142318024.png" alt="image-20210808142318024" /></p><p>5.打开群晖的phpMyAdmin，新建一个数据库，数据库名称可以自定义。</p><p><img src="https://yml-img.ml:521/images/2021/08/08/131628403925_.pic_hde154fd837bc37224.png" alt="131628403925_.pic_hd" /></p><p>6.打开 Web Station 设置虚拟主机，根据需要选择基于名称或基于端口，因为我80、443端口被封，所以做了又拍云CDN加速，选择基于端口，文档根目录选择到chevereto的目录，并选择对应的后端服务器和PHP版本，最后点击确认。<img src="https://yml-img.ml:521/images/2021/08/08/image-20210808142843466.png" alt="image-20210808142843466" /></p><p>7.<strong>新建一个文本文档，将 “新建文本文档.txt” 重命名为”settings.php“之后传到 web/chevereto/app 文件夹下，缺少这一步的话打开网站会提示：Chevereto can’t create the app/settings.php file. You must manually create this file。</strong><br />8. 打开群晖IP地址：端口号打开管理页面然后填入数据库信息开始安装。（直接盗图了）</p><p><img src="https://yml-img.ml:521/images/2021/08/08/5ec4b6e49e2e12303.jpg_e1080.jpg" alt="5ec4b6e49e2e12303.jpg_e1080" /></p><p>9.Chevereto相关设置。（直接盗图了）<img src="https://yml-img.ml:521/images/2021/08/08/5ec4b6e4cfa027308.png_e1080.png" alt="5ec4b6e4cfa027308.png_e1080" />最后一项如果选择personal则只能自己使用，如果选择community则允许其他用户注册。</p><p>至此安装完成。</p><p>10.进入后修改语言。（直接盗图了）<img src="https://yml-img.ml:521/images/2021/08/08/5ec4b6e4d3f9d880.png_e1080.png" alt="5ec4b6e4d3f9d880.png_e1080" /></p><p>11.ok，目前为止，你已经完成了基础的搭建，可以在本地正常使用了，但是想外网访问，套CDN等，还要慢慢设置。</p><h2 id="chevereto的外网访问与个性美化"><a class="markdownIt-Anchor" href="#chevereto的外网访问与个性美化"></a> Chevereto的外网访问与个性美化</h2><h3 id="外网访问"><a class="markdownIt-Anchor" href="#外网访问"></a> 外网访问</h3><ul><li>配置外网访问还是很简单的，有公网ip的话，可以直接做端口映射</li><li>没有公网ip的话，就需要做内网穿透了</li></ul><h3 id="配置cdn"><a class="markdownIt-Anchor" href="#配置cdn"></a> 配置CDN</h3><ul><li><p>个人使用的是<a href="https://www.upyun.com/">又拍云</a>的CDN，因为有个又拍云联盟，可以白嫖</p></li><li><p>下面是CDN的简单配置（域名需要备案，或者用备案过域名的子域名）</p><ul><li>配置源站    可以访问你图床的地址就是</li></ul><p><img src="https://yml-img.ml:521/images/2021/08/08/image-20210808154439907.png" alt="image-20210808154439907" /></p><ul><li>协议跟随  一定要选择全程跟随，不然注销回出错<img src="https://yml-img.ml:521/images/2021/08/08/image-20210808154716461.png" alt="image-20210808154716461" /></li><li>别的没什么特殊点，又不懂的可以看<a href="https://help.upyun.com/docs/cdn/">这里</a>，或者直接给又拍云发工单，服务态度还是特别好的</li></ul></li></ul><h3 id="个性美化"><a class="markdownIt-Anchor" href="#个性美化"></a> 个性美化</h3><ul><li><p>美化的话基本就是自定义设置与通知邮箱美化</p></li><li><p>自定义设置</p><ul><li>主要是这几个地方，自己看着设置就行<img src="https://yml-img.ml:521/images/2021/08/08/image-20210808155435921.png" alt="image-20210808155435921" /></li></ul></li><li><p>邮箱美化</p><ul><li>看松鼠大佬的<a href="https://doge.uk/coding/chevereto-mail-template.html">blog</a></li><li>基本无脑替换就可以了</li></ul></li></ul><h2 id="快速使用与typora配合"><a class="markdownIt-Anchor" href="#快速使用与typora配合"></a> 快速使用与typora配合</h2><h3 id="软件提供api接口"><a class="markdownIt-Anchor" href="#软件提供api接口"></a> 软件提供api接口</h3><ul><li>api可以在 设置-仪表盘-api中查看</li><li>默认api上传的是游客文件夹，可以通过这篇文章修改</li><li>api接口不要泄漏</li></ul><h3 id="配合upic使用"><a class="markdownIt-Anchor" href="#配合upic使用"></a> 配合upic使用</h3><ul><li>经个人实验，upic可能是最好用的客户端。缺点是mac os独占软件<ul><li>设置教程看请查看：<a href="https://blog.svend.cc/upic/tutorials/chevereto/">sveed大佬</a></li><li>讲的十分详细，upic是唯一支持“域名+端口”形式上传的</li></ul></li></ul><h3 id="配合picgo使用"><a class="markdownIt-Anchor" href="#配合picgo使用"></a> 配合picgo使用</h3><ul><li>pic go是全平台软件，设置是只能设置为域名，加端口号会出错</li><li>设置教程请查看：<a href="https://tyzhang.top/article/autoupload/">ztygalaxy的blog</a></li></ul><h2 id="终于完成"><a class="markdownIt-Anchor" href="#终于完成"></a> 终于完成</h2><ul><li>这样Chevereto的设置基本就完成了，可以尽情的享受了</li><li>不推荐大家使用破解版，免费版的功能已经够日常使用了，要求很高的话希望大家支持正版</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> Cheveroto </tag>
            
            <tag> 分享 </tag>
            
            <tag> 图床 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>分享个jellyfin账号</title>
      <link href="/2021071316196/"/>
      <url>/2021071316196/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="分享一个jellyfin账号"><a class="markdownIt-Anchor" href="#分享一个jellyfin账号"></a> 分享一个jellyfin账号</h2><h3 id="你不知道jellyfin是什么"><a class="markdownIt-Anchor" href="#你不知道jellyfin是什么"></a> 你不知道jellyfin是什么？</h3><h4 id="jellyfin简单介绍"><a class="markdownIt-Anchor" href="#jellyfin简单介绍"></a> jellyfin简单介绍</h4><ol><li>Jellyfin 是一款个人媒体服务器。 Jellyfin 寻求成为 Emby 和 Plex 的免费软件替代品，以提供从专用服务器到最终用户设备的媒体管理和流媒体。Jellyfin 不仅功能强大，性能也十分优异，即使从外网观看家里的影视库，也是十分地流畅。</li></ol><blockquote><p>按照官方的说法是，由于 Emby 3.6 开始闭源后，引起了一些核心开发人员的不满，所以最近在 Emby 的基础上单独开发了 Jellyfin 媒体服务器，致力于让所有用户都能访问最好的媒体系统。并且可以将 Emby 版本 3.5.2 及之前的数据无缝迁移过来。</p></blockquote><ol start="2"><li><p><strong>jellyfin客户端支持</strong></p><p>电脑Mac、Windows、Linux</p><p>移动端：IOS、Android、Ipad</p><p>电视盒子端：Apple TV、Android TV、Roku</p><p>jellyfin的默认端口是 http—8096、https–8920</p></li><li><p><strong>其他客户端:Infuse或者kodi  ----- 都支持jellyfin服务器</strong></p></li><li><p><strong>jellyfin服务器</strong></p><p>jellyfin的服务器可以在局域网中搭建,比如常见的NAS系统 群晖或者威联通等</p><p>除了局域网jellyfin服务器,jellyfin的服务器也可以是广域网中的</p></li></ol><h4 id="是不是有点迷糊了其实上面的都不重要"><a class="markdownIt-Anchor" href="#是不是有点迷糊了其实上面的都不重要"></a> 是不是有点迷糊了，其实上面的都不重要</h4><p>​<strong>你只需要学会怎么使用就够了</strong></p><ol><li>根据你要使用的客户端，下载相关的客户端，这个根据上面选择客户端即可</li><li>在客户端登录上本站分享的jellyfin账号，你就可以直接观看了，是不是超级简单</li><li>如果没有你想看的，可以在本站留言版—写下你想看的资源，我会尽力帮你下载（一般是从pt站下载的，请不要问我要下载地址，如果玩pt可以相互交流），一般只要你能在网上搜到的，我基本都可以下载到（吹个小🐂  ）223333</li></ol><h4 id="来几张截图"><a class="markdownIt-Anchor" href="#来几张截图"></a> 来几张截图</h4><p><img src="https://yml.cool:7788/images/2021/07/13/bWnd2g.png" alt="1" /></p><p><img src="https://yml.cool:7788/images/2021/07/13/xie08X.png" alt="2" /></p><p><img src="https://yml.cool:7788/images/2021/07/13/fut1IR.png" alt="" /></p><p><img src="https://yml.cool:7788/images/2021/07/13/JFTASK.png" alt="" /></p><p><img src="https://yml.cool:7788/images/2021/07/13/f110Td.png" alt="" /></p><h5 id="常见问题"><a class="markdownIt-Anchor" href="#常见问题"></a> 常见问题</h5><ol><li>你无法下载相关客户端——这个基本可以google+百度</li><li>无法观看视频——这个可能是某些视频格式限制在线播放——你可以考虑换个客户端或使用破解客户端</li><li>你是水果（苹果）系列的话，可以使用infuse</li><li>你是安卓或者盒子就更简单了，找一个破解客户端，安装即可</li><li>没有你想看的资源——留言版联系我或联系 “<a href="mailto:yml2213@icloud.com">yml2213@icloud.com</a>”</li><li>木了——    （随时补充）</li></ol><h2 id="jellyfin账号"><a class="markdownIt-Anchor" href="#jellyfin账号"></a> jellyfin账号</h2><p>登录地址： <a href="http://yml.cool:8096/">http://yml.cool:8096/</a></p><p>账号：<span class="hide-inline"><button type="button" class="hide-button button--animated" style="background-color: #FF7242;color: #fff">点击查看账号  </button><span class="hide-content">blog </span></span></p><p>密码：<span class="hide-inline"><button type="button" class="hide-button button--animated" style="background-color: #FF7242;color: #fff">点击查看密码  </button><span class="hide-content">menglei.xyz </span></span></p><h2 id="最后"><a class="markdownIt-Anchor" href="#最后"></a> 最后</h2><ul><li>遇到任何问题可联系我</li><li>祝你玩的愉快</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> jellyfin </tag>
            
            <tag> 福利 </tag>
            
            <tag> PT </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>docker安装青龙面板2.2（薅羊毛-京东）</title>
      <link href="/202106245593/"/>
      <url>/202106245593/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="青龙面板是啥"><a class="markdownIt-Anchor" href="#青龙面板是啥"></a> 青龙面板是啥?</h1><ol><li>作者链接： <a href="https://github.com/whyour/qinglong">链接</a></li></ol><p><a href="https://github.com/whyour/qinglong"><img src="https://camo.githubusercontent.com/d4cf0306c9c32c8eb300e1343e561d032fb02731a6d8108d299d4de5310222f4/68747470733a2f2f71696e676c6f6e672e7768796f75722e636e2f71696e676c6f6e672e706e67" alt="img" /></a></p><h1 id="青龙wip"><a class="markdownIt-Anchor" href="#青龙wip"></a> 青龙(WIP)</h1><p>python和javaScript的定时任务管理面板</p><p><a href="https://qinglong.whyour.cn/nice.png"><img src="https://camo.githubusercontent.com/0add552e295462d4db29e634df339af36ac0c63b681eb4a7fb4c9ce7428de6db/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f6e6174652d7765636861742d677265656e3f7374796c653d666f722d7468652d6261646765" alt="donate" /></a> <a href="https://img.shields.io/docker/cloud/build/whyour/qinglong"><img src="https://camo.githubusercontent.com/987164e5886ee0e9f47675b31838e307fbf79076687fc83afc48c3de47fd66c1/68747470733a2f2f696d672e736869656c64732e696f2f646f636b65722f636c6f75642f6275696c642f7768796f75722f71696e676c6f6e673f7374796c653d666f722d7468652d6261646765" alt="build status" /></a> <a href="https://hub.docker.com/r/whyour/qinglong"><img src="https://camo.githubusercontent.com/a213b1e49a10b7399fe49ddb071068da527225e908b30e2a156b39e62df32bdc/68747470733a2f2f696d672e736869656c64732e696f2f646f636b65722f70756c6c732f7768796f75722f71696e676c6f6e673f7374796c653d666f722d7468652d6261646765" alt="docker pulls" /></a> <a href="https://hub.docker.com/r/whyour/qinglong/tags?page=1&amp;ordering=last_updated"><img src="https://camo.githubusercontent.com/bedf287ab495e14a5ba4f3ab63fed25743512fc080ed593605303eba80c946f0/68747470733a2f2f696d672e736869656c64732e696f2f646f636b65722f762f7768796f75722f71696e676c6f6e673f7374796c653d666f722d7468652d6261646765" alt="docker version" /></a> <a href="https://hub.docker.com/r/whyour/qinglong"><img src="https://camo.githubusercontent.com/aedf78aca70d8f82a092a25a8f453a6597c0f793bd92b04bfa4bca0d9a22c01e/68747470733a2f2f696d672e736869656c64732e696f2f646f636b65722f73746172732f7768796f75722f71696e676c6f6e673f7374796c653d666f722d7468652d6261646765" alt="docker stars" /></a> <a href="https://hub.docker.com/r/whyour/qinglong"><img src="https://camo.githubusercontent.com/fc155b27799efc6a20dbb50b992c6d6bc0d397175ff74a81081a130dff10604e/68747470733a2f2f696d672e736869656c64732e696f2f646f636b65722f696d6167652d73697a652f7768796f75722f71696e676c6f6e673f7374796c653d666f722d7468652d6261646765" alt="docker image size" /></a></p><p>青龙，又名苍龙，在中国传统文化中是四象之一、<a href="https://zh.wikipedia.org/wiki/%E5%A4%A9%E4%B9%8B%E5%9B%9B%E7%81%B5">天之四灵</a>之一，根据五行学说，它是代表东方的灵兽，为青色的龙，五行属木，代表的季节是春季，八卦主震。苍龙与应龙一样，都是身具羽翼。《张果星宗》称“又有辅翼，方为真龙”。</p><p>《后汉书·律历志下》记载：日周于天，一寒一暑，四时备成，万物毕改，摄提迁次，青龙移辰，谓之岁。</p><p>在中国<a href="https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8D%81%E5%85%AB%E5%AE%BF">二十八宿</a>中，青龙是东方七宿（角、亢、氐、房、心、尾、箕）的总称。 在早期星宿信仰中，祂是最尊贵的天神。 但被道教信仰吸纳入其神系后，神格大跌，道教将其称为“孟章”，在不同的道经中有“帝君”、“圣将”、“神将”和“捕鬼将”等称呼，与白虎监兵神君一起，是道教的护卫天神。</p><ol start="2"><li>说人话就是脚本管理面板 --python和javaScript的脚本</li></ol><h1 id="青龙面板能干啥"><a class="markdownIt-Anchor" href="#青龙面板能干啥"></a> 青龙面板能干啥？</h1><ol><li>顾名思义——管理你的脚本</li><li>方便脚本的定时任务</li><li>可以薅羊毛（主要是京东的）</li></ol><h1 id="该怎么安装呢"><a class="markdownIt-Anchor" href="#该怎么安装呢"></a> 该怎么安装呢？</h1><ul><li><strong>准备部分</strong><ul><li>一个服务器或者电脑（<s>废话，不然怎么运行</s>）</li><li>一个灵活的小脑袋</li><li>一张不懂就问的嘴</li></ul></li><li><strong>教程部分</strong><ol><li><p>服务器或电脑安装docker （这个很简单，不会请隔壁<a href="https://www.baidu.com">百度</a>或<a href="%5BGoogle%5D(https://www.google.com/)">Google</a>）</p></li><li><p>从这里就开始有差别了，本人是（黑）群晖，docker有gui界面，比较方便操作,下面主讲gui界面操作<s>因为别的我也不会</s>  其他系统操作请看[这里](<a href="https://www.runoob.com/docker/docker-tutorial.html">Docker 教程 | 菜鸟教程 (runoob.com)</a>)</p></li><li><p>打开docker，在界面点注册表——搜索“qinglong”——选择drewnb这位大佬的<img src="https://yml.cool:7788/images/2021/06/24/image-20210624140225287.png" alt="image-20210624140225287" /></p></li><li><p>双击 或者点击“下载”  ，根据自己的需要选择版本——最好选择第二个（<s>典型我可以不用，但你不能没有</s>）</p><p>​2.2-jdc 为锁定版，以更改为本人源码（源码更改自limoe大佬），无bot，jdc随容器启动</p><p>​2.2-jdc-bot 为锁定版，以更改为本人源码（源码更改自limoe大佬），有bot，jdc随容器启动</p><p>​jdc有BUG弃用,请使用2.2-jdc或2.2-jdc-bot<img src="https://yml.cool:7788/images/2021/06/24/image-20210624140302097.png" alt="image-20210624140309726" /></p></li><li><p>下载完成后，点击映像（不同平台可能叫法不同），选择刚下载的映像</p></li><li><p>双击打开，进行设定</p></li><li><p>选择高级设定   用过的应该会操作了，我因为部署过了，所以给几张设定图片<img src="https://yml.cool:7788/images/2021/06/24/image-20210624141614626.png" alt="image-20210624141614626" /><img src="https://yml.cool:7788/images/2021/06/24/image-20210624141626293.png" alt="image-20210624141626293" /><img src="https://yml.cool:7788/images/2021/06/24/image-20210624141646356.png" alt="image-20210624141646356" /></p></li><li><p>如果还不会的，可以留言或者联系我</p></li><li><p>设定好以后会开启映像，然后就可以通过“你的IP:5700” 你的局域网ip+端口号的形式访问了，你应该会看到这个画面， 用户名：admin   密码：admin    ，然后他会提示你已经登录，初始后的密码存在于XXXXX（路径）<img src="https://yml.cool:7788/images/2021/06/24/image8035b88cf22b6eb6.png" alt="" />然后你就可以去提示的路径看到你的新密码 ，最后用新密码就能登录到面板了<img src="https://yml.cool:7788/images/2021/06/24/image-20210624142020604864d6638216c9b8a.png" alt="image-20210624142020604" /></p></li><li><p>登录以后默认的命令只有三个，你可以在这里添加新的脚本<img src="https://yml.cool:7788/images/2021/06/24/image-20210624142355036.png" alt="image-20210624142355036" /></p></li><li><p>我提供一个自用的脚本<code>ql repo https://github.com/chinnkarahoi/jd_scripts.git &quot;jd_|jx_|getJDCookie&quot; &quot;activity|backUp&quot; &quot;^jd[^_]|USER&quot;</code>  <img src="https://yml.cool:7788/images/2021/06/24/image-20210624142510975.png" alt="image-20210624142510975" />   这个脚本为京东薅羊毛脚本，具体使用步骤后面会提到</p></li><li><p>有关于添加定时的几个选项   名称：可以自定义命令： 可以用我的或者去<a href="https://www.kejiwanjia.com/zheteng/1178.html#comment-2124">这里</a>学习下       定时规则：一个叫cron表达式<s>好像是</s>  可以看看<a href="https://www.kejiwanjia.com/notes/1958.html">这里</a>，这两个是我找的在线规则网站  <a href="https://tool.lu/crontab/">网站1：解析</a>，<a href="https://cron.qqe2.com/">网站2：解析与编写都可</a> ，还不会的看<strong>准备部分</strong></p></li><li><p>用 你的 “ip+5701” 可以访问到 JDC，jdc就是一个可以扫码快速获取你的cookie的东西（应该是这样的），你应该会看到这样，<img src="https://yml.cool:7788/images/2021/06/24/image-20210624143719948.png" alt="image-20210624143738672" /></p></li><li><p>点击会出现或刷新二维码，用京东扫码后授权登录，你的cookie就可以被存放在青龙面板里，<img src="https://yml.cool:7788/images/2021/06/24/image-20210624144014688.png" alt="image-20210624144014688" /></p></li><li><p>然后去定时任务，选择你刚刚添加的  点击运行，等一会完成了<img src="https://yml.cool:7788/images/2021/06/24/image-20210624144819014.png" alt="image-20210624144819014" /></p></li></ol></li></ul><h1 id="其他问题"><a class="markdownIt-Anchor" href="#其他问题"></a> 其他问题</h1><ol><li>这样一个完整的流程下来，基本就可以运行了，每个任务都有自己的定时计划，默认是不用管他的</li><li>只要你保证主机而且docker运行，会一直给你做京东的任务，京豆也是会加好多</li><li>有其他任何问题可以留言</li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> docker </tag>
            
            <tag> 青龙 </tag>
            
            <tag> 教程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>我与我的黑群晖</title>
      <link href="/2021052814177/"/>
      <url>/2021052814177/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="黑群晖这件事也是折腾了许久"><a class="markdownIt-Anchor" href="#黑群晖这件事也是折腾了许久"></a> 黑群晖这件事也是折腾了许久</h2><p>​其实群晖这个东西在高中，甚至在大学就听说过，只恨自己是真的穷，买不起这些玩意；现在毕业了，自己也工作了，终于有点钱可以搞一下自己喜欢的东西了！</p><h4 id="那么开始吧"><a class="markdownIt-Anchor" href="#那么开始吧"></a> 那么开始吧！</h4><ol><li><p>首先，你需要一个电脑（这不是废话吗，没电脑，折腾空气吗？跟一颗喜欢折腾的心♥，不然直接白裙</p></li><li><p>然后，你需要登录这个 <a href="http://www.nasyun.com">这个</a> 或  <a href="https://www.openos.org/">这个</a> 网站，了解下黑群晖一些基本信息</p></li><li><p>然后你就可以看网站的教程自己黑了，我没啥可说的，哈哈哈哈哈哈哈；来张<a href="https://xpenology.com/forum/topic/13333-tutorialreference-6x-loaders-and-platforms/">截图</a>吧！</p><p><img src="https://yml-img.ml:521/images/2022/02/28/TTkGyq.jpg" alt="image-20210528164727413" /></p></li><li><p>其实需要注意的只有以下几点：</p><ul><li>你一定要明确自己的目的，然后再选择硬件配置，只是想简单使用，不做大型影音播放的话，最好选低功耗板U；想做家庭影音或在线视频库的需要配置高一点，最好是带核显的且大于4带的intel CPU，这样可以核显硬解很多高质量片源(10bit、h265啥的)，咱也不是特别懂，反正好像是918以上的支持核显硬解，说错了大佬轻喷</li><li>然后确认自己宽带服务商isp（公网ip有关）：<ul><li>如果你是电信—— 恭喜你，你是要到公网IP可能性最大的，当然，这个跟地区也有一定的关系</li><li>如果你是联通——也是有可能要到公网IP的，不过概率没有电信大，当然，也跟地区有关了，还有、还有、还有、最重要的   ——**感谢联通  **  <strong>感谢联通</strong>  <strong>感谢联通</strong>，让我们看到了无数小姐姐！</li><li>如果你是联通——垃圾移动······     别骂了，别骂了   虽然移动的概率是最低的，但是好像移动的可以通过ip V6来实现曲线救国，移动的小伙伴可以尝试下，我看的资料不多.</li><li>如果你是铁通、长城—— 不知道现在还有吗，自己测试吧</li></ul></li><li>然后就是折腾群晖套件、docker、影音库了    欢迎入坑，哈哈哈哈</li></ul></li><li><p>最后，黑群晖比很苹果要简单得多，只要搭建好了平台，安装系统，那就是几个小时的事</p></li><li><p>总结下：一入 <strong><s>黑果</s></strong> 群晖深似海，从此早睡是路人！</p></li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> 群晖 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Butterfly主题美化</title>
      <link href="/202011053076/"/>
      <url>/202011053076/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="butterfly主题美化备忘"><a class="markdownIt-Anchor" href="#butterfly主题美化备忘"></a> Butterfly主题美化备忘</h2><p>终于找到了自己喜欢的主题，折腾了这么久也终于可以安安稳稳的写点东西了，感觉自己想改得东西改的也有七七八八了，下一步就是找 <s>下个主题折腾</s> 安心写点东西了。</p><h2 id="那么开始吧"><a class="markdownIt-Anchor" href="#那么开始吧"></a> 那么开始吧</h2><h3 id="看板娘血小板-血小板-血小板"><a class="markdownIt-Anchor" href="#看板娘血小板-血小板-血小板"></a> 看板娘（血小板、血小板、血小板）</h3><ol><li><p>为了这个看板娘可是让我整了好久好久，Google、百度各种帖子，群里各种问问题，自己花样作死，终于到了一个自己可以勉强看得过的样子，虽然还没有做到最好，但是我已经尽我最大的努力了。后面会附上我引用的帖子和帮助过我的大佬，由于过程太复杂，不能把所有的帖子都放上，见谅吧。</p></li><li><p>下面是代码时间，基于<a href="https://github.com/jerryc127/hexo-theme-butterfly">Butterfly</a> 3.3主题，hexo: 5.2.0,来吧，展示</p></li><li><p>在开始之前先说好哈，所有操作都是本人（小白）自己看教程加上自己的“小聪明”，对，就是马老师说的年轻人的小聪明，<s>我看到以后，“啪”的一下点进去了，很快哈</s></p></li><li><p>首先需要你找到主题配置文件，如果你严格按照Butterfly主题文档设置的话，应该在你blog的根目录中，有个名字为_config.butterfly.yml的文件，就是主题配置文件，打开，定位到 <em><strong>*inject*</strong></em> 然后就是在 <strong>bottom</strong> 项下添加如下代码：</p><pre><code> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">​#看板娘</span><br><span class="line">​ - &#x27;&lt;script data-pjax src=&quot;https://fastly.jsdelivr.net/gh/yml66/live2d/js/index.js&quot;&gt;&lt;/script&gt;&#x27;</span><br></pre></td></tr></table></figure></code></pre></li></ol><ul><li>是引用通过jsdelivr加速后的GitHub仓库的资源，反正这是我最终的解决办法了，如果你想自己整的话，可以克隆下我的仓库，或者直接去下面的链接中自己一步步的设置，如果想跟我同款的话可以直接按照上面设置。</li></ul><h3 id="看板娘有关的链接如下"><a class="markdownIt-Anchor" href="#看板娘有关的链接如下"></a> 看板娘有关的链接如下：</h3><p>​    - <a href="https://fxlabtinystar.cn/2020/08/14/Live2dAndHexo/">缘丶星</a><br />​<br />​    - <a href="https://github.com/galnetwen/Live2D">后宫学长</a><br />​<br />​    - <a href="https://github.com/JIAOBANTANG/live2d-xuexiaoban">模型出处</a><br />​<br />​    - <a href="https://fxlabtinystar.cn/2020/08/15/%E7%A7%BB%E5%8A%A8%E7%AB%AF%E5%9B%A0Live2d%E9%80%A0%E6%88%90%E7%9A%84%E8%AE%BF%E9%97%AE%E5%8D%A1%E9%A1%BF%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/">手机端不显示</a><br />​<br />​    - 等等</p><h3 id="背景图片与鼠标样式-鼠标滑动等特效"><a class="markdownIt-Anchor" href="#背景图片与鼠标样式-鼠标滑动等特效"></a> 背景图片与鼠标样式、鼠标滑动等特效</h3><ul><li>这些都是从 <a href="https://www.antmoe.com/">小康大佬</a>大佬哪里偷来的，具体可以去哪里看的，按需选择！</li></ul><h2 id="完工睡觉"><a class="markdownIt-Anchor" href="#完工睡觉"></a> 完工，睡觉😴！</h2><p>​</p>]]></content>
      
      
      
        <tags>
            
            <tag> 随笔 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hi 好久不见</title>
      <link href="/2020110554071/"/>
      <url>/2020110554071/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="记一随笔"><a class="markdownIt-Anchor" href="#记一随笔"></a> 记一随笔</h3><ul><li>距离上次发表文章都是去年的事情了，现在除了去年的域名，什么都没剩下，自己也不知道怎么了，事情总是拿起了又放下，总感觉自己缺点啥，又总是不知道自己要啥！可能这就是“啥也不是”吧，23333</li><li>这几天心血来潮突然又把blog搞起来了，那就不要让他停下来了，总要给自己找点事情做吧，感觉自己的文字表达能力太弱了，想说啥都表达不出来，希望坚持✊ 写作可以慢慢的把自己的表达能力提高一丢丢，而且我建blog都不知道自己要干啥，可能就会当一个随笔，日记吧（正常人谁写日记！）呸，我这是blog！不叫日记！</li><li>有时候感觉自己的笑点跟别人的也不太一样，也不知道自己这次能坚持多久，不管了；加油——致自己！</li></ul><h3 id="关于blog"><a class="markdownIt-Anchor" href="#关于blog"></a> 关于blog</h3><ul><li>我想在这里分享一些自己发现的好东西：至少让自己下次找东西的时候不要找不到</li><li>然后就是如果有人看到的话，可以留言，提个意见；可能就真的会采纳你的建议，我看到的所有留言都会回复（能回复过来的话，23333）最尴尬的莫过于自己自娱自乐了吧！</li><li>就到这里吧</li></ul><h3 id="关于分享"><a class="markdownIt-Anchor" href="#关于分享"></a> 关于分享</h3><ul><li>我分享的东西如果有出处的话，我会打上出处，如果我忘记了，或者找不到了的话，并且侵犯了你的利益，请联系我，我会立即删除！</li><li>好了，该睡觉了 ！  晚安，打工人！</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> 随笔 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
